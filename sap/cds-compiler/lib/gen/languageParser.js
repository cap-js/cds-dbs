// Generated from language.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';
import genericAntlrParser from './genericAntlrParser.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u009a\u0f13\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0003\u0002\u0007\u0002",
    "\u011e\n\u0002\f\u0002\u000e\u0002\u0121\u000b\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u0126\n\u0002\f\u0002\u000e\u0002\u0129",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u012e\n",
    "\u0002\f\u0002\u000e\u0002\u0131\u000b\u0002\u0005\u0002\u0133\n\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u0145\n",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0007\u0004\u014e\n\u0004\f\u0004\u000e\u0004\u0151",
    "\u000b\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u0158\n\u0004\u0005\u0004\u015a\n\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0166\n\u0005\u0003\u0006",
    "\u0003\u0006\u0007\u0006\u016a\n\u0006\f\u0006\u000e\u0006\u016d\u000b",
    "\u0006\u0003\u0006\u0005\u0006\u0170\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u017b\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0185\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u018a\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u018f",
    "\n\u0007\f\u0007\u000e\u0007\u0192\u000b\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u0196\n\u0007\u0003\b\u0003\b\u0003\b\u0005\b\u019b\n\b",
    "\u0003\t\u0003\t\u0005\t\u019f\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0007",
    "\n\u01a5\n\n\f\n\u000e\n\u01a8\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u01b1\n\u000b",
    "\f\u000b\u000e\u000b\u01b4\u000b\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u01b9\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0007\f\u01c0\n\f\f\f\u000e\f\u01c3\u000b\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u01c8\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u01ce\n",
    "\r\f\r\u000e\r\u01d1\u000b\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u01dd\n\r\f\r\u000e",
    "\r\u01e0\u000b\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u01e7",
    "\n\r\f\r\u000e\r\u01ea\u000b\r\u0003\r\u0005\r\u01ed\n\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u01f6\n\r\u0005\r",
    "\u01f8\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e",
    "\u01fe\n\u000e\f\u000e\u000e\u000e\u0201\u000b\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u020a\n\u000e\f\u000e\u000e\u000e\u020d\u000b\u000e\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u0211\n\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0218\n\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u021e\n\u000f\f\u000f",
    "\u000e\u000f\u0221\u000b\u000f\u0003\u000f\u0005\u000f\u0224\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f",
    "\u022b\n\u000f\f\u000f\u000e\u000f\u022e\u000b\u000f\u0005\u000f\u0230",
    "\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0235\n\u000f",
    "\f\u000f\u000e\u000f\u0238\u000b\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0240\n\u000f",
    "\f\u000f\u000e\u000f\u0243\u000b\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u0247\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u024b\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0007\u000f\u0254\n\u000f\f\u000f\u000e\u000f\u0257\u000b",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u025b\n\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u025f\n\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0268",
    "\n\u000f\f\u000f\u000e\u000f\u026b\u000b\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u026f\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u0274\n\u000f\u0005\u000f\u0276\n\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0005\u0010\u027b\n\u0010\u0003\u0010\u0005\u0010\u027e",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0283\n\u0010",
    "\f\u0010\u000e\u0010\u0286\u000b\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u028d\n\u0010\f\u0010\u000e",
    "\u0010\u0290\u000b\u0010\u0003\u0010\u0005\u0010\u0293\n\u0010\u0003",
    "\u0010\u0005\u0010\u0296\n\u0010\u0003\u0010\u0005\u0010\u0299\n\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u029d\n\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u02a2\n\u0011\f\u0011\u000e\u0011\u02a5",
    "\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0007\u0011\u02ad\n\u0011\f\u0011\u000e\u0011\u02b0\u000b",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u02b4\n\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u02ba\n\u0012\f\u0012",
    "\u000e\u0012\u02bd\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u02c5\n\u0013\f\u0013\u000e",
    "\u0013\u02c8\u000b\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u02cc\n",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u02d2",
    "\n\u0013\f\u0013\u000e\u0013\u02d5\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u02da\n\u0013\u0003\u0013\u0003\u0013\u0005",
    "\u0013\u02de\n\u0013\u0003\u0014\u0003\u0014\u0007\u0014\u02e2\n\u0014",
    "\f\u0014\u000e\u0014\u02e5\u000b\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0007\u0014\u02eb\n\u0014\f\u0014\u000e\u0014\u02ee",
    "\u000b\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u02f2\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u02f8\n\u0014",
    "\f\u0014\u000e\u0014\u02fb\u000b\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u0300\n\u0014\u0003\u0014\u0003\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0308\n\u0015\f\u0015",
    "\u000e\u0015\u030b\u000b\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007",
    "\u0015\u0310\n\u0015\f\u0015\u000e\u0015\u0313\u000b\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0318\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0007\u0015\u031d\n\u0015\f\u0015\u000e\u0015\u0320",
    "\u000b\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0007\u0016\u0329\n\u0016\f\u0016\u000e\u0016",
    "\u032c\u000b\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0007\u0017\u0333\n\u0017\f\u0017\u000e\u0017\u0336\u000b\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u033b\n\u0017\f\u0017",
    "\u000e\u0017\u033e\u000b\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0347\n\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u034b\n\u0017\u0003\u0017\u0003",
    "\u0017\u0007\u0017\u034f\n\u0017\f\u0017\u000e\u0017\u0352\u000b\u0017",
    "\u0005\u0017\u0354\n\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003",
    "\u0018\u0007\u0018\u035a\n\u0018\f\u0018\u000e\u0018\u035d\u000b\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u0364\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0368\n\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u036d\n\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u0372\n\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0007\u0019\u0377\n\u0019\f\u0019\u000e\u0019\u037a",
    "\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u0381\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0005\u0019\u0388\n\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0007\u0019\u038d\n\u0019\f\u0019\u000e\u0019\u0390\u000b",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0395\n\u0019",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u0399\n\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u03b4\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u03bb\n\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u03bf\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u03c3\n\u001a",
    "\u0003\u001a\u0005\u001a\u03c6\n\u001a\u0003\u001a\u0003\u001a\u0007",
    "\u001a\u03ca\n\u001a\f\u001a\u000e\u001a\u03cd\u000b\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u03d4\n",
    "\u001a\f\u001a\u000e\u001a\u03d7\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u03dc\n\u001a\u0005\u001a\u03de\n\u001a\u0005",
    "\u001a\u03e0\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u03ea\n",
    "\u001a\f\u001a\u000e\u001a\u03ed\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0007\u001a\u03f3\n\u001a\f\u001a\u000e\u001a",
    "\u03f6\u000b\u001a\u0005\u001a\u03f8\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u0400\n",
    "\u001a\f\u001a\u000e\u001a\u0403\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0007\u001a\u0409\n\u001a\f\u001a\u000e\u001a",
    "\u040c\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0411",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a",
    "\u0417\n\u001a\f\u001a\u000e\u001a\u041a\u000b\u001a\u0005\u001a\u041c",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0007\u001a\u0424\n\u001a\f\u001a\u000e\u001a\u0427\u000b",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u042d",
    "\n\u001a\f\u001a\u000e\u001a\u0430\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u0435\n\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0007\u001a\u043b\n\u001a\f\u001a\u000e\u001a\u043e",
    "\u000b\u001a\u0005\u001a\u0440\n\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u0444\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u044a\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u044e",
    "\n\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u0452\n\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u0456\n\u001c\u0005\u001c\u0458\n\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u046b",
    "\n\u001e\f\u001e\u000e\u001e\u046e\u000b\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0007\u001e\u0473\n\u001e\f\u001e\u000e\u001e\u0476\u000b",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0480\n\u001e\f\u001e\u000e",
    "\u001e\u0483\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u048d\n",
    "\u001e\f\u001e\u000e\u001e\u0490\u000b\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0498\n",
    "\u001e\f\u001e\u000e\u001e\u049b\u000b\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0007\u001e\u04a1\n\u001e\f\u001e\u000e\u001e",
    "\u04a4\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u04af",
    "\n\u001e\f\u001e\u000e\u001e\u04b2\u000b\u001e\u0005\u001e\u04b4\n\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0007\u001e\u04bc\n\u001e\f\u001e\u000e\u001e\u04bf\u000b\u001e\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u04c3\n\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u04c7\n\u001e\u0005\u001e\u04c9\n\u001e\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u04d1",
    "\n\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u04d5\n\u001f\f\u001f\u000e",
    "\u001f\u04d8\u000b\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u04dd\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u04e5",
    "\n \u0003 \u0003 \u0007 \u04e9\n \f \u000e \u04ec\u000b \u0003 \u0003",
    " \u0003 \u0005 \u04f1\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0007!\u04fa\n!\f!\u000e!\u04fd\u000b!\u0003!\u0003!\u0003!\u0007",
    "!\u0502\n!\f!\u000e!\u0505\u000b!\u0003!\u0005!\u0508\n!\u0003!\u0003",
    "!\u0007!\u050c\n!\f!\u000e!\u050f\u000b!\u0003!\u0005!\u0512\n!\u0003",
    "!\u0003!\u0005!\u0516\n!\u0003\"\u0003\"\u0003\"\u0007\"\u051b\n\"\f",
    "\"\u000e\"\u051e\u000b\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0007\"\u0526\n\"\f\"\u000e\"\u0529\u000b\"\u0003\"\u0003\"\u0005",
    "\"\u052d\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u0533\n\"\f\"\u000e",
    "\"\u0536\u000b\"\u0003\"\u0003\"\u0005\"\u053a\n\"\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0005#\u0542\n#\u0003#\u0003#\u0007#\u0546\n",
    "#\f#\u000e#\u0549\u000b#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007",
    "#\u0551\n#\f#\u000e#\u0554\u000b#\u0005#\u0556\n#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0007#\u055e\n#\f#\u000e#\u0561\u000b#\u0003",
    "#\u0003#\u0005#\u0565\n#\u0003#\u0003#\u0003#\u0003#\u0007#\u056b\n",
    "#\f#\u000e#\u056e\u000b#\u0003#\u0003#\u0005#\u0572\n#\u0003#\u0003",
    "#\u0005#\u0576\n#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0007$\u0580\n$\f$\u000e$\u0583\u000b$\u0003$\u0003$\u0003$\u0007",
    "$\u0588\n$\f$\u000e$\u058b\u000b$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0007$\u0595\n$\f$\u000e$\u0598\u000b$\u0005",
    "$\u059a\n$\u0003$\u0003$\u0005$\u059e\n$\u0005$\u05a0\n$\u0003%\u0003",
    "%\u0003%\u0003%\u0007%\u05a6\n%\f%\u000e%\u05a9\u000b%\u0003%\u0003",
    "%\u0003%\u0007%\u05ae\n%\f%\u000e%\u05b1\u000b%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u05bb\n%\f%\u000e%\u05be",
    "\u000b%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007",
    "%\u05c8\n%\f%\u000e%\u05cb\u000b%\u0003%\u0003%\u0003%\u0005%\u05d0",
    "\n%\u0003%\u0005%\u05d3\n%\u0003&\u0003&\u0007&\u05d7\n&\f&\u000e&\u05da",
    "\u000b&\u0003&\u0003&\u0003&\u0007&\u05df\n&\f&\u000e&\u05e2\u000b&",
    "\u0003&\u0003&\u0003&\u0003&\u0005&\u05e8\n&\u0003&\u0003&\u0003\'\u0003",
    "\'\u0007\'\u05ee\n\'\f\'\u000e\'\u05f1\u000b\'\u0003\'\u0003\'\u0003",
    "\'\u0005\'\u05f6\n\'\u0003(\u0003(\u0003(\u0005(\u05fb\n(\u0003(\u0003",
    "(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0607",
    "\n)\u0003)\u0003)\u0007)\u060b\n)\f)\u000e)\u060e\u000b)\u0003)\u0003",
    ")\u0003)\u0003)\u0005)\u0614\n)\u0003)\u0003)\u0003)\u0005)\u0619\n",
    ")\u0003)\u0003)\u0007)\u061d\n)\f)\u000e)\u0620\u000b)\u0003)\u0003",
    ")\u0005)\u0624\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0007)\u0631\n)\f)\u000e)\u0634\u000b)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u063b\n)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0005)\u0644\n)\u0003)\u0003)\u0005)\u0648\n",
    ")\u0005)\u064a\n)\u0003*\u0003*\u0003*\u0003*\u0007*\u0650\n*\f*\u000e",
    "*\u0653\u000b*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0007",
    "+\u065c\n+\f+\u000e+\u065f\u000b+\u0003+\u0003+\u0003+\u0003+\u0003",
    ",\u0003,\u0007,\u0667\n,\f,\u000e,\u066a\u000b,\u0003,\u0003,\u0003",
    ",\u0007,\u066f\n,\f,\u000e,\u0672\u000b,\u0003,\u0003,\u0003,\u0007",
    ",\u0677\n,\f,\u000e,\u067a\u000b,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u0681\n,\u0003-\u0003-\u0007-\u0685\n-\f-\u000e-\u0688\u000b",
    "-\u0003-\u0003-\u0003-\u0007-\u068d\n-\f-\u000e-\u0690\u000b-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u0698\n-\f-\u000e-\u069b",
    "\u000b-\u0003-\u0003-\u0003-\u0003-\u0005-\u06a1\n-\u0003-\u0003-\u0005",
    "-\u06a5\n-\u0003.\u0003.\u0003.\u0003.\u0007.\u06ab\n.\f.\u000e.\u06ae",
    "\u000b.\u0003.\u0003.\u0003.\u0007.\u06b3\n.\f.\u000e.\u06b6\u000b.",
    "\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u06bd\n.\u0003/\u0003/\u0007",
    "/\u06c1\n/\f/\u000e/\u06c4\u000b/\u0003/\u0003/\u0003/\u0007/\u06c9",
    "\n/\f/\u000e/\u06cc\u000b/\u00030\u00030\u00030\u00031\u00031\u0003",
    "1\u00051\u06d4\n1\u00032\u00032\u00032\u00032\u00072\u06da\n2\f2\u000e",
    "2\u06dd\u000b2\u00032\u00032\u00033\u00033\u00053\u06e3\n3\u00033\u0003",
    "3\u00033\u00053\u06e8\n3\u00033\u00033\u00033\u00033\u00073\u06ee\n",
    "3\f3\u000e3\u06f1\u000b3\u00033\u00033\u00033\u00053\u06f6\n3\u0005",
    "3\u06f8\n3\u00033\u00033\u00053\u06fc\n3\u00033\u00033\u00033\u0003",
    "3\u00073\u0702\n3\f3\u000e3\u0705\u000b3\u00033\u00033\u00033\u0005",
    "3\u070a\n3\u00053\u070c\n3\u00053\u070e\n3\u00034\u00034\u00034\u0003",
    "4\u00034\u00054\u0715\n4\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00054\u071e\n4\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u0726",
    "\n4\u00034\u00054\u0729\n4\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00054\u0734\n4\u00034\u00034\u00034\u00034\u0003",
    "4\u00054\u073b\n4\u00034\u00034\u00034\u00034\u00034\u00054\u0742\n",
    "4\u00034\u00034\u00054\u0746\n4\u00034\u00054\u0749\n4\u00034\u0003",
    "4\u00074\u074d\n4\f4\u000e4\u0750\u000b4\u00034\u00034\u00034\u0003",
    "4\u00034\u00074\u0757\n4\f4\u000e4\u075a\u000b4\u00034\u00034\u0003",
    "4\u00054\u075f\n4\u00054\u0761\n4\u00034\u00034\u00054\u0765\n4\u0003",
    "4\u00034\u00054\u0769\n4\u00034\u00034\u00074\u076d\n4\f4\u000e4\u0770",
    "\u000b4\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u0778\n4\u0003",
    "4\u00034\u00074\u077c\n4\f4\u000e4\u077f\u000b4\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00054\u0789\n4\u00034\u00034\u0003",
    "4\u00074\u078e\n4\f4\u000e4\u0791\u000b4\u00034\u00034\u00034\u0003",
    "4\u00074\u0797\n4\f4\u000e4\u079a\u000b4\u00034\u00034\u00034\u0005",
    "4\u079f\n4\u00034\u00034\u00054\u07a3\n4\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00074\u07ab\n4\f4\u000e4\u07ae\u000b4\u00034\u0003",
    "4\u00034\u00034\u00034\u00054\u07b5\n4\u00054\u07b7\n4\u00054\u07b9",
    "\n4\u00054\u07bb\n4\u00035\u00035\u00035\u00075\u07c0\n5\f5\u000e5\u07c3",
    "\u000b5\u00035\u00035\u00035\u00036\u00036\u00036\u00076\u07cb\n6\f",
    "6\u000e6\u07ce\u000b6\u00036\u00036\u00036\u00037\u00037\u00037\u0003",
    "7\u00037\u00057\u07d8\n7\u00037\u00037\u00057\u07dc\n7\u00037\u0003",
    "7\u00057\u07e0\n7\u00037\u00037\u00037\u00037\u00077\u07e6\n7\f7\u000e",
    "7\u07e9\u000b7\u00037\u00037\u00037\u00057\u07ee\n7\u00057\u07f0\n7",
    "\u00037\u00037\u00057\u07f4\n7\u00037\u00037\u00037\u00037\u00077\u07fa",
    "\n7\f7\u000e7\u07fd\u000b7\u00037\u00037\u00037\u00057\u0802\n7\u0005",
    "7\u0804\n7\u00057\u0806\n7\u00038\u00038\u00058\u080a\n8\u00038\u0003",
    "8\u00038\u00038\u00058\u0810\n8\u00038\u00038\u00058\u0814\n8\u0003",
    "8\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00079\u081e\n9\f",
    "9\u000e9\u0821\u000b9\u00059\u0823\n9\u00039\u00039\u00039\u00059\u0828",
    "\n9\u00039\u00039\u00039\u00039\u00039\u00059\u082f\n9\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0007:\u0837\n:\f:\u000e:\u083a\u000b",
    ":\u0005:\u083c\n:\u0003:\u0003:\u0003:\u0005:\u0841\n:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u0848\n:\u0003:\u0003:\u0007:\u084c\n",
    ":\f:\u000e:\u084f\u000b:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003",
    "<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005",
    "=\u0861\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u086d\n=\u0005=\u086f\n=\u0005=\u0871\n=\u0003=\u0003",
    "=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u0880\n>\u0005>\u0882\n>\u0005>\u0884\n>\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0005?\u088c\n?\u0003@\u0003@\u0003@\u0005",
    "@\u0891\n@\u0003A\u0003A\u0007A\u0895\nA\fA\u000eA\u0898\u000bA\u0003",
    "A\u0003A\u0003A\u0003A\u0005A\u089e\nA\u0003A\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u08aa\nB\u0003B\u0003B\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u08b3\nC\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u08c1",
    "\nD\u0007D\u08c3\nD\fD\u000eD\u08c6\u000bD\u0003D\u0003D\u0003D\u0003",
    "D\u0007D\u08cc\nD\fD\u000eD\u08cf\u000bD\u0005D\u08d1\nD\u0003D\u0003",
    "D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0007E\u08db\nE\fE\u000e",
    "E\u08de\u000bE\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u08eb\nF\u0003G\u0003G\u0003G\u0005G\u08f0",
    "\nG\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005",
    "H\u08fb\nH\u0003H\u0003H\u0003H\u0003H\u0005H\u0901\nH\u0003H\u0003",
    "H\u0005H\u0905\nH\u0003H\u0005H\u0908\nH\u0003I\u0003I\u0003I\u0003",
    "I\u0005I\u090e\nI\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0007I\u0918\nI\fI\u000eI\u091b\u000bI\u0005I\u091d\nI\u0003I\u0003",
    "I\u0003I\u0003I\u0005I\u0923\nI\u0003I\u0003I\u0003I\u0005I\u0928\n",
    "I\u0003I\u0003I\u0003I\u0005I\u092d\nI\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0005J\u0934\nJ\u0003K\u0003K\u0005K\u0938\nK\u0003K\u0003K\u0005",
    "K\u093c\nK\u0003K\u0003K\u0005K\u0940\nK\u0003K\u0003K\u0005K\u0944",
    "\nK\u0005K\u0946\nK\u0003K\u0003K\u0003K\u0006K\u094b\nK\rK\u000eK\u094c",
    "\u0003K\u0003K\u0003K\u0005K\u0952\nK\u0003K\u0003K\u0003K\u0005K\u0957",
    "\nK\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u095e\nK\u0003K\u0003",
    "K\u0003K\u0005K\u0963\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0005L\u096d\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0007M\u0977\nM\fM\u000eM\u097a\u000bM\u0003M\u0003M\u0003",
    "M\u0005M\u097f\nM\u0003M\u0003M\u0005M\u0983\nM\u0003M\u0005M\u0986",
    "\nM\u0003M\u0005M\u0989\nM\u0003M\u0003M\u0005M\u098d\nM\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0007M\u0994\nM\fM\u000eM\u0997\u000bM\u0003",
    "M\u0003M\u0003M\u0005M\u099c\nM\u0003M\u0003M\u0003M\u0003M\u0005M\u09a2",
    "\nM\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u09ac",
    "\nM\fM\u000eM\u09af\u000bM\u0005M\u09b1\nM\u0003M\u0003M\u0003M\u0003",
    "M\u0005M\u09b7\nM\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0006",
    "N\u09c0\nN\rN\u000eN\u09c1\u0005N\u09c4\nN\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0005O\u09cb\nO\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0006P\u09da\nP\rP\u000e",
    "P\u09db\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u09e4\nQ\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u09ec\nR\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0005R\u09f5\nR\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0005S\u09ff\nS\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0005S\u0a06\nS\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u0a0d",
    "\nS\u0005S\u0a0f\nS\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0005S\u0a1c\nS\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0005T\u0a25\nT\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u0a2b\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u0a32\nU\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u0a3a\nU\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0005U\u0a41\nU\u0007U\u0a43\nU\fU\u000eU\u0a46\u000b",
    "U\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0007V\u0a53\nV\fV\u000eV\u0a56\u000bV\u0003V\u0003V\u0003",
    "V\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0007W\u0a62\nW\f",
    "W\u000eW\u0a65\u000bW\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0a74\nY\u0003Y\u0005",
    "Y\u0a77\nY\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u0a7f\n",
    "Z\fZ\u000eZ\u0a82\u000bZ\u0003Z\u0003Z\u0003Z\u0005Z\u0a87\nZ\u0003",
    "Z\u0003Z\u0005Z\u0a8b\nZ\u0003Z\u0005Z\u0a8e\nZ\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u0a9b",
    "\n[\u0003[\u0003[\u0003[\u0003[\u0005[\u0aa1\n[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0005[\u0aa9\n[\u0003[\u0003[\u0005[\u0aad\n",
    "[\u0005[\u0aaf\n[\u0003[\u0003[\u0005[\u0ab3\n[\u0003[\u0003[\u0003",
    "[\u0003[\u0005[\u0ab9\n[\u0003[\u0003[\u0007[\u0abd\n[\f[\u000e[\u0ac0",
    "\u000b[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0007",
    "[\u0aca\n[\f[\u000e[\u0acd\u000b[\u0005[\u0acf\n[\u0003[\u0003[\u0003",
    "[\u0007[\u0ad4\n[\f[\u000e[\u0ad7\u000b[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0007[\u0ade\n[\f[\u000e[\u0ae1\u000b[\u0003[\u0003[\u0003",
    "[\u0007[\u0ae6\n[\f[\u000e[\u0ae9\u000b[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0005[\u0af1\n[\u0003[\u0003[\u0003[\u0003[\u0005[\u0af7",
    "\n[\u0005[\u0af9\n[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\",
    "\u0007\\\u0b01\n\\\f\\\u000e\\\u0b04\u000b\\\u0005\\\u0b06\n\\\u0003",
    "\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0007]",
    "\u0b11\n]\f]\u000e]\u0b14\u000b]\u0005]\u0b16\n]\u0003]\u0003]\u0003",
    "]\u0003^\u0003^\u0003^\u0003^\u0007^\u0b1f\n^\f^\u000e^\u0b22\u000b",
    "^\u0003^\u0003^\u0005^\u0b26\n^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0007_\u0b31\n_\f_\u000e_\u0b34\u000b_\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0b3e\n`\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0b46\na\u0003a\u0003a\u0003",
    "a\u0005a\u0b4b\na\u0003b\u0003b\u0003b\u0003b\u0005b\u0b51\nb\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u0b57\nb\u0003b\u0005b\u0b5a\nb\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u0b60\nb\u0003b\u0005b\u0b63\nb\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u0b69\nb\u0003b\u0005b\u0b6c\nb\u0003",
    "b\u0003b\u0005b\u0b70\nb\u0003b\u0003b\u0003c\u0005c\u0b75\nc\u0003",
    "c\u0003c\u0003c\u0003c\u0005c\u0b7b\nc\u0003c\u0003c\u0005c\u0b7f\n",
    "c\u0003c\u0003c\u0003c\u0003c\u0005c\u0b85\nc\u0003d\u0003d\u0003d\u0003",
    "d\u0003e\u0003e\u0005e\u0b8d\ne\u0003f\u0003f\u0003f\u0003f\u0005f\u0b93",
    "\nf\u0003f\u0003f\u0003f\u0006f\u0b98\nf\rf\u000ef\u0b99\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u0ba5\nf\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u0bb0",
    "\nf\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u0bb7\ng\u0003g\u0005",
    "g\u0bba\ng\u0005g\u0bbc\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0005h\u0bd0\nh\u0003h\u0003h\u0005h\u0bd4\nh\u0003",
    "h\u0005h\u0bd7\nh\u0003h\u0003h\u0005h\u0bdb\nh\u0003i\u0003i\u0003",
    "i\u0003i\u0005i\u0be1\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0005i\u0bea\ni\u0003i\u0003i\u0003i\u0003i\u0005i\u0bf0\ni\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0005i\u0c09\ni\u0005i\u0c0b\ni\u0005i\u0c0d\ni\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0c15\nj\u0003j\u0003j\u0003",
    "j\u0005j\u0c1a\nj\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0005k\u0c26\nk\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0005k\u0c2e\nk\u0006k\u0c30\nk\rk\u000ek\u0c31\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u0c3c\nl\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0006l\u0c51\nl\rl\u000e",
    "l\u0c52\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0006l\u0c5e\nl\rl\u000el\u0c5f\u0005l\u0c62\nl\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0005l\u0c69\nl\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0005l\u0c7f\nl\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0005l\u0c89\nl\u0003l\u0003l\u0005l\u0c8d",
    "\nl\u0003m\u0003m\u0003m\u0005m\u0c92\nm\u0003m\u0003m\u0003m\u0003",
    "m\u0005m\u0c98\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0007m\u0ca0",
    "\nm\fm\u000em\u0ca3\u000bm\u0003m\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0005m\u0cab\nm\u0003m\u0005m\u0cae\nm\u0003m\u0005m\u0cb1\nm\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0007m\u0cb9\nm\fm\u000em\u0cbc",
    "\u000bm\u0005m\u0cbe\nm\u0005m\u0cc0\nm\u0003m\u0003m\u0003m\u0003n",
    "\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0003o\u0007o\u0cd5\no\fo\u000eo\u0cd8",
    "\u000bo\u0003p\u0003p\u0003p\u0003p\u0005p\u0cde\np\u0003p\u0005p\u0ce1",
    "\np\u0003p\u0003p\u0003p\u0003p\u0003p\u0005p\u0ce8\np\u0003p\u0005",
    "p\u0ceb\np\u0007p\u0ced\np\fp\u000ep\u0cf0\u000bp\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0007q\u0cff\nq\fq\u000eq\u0d02\u000bq\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0007q\u0d0e\nq\fq\u000e",
    "q\u0d11\u000bq\u0003q\u0003q\u0003q\u0003q\u0003q\u0007q\u0d18\nq\f",
    "q\u000eq\u0d1b\u000bq\u0003q\u0003q\u0003q\u0005q\u0d20\nq\u0003q\u0005",
    "q\u0d23\nq\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003",
    "s\u0005s\u0d38\ns\u0003s\u0003s\u0003s\u0003s\u0005s\u0d3e\ns\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0005s\u0d49",
    "\ns\u0006s\u0d4b\ns\rs\u000es\u0d4c\u0005s\u0d4f\ns\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0005t\u0d58\nt\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0005t\u0d61\nt\u0003t\u0003t\u0003t\u0003t\u0003",
    "t\u0005t\u0d68\nt\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0007",
    "u\u0d71\nu\fu\u000eu\u0d74\u000bu\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003w\u0007w\u0d81\nw\fw\u000e",
    "w\u0d84\u000bw\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0005x\u0d8c",
    "\nx\u0003x\u0003x\u0003x\u0003x\u0005x\u0d92\nx\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0d9c\ny\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0005",
    "z\u0daa\nz\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0005{\u0db8\n{\u0003|\u0003|\u0003|\u0005|\u0dbd",
    "\n|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0007",
    "|\u0dc8\n|\f|\u000e|\u0dcb\u000b|\u0003|\u0003|\u0005|\u0dcf\n|\u0003",
    "|\u0003|\u0003|\u0003|\u0003|\u0005|\u0dd6\n|\u0003|\u0003|\u0003|\u0003",
    "|\u0003|\u0005|\u0ddd\n|\u0003|\u0003|\u0003|\u0003|\u0003|\u0005|\u0de4",
    "\n|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003",
    "~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005",
    "\u0080\u0dfc\n\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0e00\n\u0080",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0005\u0081\u0e09\n\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0005\u0081\u0e0e\n\u0081\u0005\u0081\u0e10\n\u0081\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0005\u0082\u0e1a\n\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0005\u0082\u0e23",
    "\n\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0005\u0082\u0e28\n\u0082",
    "\u0005\u0082\u0e2a\n\u0082\u0005\u0082\u0e2c\n\u0082\u0005\u0082\u0e2e",
    "\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0007\u0083\u0e36\n\u0083\f\u0083\u000e\u0083\u0e39\u000b",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0005",
    "\u0084\u0e40\n\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0005\u0084",
    "\u0e45\n\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005",
    "\u0085\u0e4b\n\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085",
    "\u0e50\n\u0085\f\u0085\u000e\u0085\u0e53\u000b\u0085\u0003\u0086\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0005\u0087\u0e5b",
    "\n\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u0e60\n\u0087",
    "\u0005\u0087\u0e62\n\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0007\u0088\u0e6a\n\u0088\f\u0088\u000e",
    "\u0088\u0e6d\u000b\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0005\u0088\u0e7b\n\u0088\u0003\u0088\u0005",
    "\u0088\u0e7e\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0005\u0088\u0e8b\n\u0088\u0003\u0088\u0005\u0088\u0e8e",
    "\n\u0088\u0007\u0088\u0e90\n\u0088\f\u0088\u000e\u0088\u0e93\u000b\u0088",
    "\u0005\u0088\u0e95\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u0e9e\n\u0088",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0005\u0088\u0ea7\n\u0088\u0003\u0089\u0005\u0089\u0eaa",
    "\n\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0eaf\n\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0eb4\n\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u008a\u0005\u008a\u0eb9\n\u008a\u0003\u008a",
    "\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a",
    "\u0ec1\n\u008a\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0007\u008b\u0ecc",
    "\n\u008b\f\u008b\u000e\u008b\u0ecf\u000b\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0007\u008b",
    "\u0ede\n\u008b\f\u008b\u000e\u008b\u0ee1\u000b\u008b\u0005\u008b\u0ee3",
    "\n\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0005\u008b\u0eeb\n\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0005\u008b\u0ef0\n\u008b\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0005\u008b\u0ef5\n\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0005\u008b\u0efc\n\u008b\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0005\u008c\u0f0d\n\u008c\u0003\u008d\u0003\u008d\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0002\u0002\u008f\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u0002\u000f\u0004\u0002<<\u0094\u0094\u0004\u0002FFUU\u0004\u0002",
    "((..\u0004\u0002]]ii\u0004\u0002\u0012\u0012\u0094\u0094\u0004\u0002",
    "\n\n\u0013\u0018\u0004\u0002()99\u0003\u0002\u000b\f\u0006\u0002\u000e",
    "\u000e((..\u0094\u0094\u0007\u000201<<bb\u008c\u008c\u0094\u0094\u0004",
    "\u0002((\u0094\u0094\u0004\u0002__zz\u0003\u0002>\u008c\u0002\u10f7",
    "\u0002\u011f\u0003\u0002\u0002\u0002\u0004\u0137\u0003\u0002\u0002\u0002",
    "\u0006\u013b\u0003\u0002\u0002\u0002\b\u015d\u0003\u0002\u0002\u0002",
    "\n\u0167\u0003\u0002\u0002\u0002\f\u0195\u0003\u0002\u0002\u0002\u000e",
    "\u019a\u0003\u0002\u0002\u0002\u0010\u019c\u0003\u0002\u0002\u0002\u0012",
    "\u01a0\u0003\u0002\u0002\u0002\u0014\u01ab\u0003\u0002\u0002\u0002\u0016",
    "\u01ba\u0003\u0002\u0002\u0002\u0018\u01c9\u0003\u0002\u0002\u0002\u001a",
    "\u01f9\u0003\u0002\u0002\u0002\u001c\u0219\u0003\u0002\u0002\u0002\u001e",
    "\u027d\u0003\u0002\u0002\u0002 \u029e\u0003\u0002\u0002\u0002\"\u02b5",
    "\u0003\u0002\u0002\u0002$\u02d9\u0003\u0002\u0002\u0002&\u02df\u0003",
    "\u0002\u0002\u0002(\u0303\u0003\u0002\u0002\u0002*\u0321\u0003\u0002",
    "\u0002\u0002,\u0330\u0003\u0002\u0002\u0002.\u0357\u0003\u0002\u0002",
    "\u00020\u0360\u0003\u0002\u0002\u00022\u0443\u0003\u0002\u0002\u0002",
    "4\u044d\u0003\u0002\u0002\u00026\u0457\u0003\u0002\u0002\u00028\u0459",
    "\u0003\u0002\u0002\u0002:\u045d\u0003\u0002\u0002\u0002<\u04ca\u0003",
    "\u0002\u0002\u0002>\u04de\u0003\u0002\u0002\u0002@\u04f2\u0003\u0002",
    "\u0002\u0002B\u0539\u0003\u0002\u0002\u0002D\u053b\u0003\u0002\u0002",
    "\u0002F\u0577\u0003\u0002\u0002\u0002H\u05d2\u0003\u0002\u0002\u0002",
    "J\u05d4\u0003\u0002\u0002\u0002L\u05eb\u0003\u0002\u0002\u0002N\u05f7",
    "\u0003\u0002\u0002\u0002P\u0600\u0003\u0002\u0002\u0002R\u064b\u0003",
    "\u0002\u0002\u0002T\u0658\u0003\u0002\u0002\u0002V\u0664\u0003\u0002",
    "\u0002\u0002X\u0682\u0003\u0002\u0002\u0002Z\u06a6\u0003\u0002\u0002",
    "\u0002\\\u06be\u0003\u0002\u0002\u0002^\u06cd\u0003\u0002\u0002\u0002",
    "`\u06d3\u0003\u0002\u0002\u0002b\u06d5\u0003\u0002\u0002\u0002d\u070d",
    "\u0003\u0002\u0002\u0002f\u07ba\u0003\u0002\u0002\u0002h\u07bc\u0003",
    "\u0002\u0002\u0002j\u07c7\u0003\u0002\u0002\u0002l\u07d7\u0003\u0002",
    "\u0002\u0002n\u0813\u0003\u0002\u0002\u0002p\u082e\u0003\u0002\u0002",
    "\u0002r\u0847\u0003\u0002\u0002\u0002t\u0852\u0003\u0002\u0002\u0002",
    "v\u0856\u0003\u0002\u0002\u0002x\u085a\u0003\u0002\u0002\u0002z\u0874",
    "\u0003\u0002\u0002\u0002|\u0885\u0003\u0002\u0002\u0002~\u0890\u0003",
    "\u0002\u0002\u0002\u0080\u0892\u0003\u0002\u0002\u0002\u0082\u08a2\u0003",
    "\u0002\u0002\u0002\u0084\u08ad\u0003\u0002\u0002\u0002\u0086\u08b4\u0003",
    "\u0002\u0002\u0002\u0088\u08d5\u0003\u0002\u0002\u0002\u008a\u08e1\u0003",
    "\u0002\u0002\u0002\u008c\u08ec\u0003\u0002\u0002\u0002\u008e\u08f3\u0003",
    "\u0002\u0002\u0002\u0090\u090d\u0003\u0002\u0002\u0002\u0092\u092e\u0003",
    "\u0002\u0002\u0002\u0094\u0962\u0003\u0002\u0002\u0002\u0096\u096c\u0003",
    "\u0002\u0002\u0002\u0098\u096e\u0003\u0002\u0002\u0002\u009a\u09b8\u0003",
    "\u0002\u0002\u0002\u009c\u09c5\u0003\u0002\u0002\u0002\u009e\u09d9\u0003",
    "\u0002\u0002\u0002\u00a0\u09e3\u0003\u0002\u0002\u0002\u00a2\u09e5\u0003",
    "\u0002\u0002\u0002\u00a4\u09f8\u0003\u0002\u0002\u0002\u00a6\u0a24\u0003",
    "\u0002\u0002\u0002\u00a8\u0a26\u0003\u0002\u0002\u0002\u00aa\u0a47\u0003",
    "\u0002\u0002\u0002\u00ac\u0a5a\u0003\u0002\u0002\u0002\u00ae\u0a69\u0003",
    "\u0002\u0002\u0002\u00b0\u0a6c\u0003\u0002\u0002\u0002\u00b2\u0a8d\u0003",
    "\u0002\u0002\u0002\u00b4\u0a8f\u0003\u0002\u0002\u0002\u00b6\u0afa\u0003",
    "\u0002\u0002\u0002\u00b8\u0b0a\u0003\u0002\u0002\u0002\u00ba\u0b25\u0003",
    "\u0002\u0002\u0002\u00bc\u0b27\u0003\u0002\u0002\u0002\u00be\u0b35\u0003",
    "\u0002\u0002\u0002\u00c0\u0b3f\u0003\u0002\u0002\u0002\u00c2\u0b6f\u0003",
    "\u0002\u0002\u0002\u00c4\u0b7a\u0003\u0002\u0002\u0002\u00c6\u0b86\u0003",
    "\u0002\u0002\u0002\u00c8\u0b8a\u0003\u0002\u0002\u0002\u00ca\u0baf\u0003",
    "\u0002\u0002\u0002\u00cc\u0bbb\u0003\u0002\u0002\u0002\u00ce\u0bda\u0003",
    "\u0002\u0002\u0002\u00d0\u0c0c\u0003\u0002\u0002\u0002\u00d2\u0c14\u0003",
    "\u0002\u0002\u0002\u00d4\u0c2f\u0003\u0002\u0002\u0002\u00d6\u0c8c\u0003",
    "\u0002\u0002\u0002\u00d8\u0c8e\u0003\u0002\u0002\u0002\u00da\u0cc4\u0003",
    "\u0002\u0002\u0002\u00dc\u0cce\u0003\u0002\u0002\u0002\u00de\u0cd9\u0003",
    "\u0002\u0002\u0002\u00e0\u0cf1\u0003\u0002\u0002\u0002\u00e2\u0d27\u0003",
    "\u0002\u0002\u0002\u00e4\u0d37\u0003\u0002\u0002\u0002\u00e6\u0d57\u0003",
    "\u0002\u0002\u0002\u00e8\u0d69\u0003\u0002\u0002\u0002\u00ea\u0d75\u0003",
    "\u0002\u0002\u0002\u00ec\u0d7c\u0003\u0002\u0002\u0002\u00ee\u0d85\u0003",
    "\u0002\u0002\u0002\u00f0\u0d9b\u0003\u0002\u0002\u0002\u00f2\u0da9\u0003",
    "\u0002\u0002\u0002\u00f4\u0db7\u0003\u0002\u0002\u0002\u00f6\u0db9\u0003",
    "\u0002\u0002\u0002\u00f8\u0de7\u0003\u0002\u0002\u0002\u00fa\u0dec\u0003",
    "\u0002\u0002\u0002\u00fc\u0df1\u0003\u0002\u0002\u0002\u00fe\u0df4\u0003",
    "\u0002\u0002\u0002\u0100\u0e01\u0003\u0002\u0002\u0002\u0102\u0e11\u0003",
    "\u0002\u0002\u0002\u0104\u0e2f\u0003\u0002\u0002\u0002\u0106\u0e3c\u0003",
    "\u0002\u0002\u0002\u0108\u0e46\u0003\u0002\u0002\u0002\u010a\u0e54\u0003",
    "\u0002\u0002\u0002\u010c\u0e61\u0003\u0002\u0002\u0002\u010e\u0ea6\u0003",
    "\u0002\u0002\u0002\u0110\u0ea9\u0003\u0002\u0002\u0002\u0112\u0eb8\u0003",
    "\u0002\u0002\u0002\u0114\u0efb\u0003\u0002\u0002\u0002\u0116\u0f0c\u0003",
    "\u0002\u0002\u0002\u0118\u0f0e\u0003\u0002\u0002\u0002\u011a\u0f10\u0003",
    "\u0002\u0002\u0002\u011c\u011e\u0005\u0006\u0004\u0002\u011d\u011c\u0003",
    "\u0002\u0002\u0002\u011e\u0121\u0003\u0002\u0002\u0002\u011f\u011d\u0003",
    "\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0132\u0003",
    "\u0002\u0002\u0002\u0121\u011f\u0003\u0002\u0002\u0002\u0122\u0127\u0005",
    "\u0004\u0003\u0002\u0123\u0126\u0005\u0006\u0004\u0002\u0124\u0126\u0005",
    "\n\u0006\u0002\u0125\u0123\u0003\u0002\u0002\u0002\u0125\u0124\u0003",
    "\u0002\u0002\u0002\u0126\u0129\u0003\u0002\u0002\u0002\u0127\u0125\u0003",
    "\u0002\u0002\u0002\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u0133\u0003",
    "\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u012a\u012f\u0005",
    "\n\u0006\u0002\u012b\u012e\u0005\u0006\u0004\u0002\u012c\u012e\u0005",
    "\n\u0006\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012c\u0003",
    "\u0002\u0002\u0002\u012e\u0131\u0003\u0002\u0002\u0002\u012f\u012d\u0003",
    "\u0002\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130\u0133\u0003",
    "\u0002\u0002\u0002\u0131\u012f\u0003\u0002\u0002\u0002\u0132\u0122\u0003",
    "\u0002\u0002\u0002\u0132\u012a\u0003\u0002\u0002\u0002\u0132\u0133\u0003",
    "\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134\u0135\b",
    "\u0002\u0001\u0002\u0135\u0136\u0007\u0002\u0002\u0003\u0136\u0003\u0003",
    "\u0002\u0002\u0002\u0137\u0138\u0007q\u0002\u0002\u0138\u0139\u0005",
    "\u00dco\u0002\u0139\u013a\u0007\u0003\u0002\u0002\u013a\u0005\u0003",
    "\u0002\u0002\u0002\u013b\u013c\b\u0004\u0001\u0002\u013c\u0159\u0007",
    "\u0089\u0002\u0002\u013d\u013e\u00070\u0002\u0002\u013e\u013f\u0007",
    "#\u0002\u0002\u013f\u015a\b\u0004\u0001\u0002\u0140\u0144\u0005\b\u0005",
    "\u0002\u0141\u0142\u00070\u0002\u0002\u0142\u0143\u0007#\u0002\u0002",
    "\u0143\u0145\b\u0004\u0001\u0002\u0144\u0141\u0003\u0002\u0002\u0002",
    "\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u015a\u0003\u0002\u0002\u0002",
    "\u0146\u0147\b\u0004\u0001\u0002\u0147\u0148\u0007\u0004\u0002\u0002",
    "\u0148\u0149\b\u0004\u0001\u0002\u0149\u014f\u0005\b\u0005\u0002\u014a",
    "\u014b\u0007\u0005\u0002\u0002\u014b\u014c\b\u0004\u0001\u0002\u014c",
    "\u014e\u0005\b\u0005\u0002\u014d\u014a\u0003\u0002\u0002\u0002\u014e",
    "\u0151\u0003\u0002\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f",
    "\u0150\u0003\u0002\u0002\u0002\u0150\u0152\u0003\u0002\u0002\u0002\u0151",
    "\u014f\u0003\u0002\u0002\u0002\u0152\u0153\u0007\u0006\u0002\u0002\u0153",
    "\u0157\b\u0004\u0001\u0002\u0154\u0155\u00070\u0002\u0002\u0155\u0156",
    "\u0007#\u0002\u0002\u0156\u0158\b\u0004\u0001\u0002\u0157\u0154\u0003",
    "\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u015a\u0003",
    "\u0002\u0002\u0002\u0159\u013d\u0003\u0002\u0002\u0002\u0159\u0140\u0003",
    "\u0002\u0002\u0002\u0159\u0146\u0003\u0002\u0002\u0002\u015a\u015b\u0003",
    "\u0002\u0002\u0002\u015b\u015c\u0007\u0003\u0002\u0002\u015c\u0007\u0003",
    "\u0002\u0002\u0002\u015d\u015e\b\u0005\u0001\u0002\u015e\u015f\u0005",
    "\u00dco\u0002\u015f\u0165\b\u0005\u0001\u0002\u0160\u0161\u0007*\u0002",
    "\u0002\u0161\u0162\u0005\u011a\u008e\u0002\u0162\u0163\b\u0005\u0001",
    "\u0002\u0163\u0166\u0003\u0002\u0002\u0002\u0164\u0166\b\u0005\u0001",
    "\u0002\u0165\u0160\u0003\u0002\u0002\u0002\u0165\u0164\u0003\u0002\u0002",
    "\u0002\u0166\t\u0003\u0002\u0002\u0002\u0167\u016b\b\u0006\u0001\u0002",
    "\u0168\u016a\u0005\u0100\u0081\u0002\u0169\u0168\u0003\u0002\u0002\u0002",
    "\u016a\u016d\u0003\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002",
    "\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u0189\u0003\u0002\u0002\u0002",
    "\u016d\u016b\u0003\u0002\u0002\u0002\u016e\u0170\u0007O\u0002\u0002",
    "\u016f\u016e\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002",
    "\u0170\u017a\u0003\u0002\u0002\u0002\u0171\u017b\u0005\u0014\u000b\u0002",
    "\u0172\u017b\u0005\u0016\f\u0002\u0173\u017b\u0005\u001c\u000f\u0002",
    "\u0174\u017b\u0005\"\u0012\u0002\u0175\u017b\u0005\u001e\u0010\u0002",
    "\u0176\u017b\u0005\u0012\n\u0002\u0177\u017b\u0005\u001a\u000e\u0002",
    "\u0178\u017b\u0005\u0018\r\u0002\u0179\u017b\u0005$\u0013\u0002\u017a",
    "\u0171\u0003\u0002\u0002\u0002\u017a\u0172\u0003\u0002\u0002\u0002\u017a",
    "\u0173\u0003\u0002\u0002\u0002\u017a\u0174\u0003\u0002\u0002\u0002\u017a",
    "\u0175\u0003\u0002\u0002\u0002\u017a\u0176\u0003\u0002\u0002\u0002\u017a",
    "\u0177\u0003\u0002\u0002\u0002\u017a\u0178\u0003\u0002\u0002\u0002\u017a",
    "\u0179\u0003\u0002\u0002\u0002\u017b\u018a\u0003\u0002\u0002\u0002\u017c",
    "\u017d\u0007\\\u0002\u0002\u017d\u0184\b\u0006\u0001\u0002\u017e\u0185",
    "\u0005<\u001f\u0002\u017f\u0185\u0005> \u0002\u0180\u0185\u0005@!\u0002",
    "\u0181\u0185\u0005D#\u0002\u0182\u0185\u0005F$\u0002\u0183\u0185\u0005",
    ":\u001e\u0002\u0184\u017e\u0003\u0002\u0002\u0002\u0184\u017f\u0003",
    "\u0002\u0002\u0002\u0184\u0180\u0003\u0002\u0002\u0002\u0184\u0181\u0003",
    "\u0002\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0183\u0003",
    "\u0002\u0002\u0002\u0185\u018a\u0003\u0002\u0002\u0002\u0186\u0187\u0007",
    "B\u0002\u0002\u0187\u0188\b\u0006\u0001\u0002\u0188\u018a\u0005P)\u0002",
    "\u0189\u016f\u0003\u0002\u0002\u0002\u0189\u017c\u0003\u0002\u0002\u0002",
    "\u0189\u0186\u0003\u0002\u0002\u0002\u018a\u000b\u0003\u0002\u0002\u0002",
    "\u018b\u018c\u0007\u0004\u0002\u0002\u018c\u0190\b\u0007\u0001\u0002",
    "\u018d\u018f\u0005\n\u0006\u0002\u018e\u018d\u0003\u0002\u0002\u0002",
    "\u018f\u0192\u0003\u0002\u0002\u0002\u0190\u018e\u0003\u0002\u0002\u0002",
    "\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u0193\u0003\u0002\u0002\u0002",
    "\u0192\u0190\u0003\u0002\u0002\u0002\u0193\u0194\u0007\u0006\u0002\u0002",
    "\u0194\u0196\b\u0007\u0001\u0002\u0195\u018b\u0003\u0002\u0002\u0002",
    "\u0195\u0196\u0003\u0002\u0002\u0002\u0196\r\u0003\u0002\u0002\u0002",
    "\u0197\u019b\u0007\u0003\u0002\u0002\u0198\u0199\b\b\u0001\u0002\u0199",
    "\u019b\u0007\u0006\u0002\u0002\u019a\u0197\u0003\u0002\u0002\u0002\u019a",
    "\u0198\u0003\u0002\u0002\u0002\u019b\u000f\u0003\u0002\u0002\u0002\u019c",
    "\u019e\b\t\u0001\u0002\u019d\u019f\u0007\u0003\u0002\u0002\u019e\u019d",
    "\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f\u0011",
    "\u0003\u0002\u0002\u0002\u01a0\u01a1\u0007C\u0002\u0002\u01a1\u01a2",
    "\u0005\u00dco\u0002\u01a2\u01a6\b\n\u0001\u0002\u01a3\u01a5\u0005\u00fe",
    "\u0080\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a8\u0003\u0002",
    "\u0002\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002",
    "\u0002\u0002\u01a7\u01a9\u0003\u0002\u0002\u0002\u01a8\u01a6\u0003\u0002",
    "\u0002\u0002\u01a9\u01aa\u0005f4\u0002\u01aa\u0013\u0003\u0002\u0002",
    "\u0002\u01ab\u01ac\u0007\u0081\u0002\u0002\u01ac\u01ad\u0005\u00dco",
    "\u0002\u01ad\u01ae\b\u000b\u0001\u0002\u01ae\u01b2\b\u000b\u0001\u0002",
    "\u01af\u01b1\u0005\u00fe\u0080\u0002\u01b0\u01af\u0003\u0002\u0002\u0002",
    "\u01b1\u01b4\u0003\u0002\u0002\u0002\u01b2\u01b0\u0003\u0002\u0002\u0002",
    "\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b5\u0003\u0002\u0002\u0002",
    "\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b5\u01b8\u0005\f\u0007\u0002",
    "\u01b6\u01b9\u0005\u000e\b\u0002\u01b7\u01b9\u0007\u009a\u0002\u0002",
    "\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b7\u0003\u0002\u0002\u0002",
    "\u01b9\u0015\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007K\u0002\u0002",
    "\u01bb\u01bc\u0005\u00dco\u0002\u01bc\u01bd\b\f\u0001\u0002\u01bd\u01c1",
    "\b\f\u0001\u0002\u01be\u01c0\u0005\u00fe\u0080\u0002\u01bf\u01be\u0003",
    "\u0002\u0002\u0002\u01c0\u01c3\u0003\u0002\u0002\u0002\u01c1\u01bf\u0003",
    "\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c4\u0003",
    "\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002\u01c4\u01c7\u0005",
    "\f\u0007\u0002\u01c5\u01c8\u0005\u000e\b\u0002\u01c6\u01c8\u0007\u009a",
    "\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c7\u01c6\u0003\u0002",
    "\u0002\u0002\u01c8\u0017\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007W",
    "\u0002\u0002\u01ca\u01cb\u0005\u00dco\u0002\u01cb\u01cf\b\r\u0001\u0002",
    "\u01cc\u01ce\u0005\u00fe\u0080\u0002\u01cd\u01cc\u0003\u0002\u0002\u0002",
    "\u01ce\u01d1\u0003\u0002\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002",
    "\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01f7\u0003\u0002\u0002\u0002",
    "\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d2\u01d3\u0005h5\u0002\u01d3",
    "\u01d4\u0005\u0010\t\u0002\u01d4\u01f8\u0003\u0002\u0002\u0002\u01d5",
    "\u01f5\u0007\u0007\u0002\u0002\u01d6\u01d7\b\r\u0001\u0002\u01d7\u01ec",
    "\u0005\u00dco\u0002\u01d8\u01de\b\r\u0001\u0002\u01d9\u01da\u0007\u0005",
    "\u0002\u0002\u01da\u01db\b\r\u0001\u0002\u01db\u01dd\u0005^0\u0002\u01dc",
    "\u01d9\u0003\u0002\u0002\u0002\u01dd\u01e0\u0003\u0002\u0002\u0002\u01de",
    "\u01dc\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df",
    "\u01e1\u0003\u0002\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e1",
    "\u01e2\u0005h5\u0002\u01e2\u01e3\u0005\u0010\t\u0002\u01e3\u01ed\u0003",
    "\u0002\u0002\u0002\u01e4\u01e8\b\r\u0001\u0002\u01e5\u01e7\u0005\u0100",
    "\u0081\u0002\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e7\u01ea\u0003\u0002",
    "\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003\u0002",
    "\u0002\u0002\u01e9\u01eb\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003\u0002",
    "\u0002\u0002\u01eb\u01ed\u0005\u000e\b\u0002\u01ec\u01d8\u0003\u0002",
    "\u0002\u0002\u01ec\u01e4\u0003\u0002\u0002\u0002\u01ed\u01f6\u0003\u0002",
    "\u0002\u0002\u01ee\u01ef\u0005h5\u0002\u01ef\u01f0\u0005\u0010\t\u0002",
    "\u01f0\u01f6\u0003\u0002\u0002\u0002\u01f1\u01f2\u0005\u008eH\u0002",
    "\u01f2\u01f3\b\r\u0001\u0002\u01f3\u01f4\u0005\u000e\b\u0002\u01f4\u01f6",
    "\u0003\u0002\u0002\u0002\u01f5\u01d6\u0003\u0002\u0002\u0002\u01f5\u01ee",
    "\u0003\u0002\u0002\u0002\u01f5\u01f1\u0003\u0002\u0002\u0002\u01f6\u01f8",
    "\u0003\u0002\u0002\u0002\u01f7\u01d2\u0003\u0002\u0002\u0002\u01f7\u01d5",
    "\u0003\u0002\u0002\u0002\u01f8\u0019\u0003\u0002\u0002\u0002\u01f9\u01fa",
    "\u0007\u008b\u0002\u0002\u01fa\u01fb\u0005\u00dco\u0002\u01fb\u01ff",
    "\b\u000e\u0001\u0002\u01fc\u01fe\u0005\u00fe\u0080\u0002\u01fd\u01fc",
    "\u0003\u0002\u0002\u0002\u01fe\u0201\u0003\u0002\u0002\u0002\u01ff\u01fd",
    "\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0210",
    "\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202\u0211",
    "\u0005*\u0016\u0002\u0203\u0204\t\u0002\u0002\u0002\u0204\u0205\b\u000e",
    "\u0001\u0002\u0205\u0206\u0007x\u0002\u0002\u0206\u020b\u0005(\u0015",
    "\u0002\u0207\u0208\u0007\u0005\u0002\u0002\u0208\u020a\u0005(\u0015",
    "\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u020a\u020d\u0003\u0002\u0002",
    "\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002",
    "\u0002\u020c\u020e\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002\u0002",
    "\u0002\u020e\u020f\b\u000e\u0001\u0002\u020f\u0211\u0003\u0002\u0002",
    "\u0002\u0210\u0202\u0003\u0002\u0002\u0002\u0210\u0203\u0003\u0002\u0002",
    "\u0002\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002",
    "\u0002\u0212\u0213\u0007*\u0002\u0002\u0213\u0214\u0005\u0092J\u0002",
    "\u0214\u0217\b\u000e\u0001\u0002\u0215\u0218\u0005\u000e\b\u0002\u0216",
    "\u0218\u0007\u009a\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0217",
    "\u0216\u0003\u0002\u0002\u0002\u0218\u001b\u0003\u0002\u0002\u0002\u0219",
    "\u021a\u0007U\u0002\u0002\u021a\u021b\u0005\u00dco\u0002\u021b\u021f",
    "\b\u000f\u0001\u0002\u021c\u021e\u0005\u00fe\u0080\u0002\u021d\u021c",
    "\u0003\u0002\u0002\u0002\u021e\u0221\u0003\u0002\u0002\u0002\u021f\u021d",
    "\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0223",
    "\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0222\u0224",
    "\u0005*\u0016\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0223\u0224",
    "\u0003\u0002\u0002\u0002\u0224\u0275\u0003\u0002\u0002\u0002\u0225\u0226",
    "\u0007\u0007\u0002\u0002\u0226\u022c\u0005^0\u0002\u0227\u0228\u0007",
    "\u0005\u0002\u0002\u0228\u0229\b\u000f\u0001\u0002\u0229\u022b\u0005",
    "^0\u0002\u022a\u0227\u0003\u0002\u0002\u0002\u022b\u022e\u0003\u0002",
    "\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022c\u022d\u0003\u0002",
    "\u0002\u0002\u022d\u0230\u0003\u0002\u0002\u0002\u022e\u022c\u0003\u0002",
    "\u0002\u0002\u022f\u0225\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002",
    "\u0002\u0002\u0230\u0231\u0003\u0002\u0002\u0002\u0231\u0232\u0007\u0004",
    "\u0002\u0002\u0232\u0236\b\u000f\u0001\u0002\u0233\u0235\u0005.\u0018",
    "\u0002\u0234\u0233\u0003\u0002\u0002\u0002\u0235\u0238\u0003\u0002\u0002",
    "\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002",
    "\u0002\u0237\u0239\u0003\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002",
    "\u0002\u0239\u023a\u0007\u0006\u0002\u0002\u023a\u0246\b\u000f\u0001",
    "\u0002\u023b\u023c\u0007@\u0002\u0002\u023c\u023d\u0007\u0004\u0002",
    "\u0002\u023d\u0241\b\u000f\u0001\u0002\u023e\u0240\u0005&\u0014\u0002",
    "\u023f\u023e\u0003\u0002\u0002\u0002\u0240\u0243\u0003\u0002\u0002\u0002",
    "\u0241\u023f\u0003\u0002\u0002\u0002\u0241\u0242\u0003\u0002\u0002\u0002",
    "\u0242\u0244\u0003\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u0007\u0006\u0002\u0002\u0245\u0247\b\u000f\u0001\u0002",
    "\u0246\u023b\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002",
    "\u0247\u024a\u0003\u0002\u0002\u0002\u0248\u024b\u0005\u000e\b\u0002",
    "\u0249\u024b\u0007\u009a\u0002\u0002\u024a\u0248\u0003\u0002\u0002\u0002",
    "\u024a\u0249\u0003\u0002\u0002\u0002\u024b\u0276\u0003\u0002\u0002\u0002",
    "\u024c\u0273\u0007*\u0002\u0002\u024d\u024e\u0005\u0092J\u0002\u024e",
    "\u025a\b\u000f\u0001\u0002\u024f\u0250\u0007@\u0002\u0002\u0250\u0251",
    "\u0007\u0004\u0002\u0002\u0251\u0255\b\u000f\u0001\u0002\u0252\u0254",
    "\u0005&\u0014\u0002\u0253\u0252\u0003\u0002\u0002\u0002\u0254\u0257",
    "\u0003\u0002\u0002\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0256",
    "\u0003\u0002\u0002\u0002\u0256\u0258\u0003\u0002\u0002\u0002\u0257\u0255",
    "\u0003\u0002\u0002\u0002\u0258\u0259\u0007\u0006\u0002\u0002\u0259\u025b",
    "\b\u000f\u0001\u0002\u025a\u024f\u0003\u0002\u0002\u0002\u025a\u025b",
    "\u0003\u0002\u0002\u0002\u025b\u025e\u0003\u0002\u0002\u0002\u025c\u025f",
    "\u0005\u000e\b\u0002\u025d\u025f\u0007\u009a\u0002\u0002\u025e\u025c",
    "\u0003\u0002\u0002\u0002\u025e\u025d\u0003\u0002\u0002\u0002\u025f\u0274",
    "\u0003\u0002\u0002\u0002\u0260\u0261\u0005\u008eH\u0002\u0261\u0262",
    "\b\u000f\u0001\u0002\u0262\u026e\u0005\u0090I\u0002\u0263\u0264\u0007",
    "@\u0002\u0002\u0264\u0265\u0007\u0004\u0002\u0002\u0265\u0269\b\u000f",
    "\u0001\u0002\u0266\u0268\u0005&\u0014\u0002\u0267\u0266\u0003\u0002",
    "\u0002\u0002\u0268\u026b\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002",
    "\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u026c\u0003\u0002",
    "\u0002\u0002\u026b\u0269\u0003\u0002\u0002\u0002\u026c\u026d\u0007\u0006",
    "\u0002\u0002\u026d\u026f\b\u000f\u0001\u0002\u026e\u0263\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002",
    "\u0002\u0002\u0270\u0271\b\u000f\u0001\u0002\u0271\u0272\u0005\u0010",
    "\t\u0002\u0272\u0274\u0003\u0002\u0002\u0002\u0273\u024d\u0003\u0002",
    "\u0002\u0002\u0273\u0260\u0003\u0002\u0002\u0002\u0274\u0276\u0003\u0002",
    "\u0002\u0002\u0275\u022f\u0003\u0002\u0002\u0002\u0275\u024c\u0003\u0002",
    "\u0002\u0002\u0276\u001d\u0003\u0002\u0002\u0002\u0277\u027e\u0007F",
    "\u0002\u0002\u0278\u027b\u0007>\u0002\u0002\u0279\u027b\u0007\u0094",
    "\u0002\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u0279\u0003\u0002",
    "\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027e\u0007U",
    "\u0002\u0002\u027d\u0277\u0003\u0002\u0002\u0002\u027d\u027a\u0003\u0002",
    "\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027f\u0280\u0005\u00dc",
    "o\u0002\u0280\u0284\b\u0010\u0001\u0002\u0281\u0283\u0005\u00fe\u0080",
    "\u0002\u0282\u0281\u0003\u0002\u0002\u0002\u0283\u0286\u0003\u0002\u0002",
    "\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002",
    "\u0002\u0285\u0298\u0003\u0002\u0002\u0002\u0286\u0284\u0003\u0002\u0002",
    "\u0002\u0287\u0295\u0007\u0007\u0002\u0002\u0288\u028e\u0005^0\u0002",
    "\u0289\u028a\u0007\u0005\u0002\u0002\u028a\u028b\b\u0010\u0001\u0002",
    "\u028b\u028d\u0005^0\u0002\u028c\u0289\u0003\u0002\u0002\u0002\u028d",
    "\u0290\u0003\u0002\u0002\u0002\u028e\u028c\u0003\u0002\u0002\u0002\u028e",
    "\u028f\u0003\u0002\u0002\u0002\u028f\u0292\u0003\u0002\u0002\u0002\u0290",
    "\u028e\u0003\u0002\u0002\u0002\u0291\u0293\u0005 \u0011\u0002\u0292",
    "\u0291\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293",
    "\u0296\u0003\u0002\u0002\u0002\u0294\u0296\u0005 \u0011\u0002\u0295",
    "\u0288\u0003\u0002\u0002\u0002\u0295\u0294\u0003\u0002\u0002\u0002\u0296",
    "\u0299\u0003\u0002\u0002\u0002\u0297\u0299\u0005 \u0011\u0002\u0298",
    "\u0287\u0003\u0002\u0002\u0002\u0298\u0297\u0003\u0002\u0002\u0002\u0298",
    "\u0299\u0003\u0002\u0002\u0002\u0299\u029c\u0003\u0002\u0002\u0002\u029a",
    "\u029d\u0005\u000e\b\u0002\u029b\u029d\u0007\u009a\u0002\u0002\u029c",
    "\u029a\u0003\u0002\u0002\u0002\u029c\u029b\u0003\u0002\u0002\u0002\u029d",
    "\u001f\u0003\u0002\u0002\u0002\u029e\u029f\u0007\u0004\u0002\u0002\u029f",
    "\u02a3\b\u0011\u0001\u0002\u02a0\u02a2\u0005.\u0018\u0002\u02a1\u02a0",
    "\u0003\u0002\u0002\u0002\u02a2\u02a5\u0003\u0002\u0002\u0002\u02a3\u02a1",
    "\u0003\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a6",
    "\u0003\u0002\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a6\u02a7",
    "\u0007\u0006\u0002\u0002\u02a7\u02b3\b\u0011\u0001\u0002\u02a8\u02a9",
    "\u0007@\u0002\u0002\u02a9\u02aa\u0007\u0004\u0002\u0002\u02aa\u02ae",
    "\b\u0011\u0001\u0002\u02ab\u02ad\u0005&\u0014\u0002\u02ac\u02ab\u0003",
    "\u0002\u0002\u0002\u02ad\u02b0\u0003\u0002\u0002\u0002\u02ae\u02ac\u0003",
    "\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b1\u0003",
    "\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b1\u02b2\u0007",
    "\u0006\u0002\u0002\u02b2\u02b4\b\u0011\u0001\u0002\u02b3\u02a8\u0003",
    "\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4!\u0003",
    "\u0002\u0002\u0002\u02b5\u02b6\u0007\u0085\u0002\u0002\u02b6\u02b7\u0005",
    "\u00dco\u0002\u02b7\u02bb\b\u0012\u0001\u0002\u02b8\u02ba\u0005\u00fe",
    "\u0080\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02ba\u02bd\u0003\u0002",
    "\u0002\u0002\u02bb\u02b9\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002",
    "\u0002\u0002\u02bc\u02be\u0003\u0002\u0002\u0002\u02bd\u02bb\u0003\u0002",
    "\u0002\u0002\u02be\u02bf\u0005f4\u0002\u02bf#\u0003\u0002\u0002\u0002",
    "\u02c0\u02c1\u0007?\u0002\u0002\u02c1\u02c2\u0005\u00dco\u0002\u02c2",
    "\u02c6\b\u0013\u0001\u0002\u02c3\u02c5\u0005\u00fe\u0080\u0002\u02c4",
    "\u02c3\u0003\u0002\u0002\u0002\u02c5\u02c8\u0003\u0002\u0002\u0002\u02c6",
    "\u02c4\u0003\u0002\u0002\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7",
    "\u02c9\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c9",
    "\u02cb\u0005*\u0016\u0002\u02ca\u02cc\u0005b2\u0002\u02cb\u02ca\u0003",
    "\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002\u0002\u0002\u02cc\u02da\u0003",
    "\u0002\u0002\u0002\u02cd\u02ce\u0007a\u0002\u0002\u02ce\u02cf\u0005",
    "\u00dco\u0002\u02cf\u02d3\b\u0013\u0001\u0002\u02d0\u02d2\u0005\u00fe",
    "\u0080\u0002\u02d1\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d5\u0003\u0002",
    "\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002",
    "\u0002\u0002\u02d4\u02d6\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002",
    "\u0002\u0002\u02d6\u02d7\u0005*\u0016\u0002\u02d7\u02d8\u0005b2\u0002",
    "\u02d8\u02da\u0003\u0002\u0002\u0002\u02d9\u02c0\u0003\u0002\u0002\u0002",
    "\u02d9\u02cd\u0003\u0002\u0002\u0002\u02da\u02dd\u0003\u0002\u0002\u0002",
    "\u02db\u02de\u0005\u000e\b\u0002\u02dc\u02de\u0007\u009a\u0002\u0002",
    "\u02dd\u02db\u0003\u0002\u0002\u0002\u02dd\u02dc\u0003\u0002\u0002\u0002",
    "\u02de%\u0003\u0002\u0002\u0002\u02df\u02e3\b\u0014\u0001\u0002\u02e0",
    "\u02e2\u0005\u0100\u0081\u0002\u02e1\u02e0\u0003\u0002\u0002\u0002\u02e2",
    "\u02e5\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3",
    "\u02e4\u0003\u0002\u0002\u0002\u02e4\u02ff\u0003\u0002\u0002\u0002\u02e5",
    "\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e7\u0007?\u0002\u0002\u02e7",
    "\u02e8\u0005\u011a\u008e\u0002\u02e8\u02ec\b\u0014\u0001\u0002\u02e9",
    "\u02eb\u0005\u00fe\u0080\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02eb",
    "\u02ee\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ec",
    "\u02ed\u0003\u0002\u0002\u0002\u02ed\u02ef\u0003\u0002\u0002\u0002\u02ee",
    "\u02ec\u0003\u0002\u0002\u0002\u02ef\u02f1\u0005*\u0016\u0002\u02f0",
    "\u02f2\u0005b2\u0002\u02f1\u02f0\u0003\u0002\u0002\u0002\u02f1\u02f2",
    "\u0003\u0002\u0002\u0002\u02f2\u0300\u0003\u0002\u0002\u0002\u02f3\u02f4",
    "\u0007a\u0002\u0002\u02f4\u02f5\u0005\u011a\u008e\u0002\u02f5\u02f9",
    "\b\u0014\u0001\u0002\u02f6\u02f8\u0005\u00fe\u0080\u0002\u02f7\u02f6",
    "\u0003\u0002\u0002\u0002\u02f8\u02fb\u0003\u0002\u0002\u0002\u02f9\u02f7",
    "\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u02fc",
    "\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003\u0002\u0002\u0002\u02fc\u02fd",
    "\u0005*\u0016\u0002\u02fd\u02fe\u0005b2\u0002\u02fe\u0300\u0003\u0002",
    "\u0002\u0002\u02ff\u02e6\u0003\u0002\u0002\u0002\u02ff\u02f3\u0003\u0002",
    "\u0002\u0002\u0300\u0301\u0003\u0002\u0002\u0002\u0301\u0302\u0005\u000e",
    "\b\u0002\u0302\'\u0003\u0002\u0002\u0002\u0303\u0309\b\u0015\u0001\u0002",
    "\u0304\u0305\u0005\u0100\u0081\u0002\u0305\u0306\b\u0015\u0001\u0002",
    "\u0306\u0308\u0003\u0002\u0002\u0002\u0307\u0304\u0003\u0002\u0002\u0002",
    "\u0308\u030b\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002",
    "\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030c\u0003\u0002\u0002\u0002",
    "\u030b\u0309\u0003\u0002\u0002\u0002\u030c\u030d\u0005\u011a\u008e\u0002",
    "\u030d\u0311\b\u0015\u0001\u0002\u030e\u0310\u0005\u00fe\u0080\u0002",
    "\u030f\u030e\u0003\u0002\u0002\u0002\u0310\u0313\u0003\u0002\u0002\u0002",
    "\u0311\u030f\u0003\u0002\u0002\u0002\u0311\u0312\u0003\u0002\u0002\u0002",
    "\u0312\u0314\u0003\u0002\u0002\u0002\u0313\u0311\u0003\u0002\u0002\u0002",
    "\u0314\u0317\u0005`1\u0002\u0315\u0316\b\u0015\u0001\u0002\u0316\u0318",
    "\u00058\u001d\u0002\u0317\u0315\u0003\u0002\u0002\u0002\u0317\u0318",
    "\u0003\u0002\u0002\u0002\u0318\u0319\u0003\u0002\u0002\u0002\u0319\u031a",
    "\b\u0015\u0001\u0002\u031a\u031e\b\u0015\u0001\u0002\u031b\u031d\u0005",
    "\u0100\u0081\u0002\u031c\u031b\u0003\u0002\u0002\u0002\u031d\u0320\u0003",
    "\u0002\u0002\u0002\u031e\u031c\u0003\u0002\u0002\u0002\u031e\u031f\u0003",
    "\u0002\u0002\u0002\u031f)\u0003\u0002\u0002\u0002\u0320\u031e\u0003",
    "\u0002\u0002\u0002\u0321\u0322\u0007\b\u0002\u0002\u0322\u0323\b\u0016",
    "\u0001\u0002\u0323\u0324\b\u0016\u0001\u0002\u0324\u032a\u0005(\u0015",
    "\u0002\u0325\u0326\u0007\u0005\u0002\u0002\u0326\u0327\b\u0016\u0001",
    "\u0002\u0327\u0329\u0005(\u0015\u0002\u0328\u0325\u0003\u0002\u0002",
    "\u0002\u0329\u032c\u0003\u0002\u0002\u0002\u032a\u0328\u0003\u0002\u0002",
    "\u0002\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u032d\u0003\u0002\u0002",
    "\u0002\u032c\u032a\u0003\u0002\u0002\u0002\u032d\u032e\u0007\t\u0002",
    "\u0002\u032e\u032f\b\u0016\u0001\u0002\u032f+\u0003\u0002\u0002\u0002",
    "\u0330\u0334\b\u0017\u0001\u0002\u0331\u0333\u0005\u0100\u0081\u0002",
    "\u0332\u0331\u0003\u0002\u0002\u0002\u0333\u0336\u0003\u0002\u0002\u0002",
    "\u0334\u0332\u0003\u0002\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002",
    "\u0335\u0337\u0003\u0002\u0002\u0002\u0336\u0334\u0003\u0002\u0002\u0002",
    "\u0337\u0338\u0005\u011a\u008e\u0002\u0338\u033c\b\u0017\u0001\u0002",
    "\u0339\u033b\u0005\u0100\u0081\u0002\u033a\u0339\u0003\u0002\u0002\u0002",
    "\u033b\u033e\u0003\u0002\u0002\u0002\u033c\u033a\u0003\u0002\u0002\u0002",
    "\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u0353\u0003\u0002\u0002\u0002",
    "\u033e\u033c\u0003\u0002\u0002\u0002\u033f\u0340\u0007\n\u0002\u0002",
    "\u0340\u034a\b\u0017\u0001\u0002\u0341\u0342\u0005\u0116\u008c\u0002",
    "\u0342\u0343\b\u0017\u0001\u0002\u0343\u034b\u0003\u0002\u0002\u0002",
    "\u0344\u0347\u0007\u000b\u0002\u0002\u0345\u0347\u0007\f\u0002\u0002",
    "\u0346\u0344\u0003\u0002\u0002\u0002\u0346\u0345\u0003\u0002\u0002\u0002",
    "\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349\u0007=\u0002\u0002",
    "\u0349\u034b\b\u0017\u0001\u0002\u034a\u0341\u0003\u0002\u0002\u0002",
    "\u034a\u0346\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002",
    "\u034c\u0350\b\u0017\u0001\u0002\u034d\u034f\u0005\u0100\u0081\u0002",
    "\u034e\u034d\u0003\u0002\u0002\u0002\u034f\u0352\u0003\u0002\u0002\u0002",
    "\u0350\u034e\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002",
    "\u0351\u0354\u0003\u0002\u0002\u0002\u0352\u0350\u0003\u0002\u0002\u0002",
    "\u0353\u033f\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002",
    "\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356\u0005\u000e\b\u0002",
    "\u0356-\u0003\u0002\u0002\u0002\u0357\u035b\b\u0018\u0001\u0002\u0358",
    "\u035a\u0005\u0100\u0081\u0002\u0359\u0358\u0003\u0002\u0002\u0002\u035a",
    "\u035d\u0003\u0002\u0002\u0002\u035b\u0359\u0003\u0002\u0002\u0002\u035b",
    "\u035c\u0003\u0002\u0002\u0002\u035c\u035e\u0003\u0002\u0002\u0002\u035d",
    "\u035b\u0003\u0002\u0002\u0002\u035e\u035f\u00050\u0019\u0002\u035f",
    "/\u0003\u0002\u0002\u0002\u0360\u0363\b\u0019\u0001\u0002\u0361\u0362",
    "\u0007\u0090\u0002\u0002\u0362\u0364\b\u0019\u0001\u0002\u0363\u0361",
    "\u0003\u0002\u0002\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u0367",
    "\u0003\u0002\u0002\u0002\u0365\u0366\u00072\u0002\u0002\u0366\u0368",
    "\b\u0019\u0001\u0002\u0367\u0365\u0003\u0002\u0002\u0002\u0367\u0368",
    "\u0003\u0002\u0002\u0002\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u036c",
    "\b\u0019\u0001\u0002\u036a\u036b\u0007\u008f\u0002\u0002\u036b\u036d",
    "\b\u0019\u0001\u0002\u036c\u036a\u0003\u0002\u0002\u0002\u036c\u036d",
    "\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036e\u0371",
    "\b\u0019\u0001\u0002\u036f\u0370\u0007\u008e\u0002\u0002\u0370\u0372",
    "\b\u0019\u0001\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0371\u0372",
    "\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373\u0374",
    "\u0005\u011a\u008e\u0002\u0374\u0378\b\u0019\u0001\u0002\u0375\u0377",
    "\u0005\u00fe\u0080\u0002\u0376\u0375\u0003\u0002\u0002\u0002\u0377\u037a",
    "\u0003\u0002\u0002\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0378\u0379",
    "\u0003\u0002\u0002\u0002\u0379\u0394\u0003\u0002\u0002\u0002\u037a\u0378",
    "\u0003\u0002\u0002\u0002\u037b\u0380\u0005h5\u0002\u037c\u037d\u0005",
    "~@\u0002\u037d\u037e\u0005\u000e\b\u0002\u037e\u0381\u0003\u0002\u0002",
    "\u0002\u037f\u0381\u0005\u0010\t\u0002\u0380\u037c\u0003\u0002\u0002",
    "\u0002\u0380\u037f\u0003\u0002\u0002\u0002\u0381\u0395\u0003\u0002\u0002",
    "\u0002\u0382\u0383\u0007\u0007\u0002\u0002\u0383\u0395\u00052\u001a",
    "\u0002\u0384\u0385\u0007\n\u0002\u0002\u0385\u0387\u0005\u00d2j\u0002",
    "\u0386\u0388\u0007\u0082\u0002\u0002\u0387\u0386\u0003\u0002\u0002\u0002",
    "\u0387\u0388\u0003\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002",
    "\u0389\u038a\b\u0019\u0001\u0002\u038a\u038e\b\u0019\u0001\u0002\u038b",
    "\u038d\u0005\u0100\u0081\u0002\u038c\u038b\u0003\u0002\u0002\u0002\u038d",
    "\u0390\u0003\u0002\u0002\u0002\u038e\u038c\u0003\u0002\u0002\u0002\u038e",
    "\u038f\u0003\u0002\u0002\u0002\u038f\u0391\u0003\u0002\u0002\u0002\u0390",
    "\u038e\u0003\u0002\u0002\u0002\u0391\u0392\u0005\u000e\b\u0002\u0392",
    "\u0395\u0003\u0002\u0002\u0002\u0393\u0395\u0005\u000e\b\u0002\u0394",
    "\u037b\u0003\u0002\u0002\u0002\u0394\u0382\u0003\u0002\u0002\u0002\u0394",
    "\u0384\u0003\u0002\u0002\u0002\u0394\u0393\u0003\u0002\u0002\u0002\u0395",
    "1\u0003\u0002\u0002\u0002\u0396\u0398\u0005h5\u0002\u0397\u0399\u0005",
    "~@\u0002\u0398\u0397\u0003\u0002\u0002\u0002\u0398\u0399\u0003\u0002",
    "\u0002\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b\u0005\u000e",
    "\b\u0002\u039b\u0444\u0003\u0002\u0002\u0002\u039c\u03b3\u0005n8\u0002",
    "\u039d\u039e\u0005h5\u0002\u039e\u039f\u0005\u0010\t\u0002\u039f\u03b4",
    "\u0003\u0002\u0002\u0002\u03a0\u03a1\u0007t\u0002\u0002\u03a1\u03a2",
    "\b\u001a\u0001\u0002\u03a2\u03a3\u0005j6\u0002\u03a3\u03a4\u0005\u0010",
    "\t\u0002\u03a4\u03b4\u0003\u0002\u0002\u0002\u03a5\u03a6\u0007n\u0002",
    "\u0002\u03a6\u03a7\b\u001a\u0001\u0002\u03a7\u03a8\u0005j6\u0002\u03a8",
    "\u03a9\u0005\u0010\t\u0002\u03a9\u03b4\u0003\u0002\u0002\u0002\u03aa",
    "\u03ab\u0005v<\u0002\u03ab\u03ac\u0005r:\u0002\u03ac\u03b4\u0003\u0002",
    "\u0002\u0002\u03ad\u03ae\u0005t;\u0002\u03ae\u03af\u0005r:\u0002\u03af",
    "\u03b4\u0003\u0002\u0002\u0002\u03b0\u03b1\u0005\u00dco\u0002\u03b1",
    "\u03b2\u0005r:\u0002\u03b2\u03b4\u0003\u0002\u0002\u0002\u03b3\u039d",
    "\u0003\u0002\u0002\u0002\u03b3\u03a0\u0003\u0002\u0002\u0002\u03b3\u03a5",
    "\u0003\u0002\u0002\u0002\u03b3\u03aa\u0003\u0002\u0002\u0002\u03b3\u03ad",
    "\u0003\u0002\u0002\u0002\u03b3\u03b0\u0003\u0002\u0002\u0002\u03b4\u0444",
    "\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007D\u0002\u0002\u03b6\u03b7",
    "\u00076\u0002\u0002\u03b7\u03bb\b\u001a\u0001\u0002\u03b8\u03b9\u0007",
    "n\u0002\u0002\u03b9\u03bb\b\u001a\u0001\u0002\u03ba\u03b5\u0003\u0002",
    "\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03bb\u03df\u0003\u0002",
    "\u0002\u0002\u03bc\u03be\u0005h5\u0002\u03bd\u03bf\u0005~@\u0002\u03be",
    "\u03bd\u0003\u0002\u0002\u0002\u03be\u03bf\u0003\u0002\u0002\u0002\u03bf",
    "\u03e0\u0003\u0002\u0002\u0002\u03c0\u03c3\u0005\u0082B\u0002\u03c1",
    "\u03c3\u0005\u0084C\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c2",
    "\u03c1\u0003\u0002\u0002\u0002\u03c3\u03c5\u0003\u0002\u0002\u0002\u03c4",
    "\u03c6\u0005~@\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002\u03c5\u03c6",
    "\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7\u03cb",
    "\b\u001a\u0001\u0002\u03c8\u03ca\u0005\u0100\u0081\u0002\u03c9\u03c8",
    "\u0003\u0002\u0002\u0002\u03ca\u03cd\u0003\u0002\u0002\u0002\u03cb\u03c9",
    "\u0003\u0002\u0002\u0002\u03cb\u03cc\u0003\u0002\u0002\u0002\u03cc\u03dd",
    "\u0003\u0002\u0002\u0002\u03cd\u03cb\u0003\u0002\u0002\u0002\u03ce\u03cf",
    "\b\u001a\u0001\u0002\u03cf\u03d0\u0007V\u0002\u0002\u03d0\u03d1\u0007",
    "\u0004\u0002\u0002\u03d1\u03d5\b\u001a\u0001\u0002\u03d2\u03d4\u0005",
    ",\u0017\u0002\u03d3\u03d2\u0003\u0002\u0002\u0002\u03d4\u03d7\u0003",
    "\u0002\u0002\u0002\u03d5\u03d3\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003",
    "\u0002\u0002\u0002\u03d6\u03d8\u0003\u0002\u0002\u0002\u03d7\u03d5\u0003",
    "\u0002\u0002\u0002\u03d8\u03d9\u0007\u0006\u0002\u0002\u03d9\u03db\b",
    "\u001a\u0001\u0002\u03da\u03dc\u0005~@\u0002\u03db\u03da\u0003\u0002",
    "\u0002\u0002\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u03de\u0003\u0002",
    "\u0002\u0002\u03dd\u03ce\u0003\u0002\u0002\u0002\u03dd\u03de\u0003\u0002",
    "\u0002\u0002\u03de\u03e0\u0003\u0002\u0002\u0002\u03df\u03bc\u0003\u0002",
    "\u0002\u0002\u03df\u03c2\u0003\u0002\u0002\u0002\u03e0\u03e1\u0003\u0002",
    "\u0002\u0002\u03e1\u03e2\u0005\u000e\b\u0002\u03e2\u0444\u0003\u0002",
    "\u0002\u0002\u03e3\u03e4\u0007m\u0002\u0002\u03e4\u03e5\b\u001a\u0001",
    "\u0002\u03e5\u03e6\u0005\u0084C\u0002\u03e6\u03e7\u0005|?\u0002\u03e7",
    "\u03eb\b\u001a\u0001\u0002\u03e8\u03ea\u0005\u0100\u0081\u0002\u03e9",
    "\u03e8\u0003\u0002\u0002\u0002\u03ea\u03ed\u0003\u0002\u0002\u0002\u03eb",
    "\u03e9\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec",
    "\u03f7\u0003\u0002\u0002\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ee",
    "\u03ef\b\u001a\u0001\u0002\u03ef\u03f0\u00054\u001b\u0002\u03f0\u03f4",
    "\b\u001a\u0001\u0002\u03f1\u03f3\u0005\u0100\u0081\u0002\u03f2\u03f1",
    "\u0003\u0002\u0002\u0002\u03f3\u03f6\u0003\u0002\u0002\u0002\u03f4\u03f2",
    "\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f8",
    "\u0003\u0002\u0002\u0002\u03f6\u03f4\u0003\u0002\u0002\u0002\u03f7\u03ee",
    "\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u03f9",
    "\u0003\u0002\u0002\u0002\u03f9\u03fa\u0005\u000e\b\u0002\u03fa\u0444",
    "\u0003\u0002\u0002\u0002\u03fb\u03fc\u0005\u0082B\u0002\u03fc\u03fd",
    "\u0005|?\u0002\u03fd\u0401\b\u001a\u0001\u0002\u03fe\u0400\u0005\u0100",
    "\u0081\u0002\u03ff\u03fe\u0003\u0002\u0002\u0002\u0400\u0403\u0003\u0002",
    "\u0002\u0002\u0401\u03ff\u0003\u0002\u0002\u0002\u0401\u0402\u0003\u0002",
    "\u0002\u0002\u0402\u041b\u0003\u0002\u0002\u0002\u0403\u0401\u0003\u0002",
    "\u0002\u0002\u0404\u0405\u0007V\u0002\u0002\u0405\u0406\u0007\u0004",
    "\u0002\u0002\u0406\u040a\b\u001a\u0001\u0002\u0407\u0409\u0005,\u0017",
    "\u0002\u0408\u0407\u0003\u0002\u0002\u0002\u0409\u040c\u0003\u0002\u0002",
    "\u0002\u040a\u0408\u0003\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002",
    "\u0002\u040b\u040d\u0003\u0002\u0002\u0002\u040c\u040a\u0003\u0002\u0002",
    "\u0002\u040d\u040e\u0007\u0006\u0002\u0002\u040e\u0410\b\u001a\u0001",
    "\u0002\u040f\u0411\u00054\u001b\u0002\u0410\u040f\u0003\u0002\u0002",
    "\u0002\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u041c\u0003\u0002\u0002",
    "\u0002\u0412\u0413\b\u001a\u0001\u0002\u0413\u0414\u00054\u001b\u0002",
    "\u0414\u0418\b\u001a\u0001\u0002\u0415\u0417\u0005\u0100\u0081\u0002",
    "\u0416\u0415\u0003\u0002\u0002\u0002\u0417\u041a\u0003\u0002\u0002\u0002",
    "\u0418\u0416\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002",
    "\u0419\u041c\u0003\u0002\u0002\u0002\u041a\u0418\u0003\u0002\u0002\u0002",
    "\u041b\u0404\u0003\u0002\u0002\u0002\u041b\u0412\u0003\u0002\u0002\u0002",
    "\u041b\u041c\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002\u0002\u0002",
    "\u041d\u041e\u0005\u000e\b\u0002\u041e\u0444\u0003\u0002\u0002\u0002",
    "\u041f\u0420\u0005\u0084C\u0002\u0420\u0421\u0005|?\u0002\u0421\u0425",
    "\b\u001a\u0001\u0002\u0422\u0424\u0005\u0100\u0081\u0002\u0423\u0422",
    "\u0003\u0002\u0002\u0002\u0424\u0427\u0003\u0002\u0002\u0002\u0425\u0423",
    "\u0003\u0002\u0002\u0002\u0425\u0426\u0003\u0002\u0002\u0002\u0426\u043f",
    "\u0003\u0002\u0002\u0002\u0427\u0425\u0003\u0002\u0002\u0002\u0428\u0429",
    "\u0007V\u0002\u0002\u0429\u042a\u0007\u0004\u0002\u0002\u042a\u042e",
    "\b\u001a\u0001\u0002\u042b\u042d\u0005,\u0017\u0002\u042c\u042b\u0003",
    "\u0002\u0002\u0002\u042d\u0430\u0003\u0002\u0002\u0002\u042e\u042c\u0003",
    "\u0002\u0002\u0002\u042e\u042f\u0003\u0002\u0002\u0002\u042f\u0431\u0003",
    "\u0002\u0002\u0002\u0430\u042e\u0003\u0002\u0002\u0002\u0431\u0432\u0007",
    "\u0006\u0002\u0002\u0432\u0434\b\u001a\u0001\u0002\u0433\u0435\u0005",
    "4\u001b\u0002\u0434\u0433\u0003\u0002\u0002\u0002\u0434\u0435\u0003",
    "\u0002\u0002\u0002\u0435\u0440\u0003\u0002\u0002\u0002\u0436\u0437\b",
    "\u001a\u0001\u0002\u0437\u0438\u00054\u001b\u0002\u0438\u043c\b\u001a",
    "\u0001\u0002\u0439\u043b\u0005\u0100\u0081\u0002\u043a\u0439\u0003\u0002",
    "\u0002\u0002\u043b\u043e\u0003\u0002\u0002\u0002\u043c\u043a\u0003\u0002",
    "\u0002\u0002\u043c\u043d\u0003\u0002\u0002\u0002\u043d\u0440\u0003\u0002",
    "\u0002\u0002\u043e\u043c\u0003\u0002\u0002\u0002\u043f\u0428\u0003\u0002",
    "\u0002\u0002\u043f\u0436\u0003\u0002\u0002\u0002\u043f\u0440\u0003\u0002",
    "\u0002\u0002\u0440\u0441\u0003\u0002\u0002\u0002\u0441\u0442\u0005\u000e",
    "\b\u0002\u0442\u0444\u0003\u0002\u0002\u0002\u0443\u0396\u0003\u0002",
    "\u0002\u0002\u0443\u039c\u0003\u0002\u0002\u0002\u0443\u03ba\u0003\u0002",
    "\u0002\u0002\u0443\u03e3\u0003\u0002\u0002\u0002\u0443\u03fb\u0003\u0002",
    "\u0002\u0002\u0443\u041f\u0003\u0002\u0002\u0002\u04443\u0003\u0002",
    "\u0002\u0002\u0445\u044e\u00056\u001c\u0002\u0446\u0447\u0007\n\u0002",
    "\u0002\u0447\u0449\u0005\u00d2j\u0002\u0448\u044a\u0007\u0082\u0002",
    "\u0002\u0449\u0448\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002",
    "\u0002\u044a\u044b\u0003\u0002\u0002\u0002\u044b\u044c\b\u001b\u0001",
    "\u0002\u044c\u044e\u0003\u0002\u0002\u0002\u044d\u0445\u0003\u0002\u0002",
    "\u0002\u044d\u0446\u0003\u0002\u0002\u0002\u044e5\u0003\u0002\u0002",
    "\u0002\u044f\u0451\u00058\u001d\u0002\u0450\u0452\u0005~@\u0002\u0451",
    "\u0450\u0003\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452",
    "\u0458\u0003\u0002\u0002\u0002\u0453\u0455\u0005~@\u0002\u0454\u0456",
    "\u00058\u001d\u0002\u0455\u0454\u0003\u0002\u0002\u0002\u0455\u0456",
    "\u0003\u0002\u0002\u0002\u0456\u0458\u0003\u0002\u0002\u0002\u0457\u044f",
    "\u0003\u0002\u0002\u0002\u0457\u0453\u0003\u0002\u0002\u0002\u04587",
    "\u0003\u0002\u0002\u0002\u0459\u045a\u0007N\u0002\u0002\u045a\u045b",
    "\u0005\u00d2j\u0002\u045b\u045c\b\u001d\u0001\u0002\u045c9\u0003\u0002",
    "\u0002\u0002\u045d\u04c8\u0005\u00dco\u0002\u045e\u045f\u0007\u0007",
    "\u0002\u0002\u045f\u0460\u0005\u00dco\u0002\u0460\u0461\b\u001e\u0001",
    "\u0002\u0461\u0462\u0005H%\u0002\u0462\u04c9\u0003\u0002\u0002\u0002",
    "\u0463\u0464\b\u001e\u0001\u0002\u0464\u04c9\u0005J&\u0002\u0465\u0466",
    "\b\u001e\u0001\u0002\u0466\u0467\u0007<\u0002\u0002\u0467\u0468\b\u001e",
    "\u0001\u0002\u0468\u046c\b\u001e\u0001\u0002\u0469\u046b\u0005\u0100",
    "\u0081\u0002\u046a\u0469\u0003\u0002\u0002\u0002\u046b\u046e\u0003\u0002",
    "\u0002\u0002\u046c\u046a\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002",
    "\u0002\u0002\u046d\u04c2\u0003\u0002\u0002\u0002\u046e\u046c\u0003\u0002",
    "\u0002\u0002\u046f\u0470\u0007\u0004\u0002\u0002\u0470\u0474\b\u001e",
    "\u0001\u0002\u0471\u0473\u0005L\'\u0002\u0472\u0471\u0003\u0002\u0002",
    "\u0002\u0473\u0476\u0003\u0002\u0002\u0002\u0474\u0472\u0003\u0002\u0002",
    "\u0002\u0474\u0475\u0003\u0002\u0002\u0002\u0475\u0477\u0003\u0002\u0002",
    "\u0002\u0476\u0474\u0003\u0002\u0002\u0002\u0477\u0478\u0007\u0006\u0002",
    "\u0002\u0478\u0479\b\u001e\u0001\u0002\u0479\u047a\b\u001e\u0001\u0002",
    "\u047a\u04c3\b\u001e\u0001\u0002\u047b\u047c\u0007R\u0002\u0002\u047c",
    "\u047d\b\u001e\u0001\u0002\u047d\u0481\u0007\u0004\u0002\u0002\u047e",
    "\u0480\u0005L\'\u0002\u047f\u047e\u0003\u0002\u0002\u0002\u0480\u0483",
    "\u0003\u0002\u0002\u0002\u0481\u047f\u0003\u0002\u0002\u0002\u0481\u0482",
    "\u0003\u0002\u0002\u0002\u0482\u0484\u0003\u0002\u0002\u0002\u0483\u0481",
    "\u0003\u0002\u0002\u0002\u0484\u0485\u0007\u0006\u0002\u0002\u0485\u0486",
    "\b\u001e\u0001\u0002\u0486\u0487\b\u001e\u0001\u0002\u0487\u04c3\b\u001e",
    "\u0001\u0002\u0488\u0489\u0007V\u0002\u0002\u0489\u048a\b\u001e\u0001",
    "\u0002\u048a\u048e\u0007\u0004\u0002\u0002\u048b\u048d\u0005,\u0017",
    "\u0002\u048c\u048b\u0003\u0002\u0002\u0002\u048d\u0490\u0003\u0002\u0002",
    "\u0002\u048e\u048c\u0003\u0002\u0002\u0002\u048e\u048f\u0003\u0002\u0002",
    "\u0002\u048f\u0491\u0003\u0002\u0002\u0002\u0490\u048e\u0003\u0002\u0002",
    "\u0002\u0491\u0492\u0007\u0006\u0002\u0002\u0492\u04c3\b\u001e\u0001",
    "\u0002\u0493\u04c3\u0005\u0088E\u0002\u0494\u0499\u0005^0\u0002\u0495",
    "\u0496\u0007\u0005\u0002\u0002\u0496\u0498\u0005^0\u0002\u0497\u0495",
    "\u0003\u0002\u0002\u0002\u0498\u049b\u0003\u0002\u0002\u0002\u0499\u0497",
    "\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u04c3",
    "\u0003\u0002\u0002\u0002\u049b\u0499\u0003\u0002\u0002\u0002\u049c\u049d",
    "\u0007P\u0002\u0002\u049d\u049e\b\u001e\u0001\u0002\u049e\u04a2\u0007",
    "\u0004\u0002\u0002\u049f\u04a1\u0005\n\u0006\u0002\u04a0\u049f\u0003",
    "\u0002\u0002\u0002\u04a1\u04a4\u0003\u0002\u0002\u0002\u04a2\u04a0\u0003",
    "\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a5\u0003",
    "\u0002\u0002\u0002\u04a4\u04a2\u0003\u0002\u0002\u0002\u04a5\u04a6\u0007",
    "\u0006\u0002\u0002\u04a6\u04c3\b\u001e\u0001\u0002\u04a7\u04a8\u0007",
    "I\u0002\u0002\u04a8\u04a9\b\u001e\u0001\u0002\u04a9\u04b3\u0007\u0004",
    "\u0002\u0002\u04aa\u04b0\u0005\u00b2Z\u0002\u04ab\u04ac\u0007\u0005",
    "\u0002\u0002\u04ac\u04ad\b\u001e\u0001\u0002\u04ad\u04af\u0005\u00b2",
    "Z\u0002\u04ae\u04ab\u0003\u0002\u0002\u0002\u04af\u04b2\u0003\u0002",
    "\u0002\u0002\u04b0\u04ae\u0003\u0002\u0002\u0002\u04b0\u04b1\u0003\u0002",
    "\u0002\u0002\u04b1\u04b4\u0003\u0002\u0002\u0002\u04b2\u04b0\u0003\u0002",
    "\u0002\u0002\u04b3\u04aa\u0003\u0002\u0002\u0002\u04b3\u04b4\u0003\u0002",
    "\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5\u04b6\u0007\u0006",
    "\u0002\u0002\u04b6\u04c3\b\u001e\u0001\u0002\u04b7\u04b8\u0007@\u0002",
    "\u0002\u04b8\u04b9\b\u001e\u0001\u0002\u04b9\u04bd\u0007\u0004\u0002",
    "\u0002\u04ba\u04bc\u0005&\u0014\u0002\u04bb\u04ba\u0003\u0002\u0002",
    "\u0002\u04bc\u04bf\u0003\u0002\u0002\u0002\u04bd\u04bb\u0003\u0002\u0002",
    "\u0002\u04bd\u04be\u0003\u0002\u0002\u0002\u04be\u04c0\u0003\u0002\u0002",
    "\u0002\u04bf\u04bd\u0003\u0002\u0002\u0002\u04c0\u04c1\u0007\u0006\u0002",
    "\u0002\u04c1\u04c3\b\u001e\u0001\u0002\u04c2\u046f\u0003\u0002\u0002",
    "\u0002\u04c2\u047b\u0003\u0002\u0002\u0002\u04c2\u0488\u0003\u0002\u0002",
    "\u0002\u04c2\u0493\u0003\u0002\u0002\u0002\u04c2\u0494\u0003\u0002\u0002",
    "\u0002\u04c2\u049c\u0003\u0002\u0002\u0002\u04c2\u04a7\u0003\u0002\u0002",
    "\u0002\u04c2\u04b7\u0003\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002",
    "\u0002\u04c3\u04c6\u0003\u0002\u0002\u0002\u04c4\u04c7\u0005\u000e\b",
    "\u0002\u04c5\u04c7\u0007\u009a\u0002\u0002\u04c6\u04c4\u0003\u0002\u0002",
    "\u0002\u04c6\u04c5\u0003\u0002\u0002\u0002\u04c7\u04c9\u0003\u0002\u0002",
    "\u0002\u04c8\u045e\u0003\u0002\u0002\u0002\u04c8\u0463\u0003\u0002\u0002",
    "\u0002\u04c8\u0465\u0003\u0002\u0002\u0002\u04c9;\u0003\u0002\u0002",
    "\u0002\u04ca\u04cb\u0007\u0081\u0002\u0002\u04cb\u04cc\b\u001f\u0001",
    "\u0002\u04cc\u04cd\u0005\u00dco\u0002\u04cd\u04d0\b\u001f\u0001\u0002",
    "\u04ce\u04cf\u0007<\u0002\u0002\u04cf\u04d1\b\u001f\u0001\u0002\u04d0",
    "\u04ce\u0003\u0002\u0002\u0002\u04d0\u04d1\u0003\u0002\u0002\u0002\u04d1",
    "\u04d2\u0003\u0002\u0002\u0002\u04d2\u04d6\b\u001f\u0001\u0002\u04d3",
    "\u04d5\u0005\u00fe\u0080\u0002\u04d4\u04d3\u0003\u0002\u0002\u0002\u04d5",
    "\u04d8\u0003\u0002\u0002\u0002\u04d6\u04d4\u0003\u0002\u0002\u0002\u04d6",
    "\u04d7\u0003\u0002\u0002\u0002\u04d7\u04d9\u0003\u0002\u0002\u0002\u04d8",
    "\u04d6\u0003\u0002\u0002\u0002\u04d9\u04dc\u0005\f\u0007\u0002\u04da",
    "\u04dd\u0005\u000e\b\u0002\u04db\u04dd\u0007\u009a\u0002\u0002\u04dc",
    "\u04da\u0003\u0002\u0002\u0002\u04dc\u04db\u0003\u0002\u0002\u0002\u04dd",
    "=\u0003\u0002\u0002\u0002\u04de\u04df\u0007K\u0002\u0002\u04df\u04e0",
    "\b \u0001\u0002\u04e0\u04e1\u0005\u00dco\u0002\u04e1\u04e4\b \u0001",
    "\u0002\u04e2\u04e3\u0007<\u0002\u0002\u04e3\u04e5\b \u0001\u0002\u04e4",
    "\u04e2\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003\u0002\u0002\u0002\u04e5",
    "\u04e6\u0003\u0002\u0002\u0002\u04e6\u04ea\b \u0001\u0002\u04e7\u04e9",
    "\u0005\u00fe\u0080\u0002\u04e8\u04e7\u0003\u0002\u0002\u0002\u04e9\u04ec",
    "\u0003\u0002\u0002\u0002\u04ea\u04e8\u0003\u0002\u0002\u0002\u04ea\u04eb",
    "\u0003\u0002\u0002\u0002\u04eb\u04ed\u0003\u0002\u0002\u0002\u04ec\u04ea",
    "\u0003\u0002\u0002\u0002\u04ed\u04f0\u0005\f\u0007\u0002\u04ee\u04f1",
    "\u0005\u000e\b\u0002\u04ef\u04f1\u0007\u009a\u0002\u0002\u04f0\u04ee",
    "\u0003\u0002\u0002\u0002\u04f0\u04ef\u0003\u0002\u0002\u0002\u04f1?",
    "\u0003\u0002\u0002\u0002\u04f2\u04f3\t\u0003\u0002\u0002\u04f3\u04f4",
    "\b!\u0001\u0002\u04f4\u04f5\u0005\u00dco\u0002\u04f5\u0511\b!\u0001",
    "\u0002\u04f6\u04f7\u0007<\u0002\u0002\u04f7\u04fb\b!\u0001\u0002\u04f8",
    "\u04fa\u0005\u0100\u0081\u0002\u04f9\u04f8\u0003\u0002\u0002\u0002\u04fa",
    "\u04fd\u0003\u0002\u0002\u0002\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fb",
    "\u04fc\u0003\u0002\u0002\u0002\u04fc\u0507\u0003\u0002\u0002\u0002\u04fd",
    "\u04fb\u0003\u0002\u0002\u0002\u04fe\u0503\u0005^0\u0002\u04ff\u0500",
    "\u0007\u0005\u0002\u0002\u0500\u0502\u0005^0\u0002\u0501\u04ff\u0003",
    "\u0002\u0002\u0002\u0502\u0505\u0003\u0002\u0002\u0002\u0503\u0501\u0003",
    "\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u0508\u0003",
    "\u0002\u0002\u0002\u0505\u0503\u0003\u0002\u0002\u0002\u0506\u0508\u0005",
    "B\"\u0002\u0507\u04fe\u0003\u0002\u0002\u0002\u0507\u0506\u0003\u0002",
    "\u0002\u0002\u0508\u0512\u0003\u0002\u0002\u0002\u0509\u050d\b!\u0001",
    "\u0002\u050a\u050c\u0005\u0100\u0081\u0002\u050b\u050a\u0003\u0002\u0002",
    "\u0002\u050c\u050f\u0003\u0002\u0002\u0002\u050d\u050b\u0003\u0002\u0002",
    "\u0002\u050d\u050e\u0003\u0002\u0002\u0002\u050e\u0510\u0003\u0002\u0002",
    "\u0002\u050f\u050d\u0003\u0002\u0002\u0002\u0510\u0512\u0005B\"\u0002",
    "\u0511\u04f6\u0003\u0002\u0002\u0002\u0511\u0509\u0003\u0002\u0002\u0002",
    "\u0512\u0515\u0003\u0002\u0002\u0002\u0513\u0516\u0005\u000e\b\u0002",
    "\u0514\u0516\u0007\u009a\u0002\u0002\u0515\u0513\u0003\u0002\u0002\u0002",
    "\u0515\u0514\u0003\u0002\u0002\u0002\u0516A\u0003\u0002\u0002\u0002",
    "\u0517\u0518\u0007\u0004\u0002\u0002\u0518\u051c\b\"\u0001\u0002\u0519",
    "\u051b\u0005L\'\u0002\u051a\u0519\u0003\u0002\u0002\u0002\u051b\u051e",
    "\u0003\u0002\u0002\u0002\u051c\u051a\u0003\u0002\u0002\u0002\u051c\u051d",
    "\u0003\u0002\u0002\u0002\u051d\u051f\u0003\u0002\u0002\u0002\u051e\u051c",
    "\u0003\u0002\u0002\u0002\u051f\u0520\u0007\u0006\u0002\u0002\u0520\u052c",
    "\b\"\u0001\u0002\u0521\u0522\u0007@\u0002\u0002\u0522\u0523\b\"\u0001",
    "\u0002\u0523\u0527\u0007\u0004\u0002\u0002\u0524\u0526\u0005&\u0014",
    "\u0002\u0525\u0524\u0003\u0002\u0002\u0002\u0526\u0529\u0003\u0002\u0002",
    "\u0002\u0527\u0525\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002",
    "\u0002\u0528\u052a\u0003\u0002\u0002\u0002\u0529\u0527\u0003\u0002\u0002",
    "\u0002\u052a\u052b\u0007\u0006\u0002\u0002\u052b\u052d\b\"\u0001\u0002",
    "\u052c\u0521\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002\u0002\u0002",
    "\u052d\u053a\u0003\u0002\u0002\u0002\u052e\u052f\u0007@\u0002\u0002",
    "\u052f\u0530\b\"\u0001\u0002\u0530\u0534\u0007\u0004\u0002\u0002\u0531",
    "\u0533\u0005&\u0014\u0002\u0532\u0531\u0003\u0002\u0002\u0002\u0533",
    "\u0536\u0003\u0002\u0002\u0002\u0534\u0532\u0003\u0002\u0002\u0002\u0534",
    "\u0535\u0003\u0002\u0002\u0002\u0535\u0537\u0003\u0002\u0002\u0002\u0536",
    "\u0534\u0003\u0002\u0002\u0002\u0537\u0538\u0007\u0006\u0002\u0002\u0538",
    "\u053a\b\"\u0001\u0002\u0539\u0517\u0003\u0002\u0002\u0002\u0539\u052e",
    "\u0003\u0002\u0002\u0002\u0539\u053a\u0003\u0002\u0002\u0002\u053aC",
    "\u0003\u0002\u0002\u0002\u053b\u053c\u0007{\u0002\u0002\u053c\u053d",
    "\b#\u0001\u0002\u053d\u053e\u0005\u00dco\u0002\u053e\u0541\b#\u0001",
    "\u0002\u053f\u0540\u0007<\u0002\u0002\u0540\u0542\b#\u0001\u0002\u0541",
    "\u053f\u0003\u0002\u0002\u0002\u0541\u0542\u0003\u0002\u0002\u0002\u0542",
    "\u0543\u0003\u0002\u0002\u0002\u0543\u0547\b#\u0001\u0002\u0544\u0546",
    "\u0005\u0100\u0081\u0002\u0545\u0544\u0003\u0002\u0002\u0002\u0546\u0549",
    "\u0003\u0002\u0002\u0002\u0547\u0545\u0003\u0002\u0002\u0002\u0547\u0548",
    "\u0003\u0002\u0002\u0002\u0548\u0571\u0003\u0002\u0002\u0002\u0549\u0547",
    "\u0003\u0002\u0002\u0002\u054a\u054b\u0007\u0004\u0002\u0002\u054b\u0555",
    "\b#\u0001\u0002\u054c\u0552\u0005\u00b2Z\u0002\u054d\u054e\u0007\u0005",
    "\u0002\u0002\u054e\u054f\b#\u0001\u0002\u054f\u0551\u0005\u00b2Z\u0002",
    "\u0550\u054d\u0003\u0002\u0002\u0002\u0551\u0554\u0003\u0002\u0002\u0002",
    "\u0552\u0550\u0003\u0002\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002",
    "\u0553\u0556\u0003\u0002\u0002\u0002\u0554\u0552\u0003\u0002\u0002\u0002",
    "\u0555\u054c\u0003\u0002\u0002\u0002\u0555\u0556\u0003\u0002\u0002\u0002",
    "\u0556\u0557\u0003\u0002\u0002\u0002\u0557\u0558\u0007\u0006\u0002\u0002",
    "\u0558\u0564\b#\u0001\u0002\u0559\u055a\u0007@\u0002\u0002\u055a\u055b",
    "\b#\u0001\u0002\u055b\u055f\u0007\u0004\u0002\u0002\u055c\u055e\u0005",
    "&\u0014\u0002\u055d\u055c\u0003\u0002\u0002\u0002\u055e\u0561\u0003",
    "\u0002\u0002\u0002\u055f\u055d\u0003\u0002\u0002\u0002\u055f\u0560\u0003",
    "\u0002\u0002\u0002\u0560\u0562\u0003\u0002\u0002\u0002\u0561\u055f\u0003",
    "\u0002\u0002\u0002\u0562\u0563\u0007\u0006\u0002\u0002\u0563\u0565\b",
    "#\u0001\u0002\u0564\u0559\u0003\u0002\u0002\u0002\u0564\u0565\u0003",
    "\u0002\u0002\u0002\u0565\u0572\u0003\u0002\u0002\u0002\u0566\u0567\u0007",
    "@\u0002\u0002\u0567\u0568\b#\u0001\u0002\u0568\u056c\u0007\u0004\u0002",
    "\u0002\u0569\u056b\u0005&\u0014\u0002\u056a\u0569\u0003\u0002\u0002",
    "\u0002\u056b\u056e\u0003\u0002\u0002\u0002\u056c\u056a\u0003\u0002\u0002",
    "\u0002\u056c\u056d\u0003\u0002\u0002\u0002\u056d\u056f\u0003\u0002\u0002",
    "\u0002\u056e\u056c\u0003\u0002\u0002\u0002\u056f\u0570\u0007\u0006\u0002",
    "\u0002\u0570\u0572\b#\u0001\u0002\u0571\u054a\u0003\u0002\u0002\u0002",
    "\u0571\u0566\u0003\u0002\u0002\u0002\u0571\u0572\u0003\u0002\u0002\u0002",
    "\u0572\u0575\u0003\u0002\u0002\u0002\u0573\u0576\u0005\u000e\b\u0002",
    "\u0574\u0576\u0007\u009a\u0002\u0002\u0575\u0573\u0003\u0002\u0002\u0002",
    "\u0575\u0574\u0003\u0002\u0002\u0002\u0576E\u0003\u0002\u0002\u0002",
    "\u0577\u0578\u0007\u0085\u0002\u0002\u0578\u0579\b$\u0001\u0002\u0579",
    "\u057a\u0005\u00dco\u0002\u057a\u059f\b$\u0001\u0002\u057b\u05a0\u0005",
    "J&\u0002\u057c\u057d\u0007<\u0002\u0002\u057d\u0581\b$\u0001\u0002\u057e",
    "\u0580\u0005\u0100\u0081\u0002\u057f\u057e\u0003\u0002\u0002\u0002\u0580",
    "\u0583\u0003\u0002\u0002\u0002\u0581\u057f\u0003\u0002\u0002\u0002\u0581",
    "\u0582\u0003\u0002\u0002\u0002\u0582\u0599\u0003\u0002\u0002\u0002\u0583",
    "\u0581\u0003\u0002\u0002\u0002\u0584\u0585\u0007\u0004\u0002\u0002\u0585",
    "\u0589\b$\u0001\u0002\u0586\u0588\u0005L\'\u0002\u0587\u0586\u0003\u0002",
    "\u0002\u0002\u0588\u058b\u0003\u0002\u0002\u0002\u0589\u0587\u0003\u0002",
    "\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002\u058a\u058c\u0003\u0002",
    "\u0002\u0002\u058b\u0589\u0003\u0002\u0002\u0002\u058c\u058d\u0007\u0006",
    "\u0002\u0002\u058d\u058e\b$\u0001\u0002\u058e\u058f\b$\u0001\u0002\u058f",
    "\u059a\b$\u0001\u0002\u0590\u059a\u0005\u0088E\u0002\u0591\u0596\u0005",
    "^0\u0002\u0592\u0593\u0007\u0005\u0002\u0002\u0593\u0595\u0005^0\u0002",
    "\u0594\u0592\u0003\u0002\u0002\u0002\u0595\u0598\u0003\u0002\u0002\u0002",
    "\u0596\u0594\u0003\u0002\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002",
    "\u0597\u059a\u0003\u0002\u0002\u0002\u0598\u0596\u0003\u0002\u0002\u0002",
    "\u0599\u0584\u0003\u0002\u0002\u0002\u0599\u0590\u0003\u0002\u0002\u0002",
    "\u0599\u0591\u0003\u0002\u0002\u0002\u0599\u059a\u0003\u0002\u0002\u0002",
    "\u059a\u059d\u0003\u0002\u0002\u0002\u059b\u059e\u0005\u000e\b\u0002",
    "\u059c\u059e\u0007\u009a\u0002\u0002\u059d\u059b\u0003\u0002\u0002\u0002",
    "\u059d\u059c\u0003\u0002\u0002\u0002\u059e\u05a0\u0003\u0002\u0002\u0002",
    "\u059f\u057b\u0003\u0002\u0002\u0002\u059f\u057c\u0003\u0002\u0002\u0002",
    "\u05a0G\u0003\u0002\u0002\u0002\u05a1\u05d3\u0005J&\u0002\u05a2\u05a3",
    "\u0007<\u0002\u0002\u05a3\u05a7\b%\u0001\u0002\u05a4\u05a6\u0005\u0100",
    "\u0081\u0002\u05a5\u05a4\u0003\u0002\u0002\u0002\u05a6\u05a9\u0003\u0002",
    "\u0002\u0002\u05a7\u05a5\u0003\u0002\u0002\u0002\u05a7\u05a8\u0003\u0002",
    "\u0002\u0002\u05a8\u05cf\u0003\u0002\u0002\u0002\u05a9\u05a7\u0003\u0002",
    "\u0002\u0002\u05aa\u05ab\u0007\u0004\u0002\u0002\u05ab\u05af\b%\u0001",
    "\u0002\u05ac\u05ae\u0005L\'\u0002\u05ad\u05ac\u0003\u0002\u0002\u0002",
    "\u05ae\u05b1\u0003\u0002\u0002\u0002\u05af\u05ad\u0003\u0002\u0002\u0002",
    "\u05af\u05b0\u0003\u0002\u0002\u0002\u05b0\u05b2\u0003\u0002\u0002\u0002",
    "\u05b1\u05af\u0003\u0002\u0002\u0002\u05b2\u05b3\u0007\u0006\u0002\u0002",
    "\u05b3\u05b4\b%\u0001\u0002\u05b4\u05b5\b%\u0001\u0002\u05b5\u05d0\b",
    "%\u0001\u0002\u05b6\u05b7\u0007R\u0002\u0002\u05b7\u05b8\b%\u0001\u0002",
    "\u05b8\u05bc\u0007\u0004\u0002\u0002\u05b9\u05bb\u0005L\'\u0002\u05ba",
    "\u05b9\u0003\u0002\u0002\u0002\u05bb\u05be\u0003\u0002\u0002\u0002\u05bc",
    "\u05ba\u0003\u0002\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd",
    "\u05bf\u0003\u0002\u0002\u0002\u05be\u05bc\u0003\u0002\u0002\u0002\u05bf",
    "\u05c0\u0007\u0006\u0002\u0002\u05c0\u05c1\b%\u0001\u0002\u05c1\u05c2",
    "\b%\u0001\u0002\u05c2\u05d0\b%\u0001\u0002\u05c3\u05c4\u0007V\u0002",
    "\u0002\u05c4\u05c5\b%\u0001\u0002\u05c5\u05c9\u0007\u0004\u0002\u0002",
    "\u05c6\u05c8\u0005,\u0017\u0002\u05c7\u05c6\u0003\u0002\u0002\u0002",
    "\u05c8\u05cb\u0003\u0002\u0002\u0002\u05c9\u05c7\u0003\u0002\u0002\u0002",
    "\u05c9\u05ca\u0003\u0002\u0002\u0002\u05ca\u05cc\u0003\u0002\u0002\u0002",
    "\u05cb\u05c9\u0003\u0002\u0002\u0002\u05cc\u05cd\u0007\u0006\u0002\u0002",
    "\u05cd\u05d0\b%\u0001\u0002\u05ce\u05d0\u0005\u0088E\u0002\u05cf\u05aa",
    "\u0003\u0002\u0002\u0002\u05cf\u05b6\u0003\u0002\u0002\u0002\u05cf\u05c3",
    "\u0003\u0002\u0002\u0002\u05cf\u05ce\u0003\u0002\u0002\u0002\u05cf\u05d0",
    "\u0003\u0002\u0002\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002\u05d1\u05d3",
    "\u0005\u000e\b\u0002\u05d2\u05a1\u0003\u0002\u0002\u0002\u05d2\u05a2",
    "\u0003\u0002\u0002\u0002\u05d3I\u0003\u0002\u0002\u0002\u05d4\u05d8",
    "\b&\u0001\u0002\u05d5\u05d7\u0005\u0100\u0081\u0002\u05d6\u05d5\u0003",
    "\u0002\u0002\u0002\u05d7\u05da\u0003\u0002\u0002\u0002\u05d8\u05d6\u0003",
    "\u0002\u0002\u0002\u05d8\u05d9\u0003\u0002\u0002\u0002\u05d9\u05e7\u0003",
    "\u0002\u0002\u0002\u05da\u05d8\u0003\u0002\u0002\u0002\u05db\u05dc\u0007",
    "\u0004\u0002\u0002\u05dc\u05e0\b&\u0001\u0002\u05dd\u05df\u0005L\'\u0002",
    "\u05de\u05dd\u0003\u0002\u0002\u0002\u05df\u05e2\u0003\u0002\u0002\u0002",
    "\u05e0\u05de\u0003\u0002\u0002\u0002\u05e0\u05e1\u0003\u0002\u0002\u0002",
    "\u05e1\u05e3\u0003\u0002\u0002\u0002\u05e2\u05e0\u0003\u0002\u0002\u0002",
    "\u05e3\u05e4\u0007\u0006\u0002\u0002\u05e4\u05e5\b&\u0001\u0002\u05e5",
    "\u05e6\b&\u0001\u0002\u05e6\u05e8\b&\u0001\u0002\u05e7\u05db\u0003\u0002",
    "\u0002\u0002\u05e7\u05e8\u0003\u0002\u0002\u0002\u05e8\u05e9\u0003\u0002",
    "\u0002\u0002\u05e9\u05ea\u0005\u000e\b\u0002\u05eaK\u0003\u0002\u0002",
    "\u0002\u05eb\u05ef\b\'\u0001\u0002\u05ec\u05ee\u0005\u0100\u0081\u0002",
    "\u05ed\u05ec\u0003\u0002\u0002\u0002\u05ee\u05f1\u0003\u0002\u0002\u0002",
    "\u05ef\u05ed\u0003\u0002\u0002\u0002\u05ef\u05f0\u0003\u0002\u0002\u0002",
    "\u05f0\u05f5\u0003\u0002\u0002\u0002\u05f1\u05ef\u0003\u0002\u0002\u0002",
    "\u05f2\u05f3\u0007\\\u0002\u0002\u05f3\u05f6\u0005N(\u0002\u05f4\u05f6",
    "\u00050\u0019\u0002\u05f5\u05f2\u0003\u0002\u0002\u0002\u05f5\u05f4",
    "\u0003\u0002\u0002\u0002\u05f6M\u0003\u0002\u0002\u0002\u05f7\u05fa",
    "\b(\u0001\u0002\u05f8\u05f9\u0007\u008e\u0002\u0002\u05f9\u05fb\b(\u0001",
    "\u0002\u05fa\u05f8\u0003\u0002\u0002\u0002\u05fa\u05fb\u0003\u0002\u0002",
    "\u0002\u05fb\u05fc\u0003\u0002\u0002\u0002\u05fc\u05fd\u0005\u011a\u008e",
    "\u0002\u05fd\u05fe\b(\u0001\u0002\u05fe\u05ff\u0005H%\u0002\u05ffO\u0003",
    "\u0002\u0002\u0002\u0600\u0649\u0005\u00dco\u0002\u0601\u0602\u0007",
    "\u0007\u0002\u0002\u0602\u0603\u0005\u00dco\u0002\u0603\u0606\b)\u0001",
    "\u0002\u0604\u0605\u0007<\u0002\u0002\u0605\u0607\b)\u0001\u0002\u0606",
    "\u0604\u0003\u0002\u0002\u0002\u0606\u0607\u0003\u0002\u0002\u0002\u0607",
    "\u0608\u0003\u0002\u0002\u0002\u0608\u060c\b)\u0001\u0002\u0609\u060b",
    "\u0005\u0100\u0081\u0002\u060a\u0609\u0003\u0002\u0002\u0002\u060b\u060e",
    "\u0003\u0002\u0002\u0002\u060c\u060a\u0003\u0002\u0002\u0002\u060c\u060d",
    "\u0003\u0002\u0002\u0002\u060d\u0613\u0003\u0002\u0002\u0002\u060e\u060c",
    "\u0003\u0002\u0002\u0002\u060f\u0610\u0005T+\u0002\u0610\u0611\u0005",
    "\u0010\t\u0002\u0611\u0614\u0003\u0002\u0002\u0002\u0612\u0614\u0005",
    "\u000e\b\u0002\u0613\u060f\u0003\u0002\u0002\u0002\u0613\u0612\u0003",
    "\u0002\u0002\u0002\u0614\u064a\u0003\u0002\u0002\u0002\u0615\u0618\b",
    ")\u0001\u0002\u0616\u0617\u0007<\u0002\u0002\u0617\u0619\b)\u0001\u0002",
    "\u0618\u0616\u0003\u0002\u0002\u0002\u0618\u0619\u0003\u0002\u0002\u0002",
    "\u0619\u061a\u0003\u0002\u0002\u0002\u061a\u061e\b)\u0001\u0002\u061b",
    "\u061d\u0005\u0100\u0081\u0002\u061c\u061b\u0003\u0002\u0002\u0002\u061d",
    "\u0620\u0003\u0002\u0002\u0002\u061e\u061c\u0003\u0002\u0002\u0002\u061e",
    "\u061f\u0003\u0002\u0002\u0002\u061f\u0647\u0003\u0002\u0002\u0002\u0620",
    "\u061e\u0003\u0002\u0002\u0002\u0621\u0623\u0005T+\u0002\u0622\u0624",
    "\u0005R*\u0002\u0623\u0622\u0003\u0002\u0002\u0002\u0623\u0624\u0003",
    "\u0002\u0002\u0002\u0624\u0625\u0003\u0002\u0002\u0002\u0625\u0626\u0005",
    "\u0010\t\u0002\u0626\u0648\u0003\u0002\u0002\u0002\u0627\u0628\u0005",
    "R*\u0002\u0628\u0629\u0005\u0010\t\u0002\u0629\u0648\u0003\u0002\u0002",
    "\u0002\u062a\u062b\u0007\b\u0002\u0002\u062b\u062c\b)\u0001\u0002\u062c",
    "\u0632\u0005\\/\u0002\u062d\u062e\u0007\u0005\u0002\u0002\u062e\u062f",
    "\b)\u0001\u0002\u062f\u0631\u0005\\/\u0002\u0630\u062d\u0003\u0002\u0002",
    "\u0002\u0631\u0634\u0003\u0002\u0002\u0002\u0632\u0630\u0003\u0002\u0002",
    "\u0002\u0632\u0633\u0003\u0002\u0002\u0002\u0633\u0635\u0003\u0002\u0002",
    "\u0002\u0634\u0632\u0003\u0002\u0002\u0002\u0635\u0636\u0007\t\u0002",
    "\u0002\u0636\u0637\b)\u0001\u0002\u0637\u0643\b)\u0001\u0002\u0638\u063a",
    "\u0005T+\u0002\u0639\u063b\u0005R*\u0002\u063a\u0639\u0003\u0002\u0002",
    "\u0002\u063a\u063b\u0003\u0002\u0002\u0002\u063b\u063c\u0003\u0002\u0002",
    "\u0002\u063c\u063d\u0005\u0010\t\u0002\u063d\u0644\u0003\u0002\u0002",
    "\u0002\u063e\u063f\u0005R*\u0002\u063f\u0640\u0005\u0010\t\u0002\u0640",
    "\u0644\u0003\u0002\u0002\u0002\u0641\u0644\u0005Z.\u0002\u0642\u0644",
    "\u0005\u000e\b\u0002\u0643\u0638\u0003\u0002\u0002\u0002\u0643\u063e",
    "\u0003\u0002\u0002\u0002\u0643\u0641\u0003\u0002\u0002\u0002\u0643\u0642",
    "\u0003\u0002\u0002\u0002\u0644\u0648\u0003\u0002\u0002\u0002\u0645\u0648",
    "\u0005Z.\u0002\u0646\u0648\u0005\u000e\b\u0002\u0647\u0621\u0003\u0002",
    "\u0002\u0002\u0647\u0627\u0003\u0002\u0002\u0002\u0647\u062a\u0003\u0002",
    "\u0002\u0002\u0647\u0645\u0003\u0002\u0002\u0002\u0647\u0646\u0003\u0002",
    "\u0002\u0002\u0648\u064a\u0003\u0002\u0002\u0002\u0649\u0601\u0003\u0002",
    "\u0002\u0002\u0649\u0615\u0003\u0002\u0002\u0002\u064aQ\u0003\u0002",
    "\u0002\u0002\u064b\u064c\u0007@\u0002\u0002\u064c\u064d\b*\u0001\u0002",
    "\u064d\u0651\u0007\u0004\u0002\u0002\u064e\u0650\u0005X-\u0002\u064f",
    "\u064e\u0003\u0002\u0002\u0002\u0650\u0653\u0003\u0002\u0002\u0002\u0651",
    "\u064f\u0003\u0002\u0002\u0002\u0651\u0652\u0003\u0002\u0002\u0002\u0652",
    "\u0654\u0003\u0002\u0002\u0002\u0653\u0651\u0003\u0002\u0002\u0002\u0654",
    "\u0655\u0007\u0006\u0002\u0002\u0655\u0656\b*\u0001\u0002\u0656\u0657",
    "\b*\u0001\u0002\u0657S\u0003\u0002\u0002\u0002\u0658\u0659\u0007\u0004",
    "\u0002\u0002\u0659\u065d\b+\u0001\u0002\u065a\u065c\u0005V,\u0002\u065b",
    "\u065a\u0003\u0002\u0002\u0002\u065c\u065f\u0003\u0002\u0002\u0002\u065d",
    "\u065b\u0003\u0002\u0002\u0002\u065d\u065e\u0003\u0002\u0002\u0002\u065e",
    "\u0660\u0003\u0002\u0002\u0002\u065f\u065d\u0003\u0002\u0002\u0002\u0660",
    "\u0661\u0007\u0006\u0002\u0002\u0661\u0662\b+\u0001\u0002\u0662\u0663",
    "\b+\u0001\u0002\u0663U\u0003\u0002\u0002\u0002\u0664\u0668\b,\u0001",
    "\u0002\u0665\u0667\u0005\u0100\u0081\u0002\u0666\u0665\u0003\u0002\u0002",
    "\u0002\u0667\u066a\u0003\u0002\u0002\u0002\u0668\u0666\u0003\u0002\u0002",
    "\u0002\u0668\u0669\u0003\u0002\u0002\u0002\u0669\u066b\u0003\u0002\u0002",
    "\u0002\u066a\u0668\u0003\u0002\u0002\u0002\u066b\u066c\u0005\u011a\u008e",
    "\u0002\u066c\u0670\b,\u0001\u0002\u066d\u066f\u0005\u0100\u0081\u0002",
    "\u066e\u066d\u0003\u0002\u0002\u0002\u066f\u0672\u0003\u0002\u0002\u0002",
    "\u0670\u066e\u0003\u0002\u0002\u0002\u0670\u0671\u0003\u0002\u0002\u0002",
    "\u0671\u0680\u0003\u0002\u0002\u0002\u0672\u0670\u0003\u0002\u0002\u0002",
    "\u0673\u0674\u0007\u0004\u0002\u0002\u0674\u0678\b,\u0001\u0002\u0675",
    "\u0677\u0005V,\u0002\u0676\u0675\u0003\u0002\u0002\u0002\u0677\u067a",
    "\u0003\u0002\u0002\u0002\u0678\u0676\u0003\u0002\u0002\u0002\u0678\u0679",
    "\u0003\u0002\u0002\u0002\u0679\u067b\u0003\u0002\u0002\u0002\u067a\u0678",
    "\u0003\u0002\u0002\u0002\u067b\u067c\u0007\u0006\u0002\u0002\u067c\u067d",
    "\b,\u0001\u0002\u067d\u067e\b,\u0001\u0002\u067e\u0681\u0005\u0010\t",
    "\u0002\u067f\u0681\u0005\u000e\b\u0002\u0680\u0673\u0003\u0002\u0002",
    "\u0002\u0680\u067f\u0003\u0002\u0002\u0002\u0681W\u0003\u0002\u0002",
    "\u0002\u0682\u0686\b-\u0001\u0002\u0683\u0685\u0005\u0100\u0081\u0002",
    "\u0684\u0683\u0003\u0002\u0002\u0002\u0685\u0688\u0003\u0002\u0002\u0002",
    "\u0686\u0684\u0003\u0002\u0002\u0002\u0686\u0687\u0003\u0002\u0002\u0002",
    "\u0687\u0689\u0003\u0002\u0002\u0002\u0688\u0686\u0003\u0002\u0002\u0002",
    "\u0689\u068a\u0005\u011a\u008e\u0002\u068a\u068e\b-\u0001\u0002\u068b",
    "\u068d\u0005\u0100\u0081\u0002\u068c\u068b\u0003\u0002\u0002\u0002\u068d",
    "\u0690\u0003\u0002\u0002\u0002\u068e\u068c\u0003\u0002\u0002\u0002\u068e",
    "\u068f\u0003\u0002\u0002\u0002\u068f\u06a0\u0003\u0002\u0002\u0002\u0690",
    "\u068e\u0003\u0002\u0002\u0002\u0691\u0692\u0007\b\u0002\u0002\u0692",
    "\u0693\b-\u0001\u0002\u0693\u0699\u0005\\/\u0002\u0694\u0695\u0007\u0005",
    "\u0002\u0002\u0695\u0696\b-\u0001\u0002\u0696\u0698\u0005\\/\u0002\u0697",
    "\u0694\u0003\u0002\u0002\u0002\u0698\u069b\u0003\u0002\u0002\u0002\u0699",
    "\u0697\u0003\u0002\u0002\u0002\u0699\u069a\u0003\u0002\u0002\u0002\u069a",
    "\u069c\u0003\u0002\u0002\u0002\u069b\u0699\u0003\u0002\u0002\u0002\u069c",
    "\u069d\u0007\t\u0002\u0002\u069d\u069e\b-\u0001\u0002\u069e\u069f\b",
    "-\u0001\u0002\u069f\u06a1\u0003\u0002\u0002\u0002\u06a0\u0691\u0003",
    "\u0002\u0002\u0002\u06a0\u06a1\u0003\u0002\u0002\u0002\u06a1\u06a4\u0003",
    "\u0002\u0002\u0002\u06a2\u06a5\u0005Z.\u0002\u06a3\u06a5\u0005\u000e",
    "\b\u0002\u06a4\u06a2\u0003\u0002\u0002\u0002\u06a4\u06a3\u0003\u0002",
    "\u0002\u0002\u06a5Y\u0003\u0002\u0002\u0002\u06a6\u06a7\u0007}\u0002",
    "\u0002\u06a7\u06a8\b.\u0001\u0002\u06a8\u06ac\b.\u0001\u0002\u06a9\u06ab",
    "\u0005\u0100\u0081\u0002\u06aa\u06a9\u0003\u0002\u0002\u0002\u06ab\u06ae",
    "\u0003\u0002\u0002\u0002\u06ac\u06aa\u0003\u0002\u0002\u0002\u06ac\u06ad",
    "\u0003\u0002\u0002\u0002\u06ad\u06bc\u0003\u0002\u0002\u0002\u06ae\u06ac",
    "\u0003\u0002\u0002\u0002\u06af\u06b0\u0007\u0004\u0002\u0002\u06b0\u06b4",
    "\b.\u0001\u0002\u06b1\u06b3\u0005V,\u0002\u06b2\u06b1\u0003\u0002\u0002",
    "\u0002\u06b3\u06b6\u0003\u0002\u0002\u0002\u06b4\u06b2\u0003\u0002\u0002",
    "\u0002\u06b4\u06b5\u0003\u0002\u0002\u0002\u06b5\u06b7\u0003\u0002\u0002",
    "\u0002\u06b6\u06b4\u0003\u0002\u0002\u0002\u06b7\u06b8\u0007\u0006\u0002",
    "\u0002\u06b8\u06b9\b.\u0001\u0002\u06b9\u06ba\b.\u0001\u0002\u06ba\u06bd",
    "\u0005\u0010\t\u0002\u06bb\u06bd\u0005\u000e\b\u0002\u06bc\u06af\u0003",
    "\u0002\u0002\u0002\u06bc\u06bb\u0003\u0002\u0002\u0002\u06bd[\u0003",
    "\u0002\u0002\u0002\u06be\u06c2\b/\u0001\u0002\u06bf\u06c1\u0005\u0100",
    "\u0081\u0002\u06c0\u06bf\u0003\u0002\u0002\u0002\u06c1\u06c4\u0003\u0002",
    "\u0002\u0002\u06c2\u06c0\u0003\u0002\u0002\u0002\u06c2\u06c3\u0003\u0002",
    "\u0002\u0002\u06c3\u06c5\u0003\u0002\u0002\u0002\u06c4\u06c2\u0003\u0002",
    "\u0002\u0002\u06c5\u06c6\u0005\u011a\u008e\u0002\u06c6\u06ca\b/\u0001",
    "\u0002\u06c7\u06c9\u0005\u0100\u0081\u0002\u06c8\u06c7\u0003\u0002\u0002",
    "\u0002\u06c9\u06cc\u0003\u0002\u0002\u0002\u06ca\u06c8\u0003\u0002\u0002",
    "\u0002\u06ca\u06cb\u0003\u0002\u0002\u0002\u06cb]\u0003\u0002\u0002",
    "\u0002\u06cc\u06ca\u0003\u0002\u0002\u0002\u06cd\u06ce\u0005\u00dco",
    "\u0002\u06ce\u06cf\b0\u0001\u0002\u06cf_\u0003\u0002\u0002\u0002\u06d0",
    "\u06d4\u0005h5\u0002\u06d1\u06d2\u0007\u0007\u0002\u0002\u06d2\u06d4",
    "\u0005d3\u0002\u06d3\u06d0\u0003\u0002\u0002\u0002\u06d3\u06d1\u0003",
    "\u0002\u0002\u0002\u06d4a\u0003\u0002\u0002\u0002\u06d5\u06d6\u0007",
    "}\u0002\u0002\u06d6\u06d7\b2\u0001\u0002\u06d7\u06db\b2\u0001\u0002",
    "\u06d8\u06da\u0005\u0100\u0081\u0002\u06d9\u06d8\u0003\u0002\u0002\u0002",
    "\u06da\u06dd\u0003\u0002\u0002\u0002\u06db\u06d9\u0003\u0002\u0002\u0002",
    "\u06db\u06dc\u0003\u0002\u0002\u0002\u06dc\u06de\u0003\u0002\u0002\u0002",
    "\u06dd\u06db\u0003\u0002\u0002\u0002\u06de\u06df\u0005d3\u0002\u06df",
    "c\u0003\u0002\u0002\u0002\u06e0\u06e2\u0005h5\u0002\u06e1\u06e3\u0005",
    "~@\u0002\u06e2\u06e1\u0003\u0002\u0002\u0002\u06e2\u06e3\u0003\u0002",
    "\u0002\u0002\u06e3\u070e\u0003\u0002\u0002\u0002\u06e4\u070e\u0005l",
    "7\u0002\u06e5\u06e7\u0005\u0082B\u0002\u06e6\u06e8\u0005~@\u0002\u06e7",
    "\u06e6\u0003\u0002\u0002\u0002\u06e7\u06e8\u0003\u0002\u0002\u0002\u06e8",
    "\u06f7\u0003\u0002\u0002\u0002\u06e9\u06ea\u0007V\u0002\u0002\u06ea",
    "\u06eb\u0007\u0004\u0002\u0002\u06eb\u06ef\b3\u0001\u0002\u06ec\u06ee",
    "\u0005,\u0017\u0002\u06ed\u06ec\u0003\u0002\u0002\u0002\u06ee\u06f1",
    "\u0003\u0002\u0002\u0002\u06ef\u06ed\u0003\u0002\u0002\u0002\u06ef\u06f0",
    "\u0003\u0002\u0002\u0002\u06f0\u06f2\u0003\u0002\u0002\u0002\u06f1\u06ef",
    "\u0003\u0002\u0002\u0002\u06f2\u06f3\u0007\u0006\u0002\u0002\u06f3\u06f5",
    "\b3\u0001\u0002\u06f4\u06f6\u0005~@\u0002\u06f5\u06f4\u0003\u0002\u0002",
    "\u0002\u06f5\u06f6\u0003\u0002\u0002\u0002\u06f6\u06f8\u0003\u0002\u0002",
    "\u0002\u06f7\u06e9\u0003\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002",
    "\u0002\u06f8\u070e\u0003\u0002\u0002\u0002\u06f9\u06fb\u0005\u0084C",
    "\u0002\u06fa\u06fc\u0005~@\u0002\u06fb\u06fa\u0003\u0002\u0002\u0002",
    "\u06fb\u06fc\u0003\u0002\u0002\u0002\u06fc\u070b\u0003\u0002\u0002\u0002",
    "\u06fd\u06fe\u0007V\u0002\u0002\u06fe\u06ff\u0007\u0004\u0002\u0002",
    "\u06ff\u0703\b3\u0001\u0002\u0700\u0702\u0005,\u0017\u0002\u0701\u0700",
    "\u0003\u0002\u0002\u0002\u0702\u0705\u0003\u0002\u0002\u0002\u0703\u0701",
    "\u0003\u0002\u0002\u0002\u0703\u0704\u0003\u0002\u0002\u0002\u0704\u0706",
    "\u0003\u0002\u0002\u0002\u0705\u0703\u0003\u0002\u0002\u0002\u0706\u0707",
    "\u0007\u0006\u0002\u0002\u0707\u0709\b3\u0001\u0002\u0708\u070a\u0005",
    "~@\u0002\u0709\u0708\u0003\u0002\u0002\u0002\u0709\u070a\u0003\u0002",
    "\u0002\u0002\u070a\u070c\u0003\u0002\u0002\u0002\u070b\u06fd\u0003\u0002",
    "\u0002\u0002\u070b\u070c\u0003\u0002\u0002\u0002\u070c\u070e\u0003\u0002",
    "\u0002\u0002\u070d\u06e0\u0003\u0002\u0002\u0002\u070d\u06e4\u0003\u0002",
    "\u0002\u0002\u070d\u06e5\u0003\u0002\u0002\u0002\u070d\u06f9\u0003\u0002",
    "\u0002\u0002\u070ee\u0003\u0002\u0002\u0002\u070f\u0714\u0005h5\u0002",
    "\u0710\u0711\u0005~@\u0002\u0711\u0712\u0005\u000e\b\u0002\u0712\u0715",
    "\u0003\u0002\u0002\u0002\u0713\u0715\u0005\u0010\t\u0002\u0714\u0710",
    "\u0003\u0002\u0002\u0002\u0714\u0713\u0003\u0002\u0002\u0002\u0715\u07bb",
    "\u0003\u0002\u0002\u0002\u0716\u0717\u0007\u0007\u0002\u0002\u0717\u07b8",
    "\b4\u0001\u0002\u0718\u071d\u0005h5\u0002\u0719\u071a\u0005~@\u0002",
    "\u071a\u071b\u0005\u000e\b\u0002\u071b\u071e\u0003\u0002\u0002\u0002",
    "\u071c\u071e\u0005\u0010\t\u0002\u071d\u0719\u0003\u0002\u0002\u0002",
    "\u071d\u071c\u0003\u0002\u0002\u0002\u071e\u07b9\u0003\u0002\u0002\u0002",
    "\u071f\u0725\u0005n8\u0002\u0720\u0726\u0005v<\u0002\u0721\u0726\u0005",
    "t;\u0002\u0722\u0723\u0005\u00dco\u0002\u0723\u0724\b4\u0001\u0002\u0724",
    "\u0726\u0003\u0002\u0002\u0002\u0725\u0720\u0003\u0002\u0002\u0002\u0725",
    "\u0721\u0003\u0002\u0002\u0002\u0725\u0722\u0003\u0002\u0002\u0002\u0726",
    "\u0728\u0003\u0002\u0002\u0002\u0727\u0729\u0005p9\u0002\u0728\u0727",
    "\u0003\u0002\u0002\u0002\u0728\u0729\u0003\u0002\u0002\u0002\u0729\u072a",
    "\u0003\u0002\u0002\u0002\u072a\u072b\u0005\u000e\b\u0002\u072b\u07b9",
    "\u0003\u0002\u0002\u0002\u072c\u072d\u0007\u0092\u0002\u0002\u072d\u072e",
    "\b4\u0001\u0002\u072e\u0733\u0005h5\u0002\u072f\u0730\u0005~@\u0002",
    "\u0730\u0731\u0005\u000e\b\u0002\u0731\u0734\u0003\u0002\u0002\u0002",
    "\u0732\u0734\u0005\u0010\t\u0002\u0733\u072f\u0003\u0002\u0002\u0002",
    "\u0733\u0732\u0003\u0002\u0002\u0002\u0734\u07b9\u0003\u0002\u0002\u0002",
    "\u0735\u0736\u0007D\u0002\u0002\u0736\u0737\u00076\u0002\u0002\u0737",
    "\u073b\b4\u0001\u0002\u0738\u0739\u0007n\u0002\u0002\u0739\u073b\b4",
    "\u0001\u0002\u073a\u0735\u0003\u0002\u0002\u0002\u073a\u0738\u0003\u0002",
    "\u0002\u0002\u073b\u0764\u0003\u0002\u0002\u0002\u073c\u0741\u0005h",
    "5\u0002\u073d\u073e\u0005~@\u0002\u073e\u073f\u0005\u000e\b\u0002\u073f",
    "\u0742\u0003\u0002\u0002\u0002\u0740\u0742\u0005\u0010\t\u0002\u0741",
    "\u073d\u0003\u0002\u0002\u0002\u0741\u0740\u0003\u0002\u0002\u0002\u0742",
    "\u0765\u0003\u0002\u0002\u0002\u0743\u0746\u0005\u0082B\u0002\u0744",
    "\u0746\u0005\u0084C\u0002\u0745\u0743\u0003\u0002\u0002\u0002\u0745",
    "\u0744\u0003\u0002\u0002\u0002\u0746\u0748\u0003\u0002\u0002\u0002\u0747",
    "\u0749\u0005~@\u0002\u0748\u0747\u0003\u0002\u0002\u0002\u0748\u0749",
    "\u0003\u0002\u0002\u0002\u0749\u074a\u0003\u0002\u0002\u0002\u074a\u074e",
    "\b4\u0001\u0002\u074b\u074d\u0005\u0100\u0081\u0002\u074c\u074b\u0003",
    "\u0002\u0002\u0002\u074d\u0750\u0003\u0002\u0002\u0002\u074e\u074c\u0003",
    "\u0002\u0002\u0002\u074e\u074f\u0003\u0002\u0002\u0002\u074f\u0760\u0003",
    "\u0002\u0002\u0002\u0750\u074e\u0003\u0002\u0002\u0002\u0751\u0752\b",
    "4\u0001\u0002\u0752\u0753\u0007V\u0002\u0002\u0753\u0754\u0007\u0004",
    "\u0002\u0002\u0754\u0758\b4\u0001\u0002\u0755\u0757\u0005,\u0017\u0002",
    "\u0756\u0755\u0003\u0002\u0002\u0002\u0757\u075a\u0003\u0002\u0002\u0002",
    "\u0758\u0756\u0003\u0002\u0002\u0002\u0758\u0759\u0003\u0002\u0002\u0002",
    "\u0759\u075b\u0003\u0002\u0002\u0002\u075a\u0758\u0003\u0002\u0002\u0002",
    "\u075b\u075c\u0007\u0006\u0002\u0002\u075c\u075e\b4\u0001\u0002\u075d",
    "\u075f\u0005~@\u0002\u075e\u075d\u0003\u0002\u0002\u0002\u075e\u075f",
    "\u0003\u0002\u0002\u0002\u075f\u0761\u0003\u0002\u0002\u0002\u0760\u0751",
    "\u0003\u0002\u0002\u0002\u0760\u0761\u0003\u0002\u0002\u0002\u0761\u0762",
    "\u0003\u0002\u0002\u0002\u0762\u0763\u0005\u000e\b\u0002\u0763\u0765",
    "\u0003\u0002\u0002\u0002\u0764\u073c\u0003\u0002\u0002\u0002\u0764\u0745",
    "\u0003\u0002\u0002\u0002\u0765\u07b9\u0003\u0002\u0002\u0002\u0766\u0768",
    "\u0005\u0082B\u0002\u0767\u0769\u00056\u001c\u0002\u0768\u0767\u0003",
    "\u0002\u0002\u0002\u0768\u0769\u0003\u0002\u0002\u0002\u0769\u076a\u0003",
    "\u0002\u0002\u0002\u076a\u076e\b4\u0001\u0002\u076b\u076d\u0005\u0100",
    "\u0081\u0002\u076c\u076b\u0003\u0002\u0002\u0002\u076d\u0770\u0003\u0002",
    "\u0002\u0002\u076e\u076c\u0003\u0002\u0002\u0002\u076e\u076f\u0003\u0002",
    "\u0002\u0002\u076f\u0771\u0003\u0002\u0002\u0002\u0770\u076e\u0003\u0002",
    "\u0002\u0002\u0771\u0772\u0005\u000e\b\u0002\u0772\u07b9\u0003\u0002",
    "\u0002\u0002\u0773\u0774\u0007m\u0002\u0002\u0774\u0775\b4\u0001\u0002",
    "\u0775\u0777\u0005\u0084C\u0002\u0776\u0778\u00056\u001c\u0002\u0777",
    "\u0776\u0003\u0002\u0002\u0002\u0777\u0778\u0003\u0002\u0002\u0002\u0778",
    "\u0779\u0003\u0002\u0002\u0002\u0779\u077d\b4\u0001\u0002\u077a\u077c",
    "\u0005\u0100\u0081\u0002\u077b\u077a\u0003\u0002\u0002\u0002\u077c\u077f",
    "\u0003\u0002\u0002\u0002\u077d\u077b\u0003\u0002\u0002\u0002\u077d\u077e",
    "\u0003\u0002\u0002\u0002\u077e\u0780\u0003\u0002\u0002\u0002\u077f\u077d",
    "\u0003\u0002\u0002\u0002\u0780\u0781\u0005\u000e\b\u0002\u0781\u07b9",
    "\u0003\u0002\u0002\u0002\u0782\u0783\b4\u0001\u0002\u0783\u07b6\u0005",
    "\u00dco\u0002\u0784\u0789\u0005\u0086D\u0002\u0785\u0786\u0007\u0007",
    "\u0002\u0002\u0786\u0787\b4\u0001\u0002\u0787\u0789\u0005\u00dco\u0002",
    "\u0788\u0784\u0003\u0002\u0002\u0002\u0788\u0785\u0003\u0002\u0002\u0002",
    "\u0788\u0789\u0003\u0002\u0002\u0002\u0789\u078a\u0003\u0002\u0002\u0002",
    "\u078a\u078b\u0005|?\u0002\u078b\u078f\b4\u0001\u0002\u078c\u078e\u0005",
    "\u0100\u0081\u0002\u078d\u078c\u0003\u0002\u0002\u0002\u078e\u0791\u0003",
    "\u0002\u0002\u0002\u078f\u078d\u0003\u0002\u0002\u0002\u078f\u0790\u0003",
    "\u0002\u0002\u0002\u0790\u07a2\u0003\u0002\u0002\u0002\u0791\u078f\u0003",
    "\u0002\u0002\u0002\u0792\u0793\u0007V\u0002\u0002\u0793\u0794\u0007",
    "\u0004\u0002\u0002\u0794\u0798\b4\u0001\u0002\u0795\u0797\u0005,\u0017",
    "\u0002\u0796\u0795\u0003\u0002\u0002\u0002\u0797\u079a\u0003\u0002\u0002",
    "\u0002\u0798\u0796\u0003\u0002\u0002\u0002\u0798\u0799\u0003\u0002\u0002",
    "\u0002\u0799\u079b\u0003\u0002\u0002\u0002\u079a\u0798\u0003\u0002\u0002",
    "\u0002\u079b\u079c\u0007\u0006\u0002\u0002\u079c\u079e\b4\u0001\u0002",
    "\u079d\u079f\u00056\u001c\u0002\u079e\u079d\u0003\u0002\u0002\u0002",
    "\u079e\u079f\u0003\u0002\u0002\u0002\u079f\u07a3\u0003\u0002\u0002\u0002",
    "\u07a0\u07a1\b4\u0001\u0002\u07a1\u07a3\u00056\u001c\u0002\u07a2\u0792",
    "\u0003\u0002\u0002\u0002\u07a2\u07a0\u0003\u0002\u0002\u0002\u07a2\u07a3",
    "\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003\u0002\u0002\u0002\u07a4\u07a5",
    "\u0005\u000e\b\u0002\u07a5\u07b7\u0003\u0002\u0002\u0002\u07a6\u07ac",
    "\b4\u0001\u0002\u07a7\u07a8\u0007\u0005\u0002\u0002\u07a8\u07a9\b4\u0001",
    "\u0002\u07a9\u07ab\u0005^0\u0002\u07aa\u07a7\u0003\u0002\u0002\u0002",
    "\u07ab\u07ae\u0003\u0002\u0002\u0002\u07ac\u07aa\u0003\u0002\u0002\u0002",
    "\u07ac\u07ad\u0003\u0002\u0002\u0002\u07ad\u07af\u0003\u0002\u0002\u0002",
    "\u07ae\u07ac\u0003\u0002\u0002\u0002\u07af\u07b4\u0005h5\u0002\u07b0",
    "\u07b5\u0005\u0010\t\u0002\u07b1\u07b2\u0005~@\u0002\u07b2\u07b3\u0005",
    "\u000e\b\u0002\u07b3\u07b5\u0003\u0002\u0002\u0002\u07b4\u07b0\u0003",
    "\u0002\u0002\u0002\u07b4\u07b1\u0003\u0002\u0002\u0002\u07b5\u07b7\u0003",
    "\u0002\u0002\u0002\u07b6\u0788\u0003\u0002\u0002\u0002\u07b6\u07a6\u0003",
    "\u0002\u0002\u0002\u07b7\u07b9\u0003\u0002\u0002\u0002\u07b8\u0718\u0003",
    "\u0002\u0002\u0002\u07b8\u071f\u0003\u0002\u0002\u0002\u07b8\u072c\u0003",
    "\u0002\u0002\u0002\u07b8\u073a\u0003\u0002\u0002\u0002\u07b8\u0766\u0003",
    "\u0002\u0002\u0002\u07b8\u0773\u0003\u0002\u0002\u0002\u07b8\u0782\u0003",
    "\u0002\u0002\u0002\u07b9\u07bb\u0003\u0002\u0002\u0002\u07ba\u070f\u0003",
    "\u0002\u0002\u0002\u07ba\u0716\u0003\u0002\u0002\u0002\u07bbg\u0003",
    "\u0002\u0002\u0002\u07bc\u07bd\u0007\u0004\u0002\u0002\u07bd\u07c1\b",
    "5\u0001\u0002\u07be\u07c0\u0005.\u0018\u0002\u07bf\u07be\u0003\u0002",
    "\u0002\u0002\u07c0\u07c3\u0003\u0002\u0002\u0002\u07c1\u07bf\u0003\u0002",
    "\u0002\u0002\u07c1\u07c2\u0003\u0002\u0002\u0002\u07c2\u07c4\u0003\u0002",
    "\u0002\u0002\u07c3\u07c1\u0003\u0002\u0002\u0002\u07c4\u07c5\u0007\u0006",
    "\u0002\u0002\u07c5\u07c6\b5\u0001\u0002\u07c6i\u0003\u0002\u0002\u0002",
    "\u07c7\u07c8\u0007\u0099\u0002\u0002\u07c8\u07cc\b6\u0001\u0002\u07c9",
    "\u07cb\u0005.\u0018\u0002\u07ca\u07c9\u0003\u0002\u0002\u0002\u07cb",
    "\u07ce\u0003\u0002\u0002\u0002\u07cc\u07ca\u0003\u0002\u0002\u0002\u07cc",
    "\u07cd\u0003\u0002\u0002\u0002\u07cd\u07cf\u0003\u0002\u0002\u0002\u07ce",
    "\u07cc\u0003\u0002\u0002\u0002\u07cf\u07d0\u0007\u0006\u0002\u0002\u07d0",
    "\u07d1\b6\u0001\u0002\u07d1k\u0003\u0002\u0002\u0002\u07d2\u07d3\u0007",
    "D\u0002\u0002\u07d3\u07d4\u00076\u0002\u0002\u07d4\u07d8\b7\u0001\u0002",
    "\u07d5\u07d6\u0007n\u0002\u0002\u07d6\u07d8\b7\u0001\u0002\u07d7\u07d2",
    "\u0003\u0002\u0002\u0002\u07d7\u07d5\u0003\u0002\u0002\u0002\u07d8\u0805",
    "\u0003\u0002\u0002\u0002\u07d9\u07db\u0005h5\u0002\u07da\u07dc\u0005",
    "~@\u0002\u07db\u07da\u0003\u0002\u0002\u0002\u07db\u07dc\u0003\u0002",
    "\u0002\u0002\u07dc\u0806\u0003\u0002\u0002\u0002\u07dd\u07df\u0005\u0082",
    "B\u0002\u07de\u07e0\u0005~@\u0002\u07df\u07de\u0003\u0002\u0002\u0002",
    "\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0\u07ef\u0003\u0002\u0002\u0002",
    "\u07e1\u07e2\u0007V\u0002\u0002\u07e2\u07e3\u0007\u0004\u0002\u0002",
    "\u07e3\u07e7\b7\u0001\u0002\u07e4\u07e6\u0005,\u0017\u0002\u07e5\u07e4",
    "\u0003\u0002\u0002\u0002\u07e6\u07e9\u0003\u0002\u0002\u0002\u07e7\u07e5",
    "\u0003\u0002\u0002\u0002\u07e7\u07e8\u0003\u0002\u0002\u0002\u07e8\u07ea",
    "\u0003\u0002\u0002\u0002\u07e9\u07e7\u0003\u0002\u0002\u0002\u07ea\u07eb",
    "\u0007\u0006\u0002\u0002\u07eb\u07ed\b7\u0001\u0002\u07ec\u07ee\u0005",
    "~@\u0002\u07ed\u07ec\u0003\u0002\u0002\u0002\u07ed\u07ee\u0003\u0002",
    "\u0002\u0002\u07ee\u07f0\u0003\u0002\u0002\u0002\u07ef\u07e1\u0003\u0002",
    "\u0002\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002\u07f0\u0806\u0003\u0002",
    "\u0002\u0002\u07f1\u07f3\u0005\u0084C\u0002\u07f2\u07f4\u0005~@\u0002",
    "\u07f3\u07f2\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002\u0002",
    "\u07f4\u0803\u0003\u0002\u0002\u0002\u07f5\u07f6\u0007V\u0002\u0002",
    "\u07f6\u07f7\u0007\u0004\u0002\u0002\u07f7\u07fb\b7\u0001\u0002\u07f8",
    "\u07fa\u0005,\u0017\u0002\u07f9\u07f8\u0003\u0002\u0002\u0002\u07fa",
    "\u07fd\u0003\u0002\u0002\u0002\u07fb\u07f9\u0003\u0002\u0002\u0002\u07fb",
    "\u07fc\u0003\u0002\u0002\u0002\u07fc\u07fe\u0003\u0002\u0002\u0002\u07fd",
    "\u07fb\u0003\u0002\u0002\u0002\u07fe\u07ff\u0007\u0006\u0002\u0002\u07ff",
    "\u0801\b7\u0001\u0002\u0800\u0802\u0005~@\u0002\u0801\u0800\u0003\u0002",
    "\u0002\u0002\u0801\u0802\u0003\u0002\u0002\u0002\u0802\u0804\u0003\u0002",
    "\u0002\u0002\u0803\u07f5\u0003\u0002\u0002\u0002\u0803\u0804\u0003\u0002",
    "\u0002\u0002\u0804\u0806\u0003\u0002\u0002\u0002\u0805\u07d9\u0003\u0002",
    "\u0002\u0002\u0805\u07dd\u0003\u0002\u0002\u0002\u0805\u07f1\u0003\u0002",
    "\u0002\u0002\u0806m\u0003\u0002\u0002\u0002\u0807\u0809\u0007G\u0002",
    "\u0002\u0808\u080a\u0005x=\u0002\u0809\u0808\u0003\u0002\u0002\u0002",
    "\u0809\u080a\u0003\u0002\u0002\u0002\u080a\u080b\u0003\u0002\u0002\u0002",
    "\u080b\u080c\u0007\u0084\u0002\u0002\u080c\u0814\b8\u0001\u0002\u080d",
    "\u080f\u0007J\u0002\u0002\u080e\u0810\u0005x=\u0002\u080f\u080e\u0003",
    "\u0002\u0002\u0002\u080f\u0810\u0003\u0002\u0002\u0002\u0810\u0811\u0003",
    "\u0002\u0002\u0002\u0811\u0812\u00076\u0002\u0002\u0812\u0814\b8\u0001",
    "\u0002\u0813\u0807\u0003\u0002\u0002\u0002\u0813\u080d\u0003\u0002\u0002",
    "\u0002\u0814\u0815\u0003\u0002\u0002\u0002\u0815\u0816\b8\u0001\u0002",
    "\u0816o\u0003\u0002\u0002\u0002\u0817\u0818\u0007\u0004\u0002\u0002",
    "\u0818\u0822\b9\u0001\u0002\u0819\u081f\u0005\u0080A\u0002\u081a\u081b",
    "\u0007\u0005\u0002\u0002\u081b\u081c\b9\u0001\u0002\u081c\u081e\u0005",
    "\u0080A\u0002\u081d\u081a\u0003\u0002\u0002\u0002\u081e\u0821\u0003",
    "\u0002\u0002\u0002\u081f\u081d\u0003\u0002\u0002\u0002\u081f\u0820\u0003",
    "\u0002\u0002\u0002\u0820\u0823\u0003\u0002\u0002\u0002\u0821\u081f\u0003",
    "\u0002\u0002\u0002\u0822\u0819\u0003\u0002\u0002\u0002\u0822\u0823\u0003",
    "\u0002\u0002\u0002\u0823\u0824\u0003\u0002\u0002\u0002\u0824\u0825\u0007",
    "\u0006\u0002\u0002\u0825\u0827\b9\u0001\u0002\u0826\u0828\u00056\u001c",
    "\u0002\u0827\u0826\u0003\u0002\u0002\u0002\u0827\u0828\u0003\u0002\u0002",
    "\u0002\u0828\u082f\u0003\u0002\u0002\u0002\u0829\u082a\u00077\u0002",
    "\u0002\u082a\u082b\u0005\u00c8e\u0002\u082b\u082c\b9\u0001\u0002\u082c",
    "\u082f\u0003\u0002\u0002\u0002\u082d\u082f\u00056\u001c\u0002\u082e",
    "\u0817\u0003\u0002\u0002\u0002\u082e\u0829\u0003\u0002\u0002\u0002\u082e",
    "\u082d\u0003\u0002\u0002\u0002\u082fq\u0003\u0002\u0002\u0002\u0830",
    "\u0831\u0007\u0004\u0002\u0002\u0831\u083b\b:\u0001\u0002\u0832\u0838",
    "\u0005\u0080A\u0002\u0833\u0834\u0007\u0005\u0002\u0002\u0834\u0835",
    "\b:\u0001\u0002\u0835\u0837\u0005\u0080A\u0002\u0836\u0833\u0003\u0002",
    "\u0002\u0002\u0837\u083a\u0003\u0002\u0002\u0002\u0838\u0836\u0003\u0002",
    "\u0002\u0002\u0838\u0839\u0003\u0002\u0002\u0002\u0839\u083c\u0003\u0002",
    "\u0002\u0002\u083a\u0838\u0003\u0002\u0002\u0002\u083b\u0832\u0003\u0002",
    "\u0002\u0002\u083b\u083c\u0003\u0002\u0002\u0002\u083c\u083d\u0003\u0002",
    "\u0002\u0002\u083d\u083e\u0007\u0006\u0002\u0002\u083e\u0840\b:\u0001",
    "\u0002\u083f\u0841\u00056\u001c\u0002\u0840\u083f\u0003\u0002\u0002",
    "\u0002\u0840\u0841\u0003\u0002\u0002\u0002\u0841\u0848\u0003\u0002\u0002",
    "\u0002\u0842\u0843\u00077\u0002\u0002\u0843\u0844\u0005\u00c8e\u0002",
    "\u0844\u0845\b:\u0001\u0002\u0845\u0848\u0003\u0002\u0002\u0002\u0846",
    "\u0848\u00056\u001c\u0002\u0847\u0830\u0003\u0002\u0002\u0002\u0847",
    "\u0842\u0003\u0002\u0002\u0002\u0847\u0846\u0003\u0002\u0002\u0002\u0847",
    "\u0848\u0003\u0002\u0002\u0002\u0848\u0849\u0003\u0002\u0002\u0002\u0849",
    "\u084d\b:\u0001\u0002\u084a\u084c\u0005\u0100\u0081\u0002\u084b\u084a",
    "\u0003\u0002\u0002\u0002\u084c\u084f\u0003\u0002\u0002\u0002\u084d\u084b",
    "\u0003\u0002\u0002\u0002\u084d\u084e\u0003\u0002\u0002\u0002\u084e\u0850",
    "\u0003\u0002\u0002\u0002\u084f\u084d\u0003\u0002\u0002\u0002\u0850\u0851",
    "\u0005\u000e\b\u0002\u0851s\u0003\u0002\u0002\u0002\u0852\u0853\u0007",
    "t\u0002\u0002\u0853\u0854\b;\u0001\u0002\u0854\u0855\u0005\u00dco\u0002",
    "\u0855u\u0003\u0002\u0002\u0002\u0856\u0857\u0007n\u0002\u0002\u0857",
    "\u0858\b<\u0001\u0002\u0858\u0859\u0005\u00dco\u0002\u0859w\u0003\u0002",
    "\u0002\u0002\u085a\u085b\u0007\r\u0002\u0002\u085b\u0870\b=\u0001\u0002",
    "\u085c\u085d\u0007\u000e\u0002\u0002\u085d\u0860\b=\u0001\u0002\u085e",
    "\u085f\u0007\u0005\u0002\u0002\u085f\u0861\u0005z>\u0002\u0860\u085e",
    "\u0003\u0002\u0002\u0002\u0860\u0861\u0003\u0002\u0002\u0002\u0861\u0871",
    "\u0003\u0002\u0002\u0002\u0862\u0863\u0007=\u0002\u0002\u0863\u086e",
    "\b=\u0001\u0002\u0864\u0865\u0007\u0005\u0002\u0002\u0865\u086f\u0005",
    "z>\u0002\u0866\u0867\u0007\u000f\u0002\u0002\u0867\u086c\b=\u0001\u0002",
    "\u0868\u0869\u0007\u000e\u0002\u0002\u0869\u086d\b=\u0001\u0002\u086a",
    "\u086b\u0007=\u0002\u0002\u086b\u086d\b=\u0001\u0002\u086c\u0868\u0003",
    "\u0002\u0002\u0002\u086c\u086a\u0003\u0002\u0002\u0002\u086d\u086f\u0003",
    "\u0002\u0002\u0002\u086e\u0864\u0003\u0002\u0002\u0002\u086e\u0866\u0003",
    "\u0002\u0002\u0002\u086e\u086f\u0003\u0002\u0002\u0002\u086f\u0871\u0003",
    "\u0002\u0002\u0002\u0870\u085c\u0003\u0002\u0002\u0002\u0870\u0862\u0003",
    "\u0002\u0002\u0002\u0870\u0871\u0003\u0002\u0002\u0002\u0871\u0872\u0003",
    "\u0002\u0002\u0002\u0872\u0873\u0007\u0010\u0002\u0002\u0873y\u0003",
    "\u0002\u0002\u0002\u0874\u0883\b>\u0001\u0002\u0875\u0876\u0007\u000e",
    "\u0002\u0002\u0876\u0884\b>\u0001\u0002\u0877\u0878\u0007=\u0002\u0002",
    "\u0878\u0881\b>\u0001\u0002\u0879\u087a\u0007\u000f\u0002\u0002\u087a",
    "\u087f\b>\u0001\u0002\u087b\u087c\u0007\u000e\u0002\u0002\u087c\u0880",
    "\b>\u0001\u0002\u087d\u087e\u0007=\u0002\u0002\u087e\u0880\b>\u0001",
    "\u0002\u087f\u087b\u0003\u0002\u0002\u0002\u087f\u087d\u0003\u0002\u0002",
    "\u0002\u0880\u0882\u0003\u0002\u0002\u0002\u0881\u0879\u0003\u0002\u0002",
    "\u0002\u0881\u0882\u0003\u0002\u0002\u0002\u0882\u0884\u0003\u0002\u0002",
    "\u0002\u0883\u0875\u0003\u0002\u0002\u0002\u0883\u0877\u0003\u0002\u0002",
    "\u0002\u0884{\u0003\u0002\u0002\u0002\u0885\u088b\b?\u0001\u0002\u0886",
    "\u0887\u0007\u0092\u0002\u0002\u0887\u0888\u00075\u0002\u0002\u0888",
    "\u088c\b?\u0001\u0002\u0889\u088a\u0007\u0093\u0002\u0002\u088a\u088c",
    "\b?\u0001\u0002\u088b\u0886\u0003\u0002\u0002\u0002\u088b\u0889\u0003",
    "\u0002\u0002\u0002\u088b\u088c\u0003\u0002\u0002\u0002\u088c}\u0003",
    "\u0002\u0002\u0002\u088d\u088e\u00074\u0002\u0002\u088e\u0891\u0007",
    "5\u0002\u0002\u088f\u0891\u00075\u0002\u0002\u0890\u088d\u0003\u0002",
    "\u0002\u0002\u0890\u088f\u0003\u0002\u0002\u0002\u0891\u007f\u0003\u0002",
    "\u0002\u0002\u0892\u0896\bA\u0001\u0002\u0893\u0895\u0005\u0100\u0081",
    "\u0002\u0894\u0893\u0003\u0002\u0002\u0002\u0895\u0898\u0003\u0002\u0002",
    "\u0002\u0896\u0894\u0003\u0002\u0002\u0002\u0896\u0897\u0003\u0002\u0002",
    "\u0002\u0897\u0899\u0003\u0002\u0002\u0002\u0898\u0896\u0003\u0002\u0002",
    "\u0002\u0899\u089a\u0005\u00dco\u0002\u089a\u089d\bA\u0001\u0002\u089b",
    "\u089c\u0007*\u0002\u0002\u089c\u089e\u0005\u011a\u008e\u0002\u089d",
    "\u089b\u0003\u0002\u0002\u0002\u089d\u089e\u0003\u0002\u0002\u0002\u089e",
    "\u089f\u0003\u0002\u0002\u0002\u089f\u08a0\bA\u0001\u0002\u08a0\u08a1",
    "\bA\u0001\u0002\u08a1\u0081\u0003\u0002\u0002\u0002\u08a2\u08a3\u0007",
    "\u0085\u0002\u0002\u08a3\u08a4\u00076\u0002\u0002\u08a4\u08a5\bB\u0001",
    "\u0002\u08a5\u08a9\u0005\u00dco\u0002\u08a6\u08a7\u0007\u0007\u0002",
    "\u0002\u08a7\u08a8\bB\u0001\u0002\u08a8\u08aa\u0005\u00dco\u0002\u08a9",
    "\u08a6\u0003\u0002\u0002\u0002\u08a9\u08aa\u0003\u0002\u0002\u0002\u08aa",
    "\u08ab\u0003\u0002\u0002\u0002\u08ab\u08ac\bB\u0001\u0002\u08ac\u0083",
    "\u0003\u0002\u0002\u0002\u08ad\u08b2\u0005\u00dco\u0002\u08ae\u08b3",
    "\u0005\u0086D\u0002\u08af\u08b0\u0007\u0007\u0002\u0002\u08b0\u08b1",
    "\bC\u0001\u0002\u08b1\u08b3\u0005\u00dco\u0002\u08b2\u08ae\u0003\u0002",
    "\u0002\u0002\u08b2\u08af\u0003\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002",
    "\u0002\u0002\u08b3\u0085\u0003\u0002\u0002\u0002\u08b4\u08b5\u0007\b",
    "\u0002\u0002\u08b5\u08d0\bD\u0001\u0002\u08b6\u08b7\u0007=\u0002\u0002",
    "\u08b7\u08c4\bD\u0001\u0002\u08b8\u08b9\u0007\u0005\u0002\u0002\u08b9",
    "\u08c0\bD\u0001\u0002\u08ba\u08bb\u0007\u008a\u0002\u0002\u08bb\u08c1",
    "\bD\u0001\u0002\u08bc\u08bd\u0007^\u0002\u0002\u08bd\u08c1\bD\u0001",
    "\u0002\u08be\u08bf\u0007=\u0002\u0002\u08bf\u08c1\bD\u0001\u0002\u08c0",
    "\u08ba\u0003\u0002\u0002\u0002\u08c0\u08bc\u0003\u0002\u0002\u0002\u08c0",
    "\u08be\u0003\u0002\u0002\u0002\u08c1\u08c3\u0003\u0002\u0002\u0002\u08c2",
    "\u08b8\u0003\u0002\u0002\u0002\u08c3\u08c6\u0003\u0002\u0002\u0002\u08c4",
    "\u08c2\u0003\u0002\u0002\u0002\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5",
    "\u08d1\u0003\u0002\u0002\u0002\u08c6\u08c4\u0003\u0002\u0002\u0002\u08c7",
    "\u08cd\u0005\u008aF\u0002\u08c8\u08c9\u0007\u0005\u0002\u0002\u08c9",
    "\u08ca\bD\u0001\u0002\u08ca\u08cc\u0005\u008aF\u0002\u08cb\u08c8\u0003",
    "\u0002\u0002\u0002\u08cc\u08cf\u0003\u0002\u0002\u0002\u08cd\u08cb\u0003",
    "\u0002\u0002\u0002\u08cd\u08ce\u0003\u0002\u0002\u0002\u08ce\u08d1\u0003",
    "\u0002\u0002\u0002\u08cf\u08cd\u0003\u0002\u0002\u0002\u08d0\u08b6\u0003",
    "\u0002\u0002\u0002\u08d0\u08c7\u0003\u0002\u0002\u0002\u08d1\u08d2\u0003",
    "\u0002\u0002\u0002\u08d2\u08d3\u0007\t\u0002\u0002\u08d3\u08d4\bD\u0001",
    "\u0002\u08d4\u0087\u0003\u0002\u0002\u0002\u08d5\u08d6\u0007\b\u0002",
    "\u0002\u08d6\u08dc\u0005\u008aF\u0002\u08d7\u08d8\u0007\u0005\u0002",
    "\u0002\u08d8\u08d9\bE\u0001\u0002\u08d9\u08db\u0005\u008aF\u0002\u08da",
    "\u08d7\u0003\u0002\u0002\u0002\u08db\u08de\u0003\u0002\u0002\u0002\u08dc",
    "\u08da\u0003\u0002\u0002\u0002\u08dc\u08dd\u0003\u0002\u0002\u0002\u08dd",
    "\u08df\u0003\u0002\u0002\u0002\u08de\u08dc\u0003\u0002\u0002\u0002\u08df",
    "\u08e0\u0007\t\u0002\u0002\u08e0\u0089\u0003\u0002\u0002\u0002\u08e1",
    "\u08e2\u0005\u011a\u008e\u0002\u08e2\u08e3\u0007\u0007\u0002\u0002\u08e3",
    "\u08ea\bF\u0001\u0002\u08e4\u08e5\u0007=\u0002\u0002\u08e5\u08eb\bF",
    "\u0001\u0002\u08e6\u08e7\u0007\u008a\u0002\u0002\u08e7\u08eb\bF\u0001",
    "\u0002\u08e8\u08e9\u0007^\u0002\u0002\u08e9\u08eb\bF\u0001\u0002\u08ea",
    "\u08e4\u0003\u0002\u0002\u0002\u08ea\u08e6\u0003\u0002\u0002\u0002\u08ea",
    "\u08e8\u0003\u0002\u0002\u0002\u08eb\u008b\u0003\u0002\u0002\u0002\u08ec",
    "\u08ed\u0005\u0092J\u0002\u08ed\u08ef\bG\u0001\u0002\u08ee\u08f0\u0007",
    "\u0003\u0002\u0002\u08ef\u08ee\u0003\u0002\u0002\u0002\u08ef\u08f0\u0003",
    "\u0002\u0002\u0002\u08f0\u08f1\u0003\u0002\u0002\u0002\u08f1\u08f2\u0007",
    "\u0002\u0002\u0003\u08f2\u008d\u0003\u0002\u0002\u0002\u08f3\u08f4\u0007",
    "{\u0002\u0002\u08f4\u08f5\u00077\u0002\u0002\u08f5\u08f6\bH\u0001\u0002",
    "\u08f6\u08fa\u0005\u00a8U\u0002\u08f7\u08f8\u0007\u0007\u0002\u0002",
    "\u08f8\u08f9\bH\u0001\u0002\u08f9\u08fb\u0005\u00a8U\u0002\u08fa\u08f7",
    "\u0003\u0002\u0002\u0002\u08fa\u08fb\u0003\u0002\u0002\u0002\u08fb\u0900",
    "\u0003\u0002\u0002\u0002\u08fc\u08fd\u0007*\u0002\u0002\u08fd\u08fe",
    "\u0005\u011a\u008e\u0002\u08fe\u08ff\bH\u0001\u0002\u08ff\u0901\u0003",
    "\u0002\u0002\u0002\u0900\u08fc\u0003\u0002\u0002\u0002\u0900\u0901\u0003",
    "\u0002\u0002\u0002\u0901\u0902\u0003\u0002\u0002\u0002\u0902\u0904\b",
    "H\u0001\u0002\u0903\u0905\u0005\u00b6\\\u0002\u0904\u0903\u0003\u0002",
    "\u0002\u0002\u0904\u0905\u0003\u0002\u0002\u0002\u0905\u0907\u0003\u0002",
    "\u0002\u0002\u0906\u0908\u0005\u00acW\u0002\u0907\u0906\u0003\u0002",
    "\u0002\u0002\u0907\u0908\u0003\u0002\u0002\u0002\u0908\u008f\u0003\u0002",
    "\u0002\u0002\u0909\u090a\u0007;\u0002\u0002\u090a\u090b\u0005\u00c8",
    "e\u0002\u090b\u090c\bI\u0001\u0002\u090c\u090e\u0003\u0002\u0002\u0002",
    "\u090d\u0909\u0003\u0002\u0002\u0002\u090d\u090e\u0003\u0002\u0002\u0002",
    "\u090e\u091c\u0003\u0002\u0002\u0002\u090f\u0910\u0007b\u0002\u0002",
    "\u0910\u0911\u0007+\u0002\u0002\u0911\u0912\u0005\u00d2j\u0002\u0912",
    "\u0919\bI\u0001\u0002\u0913\u0914\u0007\u0005\u0002\u0002\u0914\u0915",
    "\u0005\u00d2j\u0002\u0915\u0916\bI\u0001\u0002\u0916\u0918\u0003\u0002",
    "\u0002\u0002\u0917\u0913\u0003\u0002\u0002\u0002\u0918\u091b\u0003\u0002",
    "\u0002\u0002\u0919\u0917\u0003\u0002\u0002\u0002\u0919\u091a\u0003\u0002",
    "\u0002\u0002\u091a\u091d\u0003\u0002\u0002\u0002\u091b\u0919\u0003\u0002",
    "\u0002\u0002\u091c\u090f\u0003\u0002\u0002\u0002\u091c\u091d\u0003\u0002",
    "\u0002\u0002\u091d\u0922\u0003\u0002\u0002\u0002\u091e\u091f\u0007c",
    "\u0002\u0002\u091f\u0920\u0005\u00c8e\u0002\u0920\u0921\bI\u0001\u0002",
    "\u0921\u0923\u0003\u0002\u0002\u0002\u0922\u091e\u0003\u0002\u0002\u0002",
    "\u0922\u0923\u0003\u0002\u0002\u0002\u0923\u0927\u0003\u0002\u0002\u0002",
    "\u0924\u0925\u0005\u00bc_\u0002\u0925\u0926\bI\u0001\u0002\u0926\u0928",
    "\u0003\u0002\u0002\u0002\u0927\u0924\u0003\u0002\u0002\u0002\u0927\u0928",
    "\u0003\u0002\u0002\u0002\u0928\u092c\u0003\u0002\u0002\u0002\u0929\u092a",
    "\u0005\u00be`\u0002\u092a\u092b\bI\u0001\u0002\u092b\u092d\u0003\u0002",
    "\u0002\u0002\u092c\u0929\u0003\u0002\u0002\u0002\u092c\u092d\u0003\u0002",
    "\u0002\u0002\u092d\u0091\u0003\u0002\u0002\u0002\u092e\u092f\u0005\u0096",
    "L\u0002\u092f\u0933\bJ\u0001\u0002\u0930\u0931\u0005\u0094K\u0002\u0931",
    "\u0932\bJ\u0001\u0002\u0932\u0934\u0003\u0002\u0002\u0002\u0933\u0930",
    "\u0003\u0002\u0002\u0002\u0933\u0934\u0003\u0002\u0002\u0002\u0934\u0093",
    "\u0003\u0002\u0002\u0002\u0935\u0937\u0007\u0086\u0002\u0002\u0936\u0938",
    "\t\u0004\u0002\u0002\u0937\u0936\u0003\u0002\u0002\u0002\u0937\u0938",
    "\u0003\u0002\u0002\u0002\u0938\u0946\u0003\u0002\u0002\u0002\u0939\u093b",
    "\u0007Z\u0002\u0002\u093a\u093c\u0007.\u0002\u0002\u093b\u093a\u0003",
    "\u0002\u0002\u0002\u093b\u093c\u0003\u0002\u0002\u0002\u093c\u0946\u0003",
    "\u0002\u0002\u0002\u093d\u093f\u0007o\u0002\u0002\u093e\u0940\u0007",
    ".\u0002\u0002\u093f\u093e\u0003\u0002\u0002\u0002\u093f\u0940\u0003",
    "\u0002\u0002\u0002\u0940\u0946\u0003\u0002\u0002\u0002\u0941\u0943\u0007",
    "e\u0002\u0002\u0942\u0944\u0007.\u0002\u0002\u0943\u0942\u0003\u0002",
    "\u0002\u0002\u0943\u0944\u0003\u0002\u0002\u0002\u0944\u0946\u0003\u0002",
    "\u0002\u0002\u0945\u0935\u0003\u0002\u0002\u0002\u0945\u0939\u0003\u0002",
    "\u0002\u0002\u0945\u093d\u0003\u0002\u0002\u0002\u0945\u0941\u0003\u0002",
    "\u0002\u0002\u0946\u0947\u0003\u0002\u0002\u0002\u0947\u0948\u0005\u0096",
    "L\u0002\u0948\u0949\bK\u0001\u0002\u0949\u094b\u0003\u0002\u0002\u0002",
    "\u094a\u0945\u0003\u0002\u0002\u0002\u094b\u094c\u0003\u0002\u0002\u0002",
    "\u094c\u094a\u0003\u0002\u0002\u0002\u094c\u094d\u0003\u0002\u0002\u0002",
    "\u094d\u0951\u0003\u0002\u0002\u0002\u094e\u094f\u0005\u00bc_\u0002",
    "\u094f\u0950\bK\u0001\u0002\u0950\u0952\u0003\u0002\u0002\u0002\u0951",
    "\u094e\u0003\u0002\u0002\u0002\u0951\u0952\u0003\u0002\u0002\u0002\u0952",
    "\u0956\u0003\u0002\u0002\u0002\u0953\u0954\u0005\u00be`\u0002\u0954",
    "\u0955\bK\u0001\u0002\u0955\u0957\u0003\u0002\u0002\u0002\u0956\u0953",
    "\u0003\u0002\u0002\u0002\u0956\u0957\u0003\u0002\u0002\u0002\u0957\u0963",
    "\u0003\u0002\u0002\u0002\u0958\u0959\u0005\u00bc_\u0002\u0959\u095d",
    "\bK\u0001\u0002\u095a\u095b\u0005\u00be`\u0002\u095b\u095c\bK\u0001",
    "\u0002\u095c\u095e\u0003\u0002\u0002\u0002\u095d\u095a\u0003\u0002\u0002",
    "\u0002\u095d\u095e\u0003\u0002\u0002\u0002\u095e\u0963\u0003\u0002\u0002",
    "\u0002\u095f\u0960\u0005\u00be`\u0002\u0960\u0961\bK\u0001\u0002\u0961",
    "\u0963\u0003\u0002\u0002\u0002\u0962\u094a\u0003\u0002\u0002\u0002\u0962",
    "\u0958\u0003\u0002\u0002\u0002\u0962\u095f\u0003\u0002\u0002\u0002\u0963",
    "\u0095\u0003\u0002\u0002\u0002\u0964\u0965\u0007\b\u0002\u0002\u0965",
    "\u0966\u0005\u0092J\u0002\u0966\u0967\u0007\t\u0002\u0002\u0967\u0968",
    "\bL\u0001\u0002\u0968\u096d\u0003\u0002\u0002\u0002\u0969\u096a\u0005",
    "\u0098M\u0002\u096a\u096b\bL\u0001\u0002\u096b\u096d\u0003\u0002\u0002",
    "\u0002\u096c\u0964\u0003\u0002\u0002\u0002\u096c\u0969\u0003\u0002\u0002",
    "\u0002\u096d\u0097\u0003\u0002\u0002\u0002\u096e\u096f\u00078\u0002",
    "\u0002\u096f\u099b\bM\u0001\u0002\u0970\u0971\u00070\u0002\u0002\u0971",
    "\u097e\u0005\u009aN\u0002\u0972\u0973\u0007p\u0002\u0002\u0973\u0974",
    "\u0007\u0004\u0002\u0002\u0974\u0978\bM\u0001\u0002\u0975\u0977\u0005",
    "\u00b0Y\u0002\u0976\u0975\u0003\u0002\u0002\u0002\u0977\u097a\u0003",
    "\u0002\u0002\u0002\u0978\u0976\u0003\u0002\u0002\u0002\u0978\u0979\u0003",
    "\u0002\u0002\u0002\u0979\u097b\u0003\u0002\u0002\u0002\u097a\u0978\u0003",
    "\u0002\u0002\u0002\u097b\u097c\u0007\u0006\u0002\u0002\u097c\u097d\b",
    "M\u0001\u0002\u097d\u097f\u0007f\u0002\u0002\u097e\u0972\u0003\u0002",
    "\u0002\u0002\u097e\u097f\u0003\u0002\u0002\u0002\u097f\u0982\u0003\u0002",
    "\u0002\u0002\u0980\u0981\t\u0004\u0002\u0002\u0981\u0983\bM\u0001\u0002",
    "\u0982\u0980\u0003\u0002\u0002\u0002\u0982\u0983\u0003\u0002\u0002\u0002",
    "\u0983\u0985\u0003\u0002\u0002\u0002\u0984\u0986\u0005\u00b6\\\u0002",
    "\u0985\u0984\u0003\u0002\u0002\u0002\u0985\u0986\u0003\u0002\u0002\u0002",
    "\u0986\u0988\u0003\u0002\u0002\u0002\u0987\u0989\u0005\u00acW\u0002",
    "\u0988\u0987\u0003\u0002\u0002\u0002\u0988\u0989\u0003\u0002\u0002\u0002",
    "\u0989\u099c\u0003\u0002\u0002\u0002\u098a\u098b\t\u0004\u0002\u0002",
    "\u098b\u098d\bM\u0001\u0002\u098c\u098a\u0003\u0002\u0002\u0002\u098c",
    "\u098d\u0003\u0002\u0002\u0002\u098d\u098e\u0003\u0002\u0002\u0002\u098e",
    "\u098f\bM\u0001\u0002\u098f\u0995\u0005\u00b2Z\u0002\u0990\u0991\u0007",
    "\u0005\u0002\u0002\u0991\u0992\bM\u0001\u0002\u0992\u0994\u0005\u00b2",
    "Z\u0002\u0993\u0990\u0003\u0002\u0002\u0002\u0994\u0997\u0003\u0002",
    "\u0002\u0002\u0995\u0993\u0003\u0002\u0002\u0002\u0995\u0996\u0003\u0002",
    "\u0002\u0002\u0996\u0998\u0003\u0002\u0002\u0002\u0997\u0995\u0003\u0002",
    "\u0002\u0002\u0998\u0999\u00070\u0002\u0002\u0999\u099a\u0005\u009a",
    "N\u0002\u099a\u099c\u0003\u0002\u0002\u0002\u099b\u0970\u0003\u0002",
    "\u0002\u0002\u099b\u098c\u0003\u0002\u0002\u0002\u099c\u09a1\u0003\u0002",
    "\u0002\u0002\u099d\u099e\u0007;\u0002\u0002\u099e\u099f\u0005\u00c8",
    "e\u0002\u099f\u09a0\bM\u0001\u0002\u09a0\u09a2\u0003\u0002\u0002\u0002",
    "\u09a1\u099d\u0003\u0002\u0002\u0002\u09a1\u09a2\u0003\u0002\u0002\u0002",
    "\u09a2\u09b0\u0003\u0002\u0002\u0002\u09a3\u09a4\u0007b\u0002\u0002",
    "\u09a4\u09a5\u0007+\u0002\u0002\u09a5\u09a6\u0005\u00d2j\u0002\u09a6",
    "\u09ad\bM\u0001\u0002\u09a7\u09a8\u0007\u0005\u0002\u0002\u09a8\u09a9",
    "\u0005\u00d2j\u0002\u09a9\u09aa\bM\u0001\u0002\u09aa\u09ac\u0003\u0002",
    "\u0002\u0002\u09ab\u09a7\u0003\u0002\u0002\u0002\u09ac\u09af\u0003\u0002",
    "\u0002\u0002\u09ad\u09ab\u0003\u0002\u0002\u0002\u09ad\u09ae\u0003\u0002",
    "\u0002\u0002\u09ae\u09b1\u0003\u0002\u0002\u0002\u09af\u09ad\u0003\u0002",
    "\u0002\u0002\u09b0\u09a3\u0003\u0002\u0002\u0002\u09b0\u09b1\u0003\u0002",
    "\u0002\u0002\u09b1\u09b6\u0003\u0002\u0002\u0002\u09b2\u09b3\u0007c",
    "\u0002\u0002\u09b3\u09b4\u0005\u00c8e\u0002\u09b4\u09b5\bM\u0001\u0002",
    "\u09b5\u09b7\u0003\u0002\u0002\u0002\u09b6\u09b2\u0003\u0002\u0002\u0002",
    "\u09b6\u09b7\u0003\u0002\u0002\u0002\u09b7\u0099\u0003\u0002\u0002\u0002",
    "\u09b8\u09b9\u0005\u009cO\u0002\u09b9\u09c3\bN\u0001\u0002\u09ba\u09bf",
    "\bN\u0001\u0002\u09bb\u09bc\u0007\u0005\u0002\u0002\u09bc\u09bd\u0005",
    "\u009cO\u0002\u09bd\u09be\bN\u0001\u0002\u09be\u09c0\u0003\u0002\u0002",
    "\u0002\u09bf\u09bb\u0003\u0002\u0002\u0002\u09c0\u09c1\u0003\u0002\u0002",
    "\u0002\u09c1\u09bf\u0003\u0002\u0002\u0002\u09c1\u09c2\u0003\u0002\u0002",
    "\u0002\u09c2\u09c4\u0003\u0002\u0002\u0002\u09c3\u09ba\u0003\u0002\u0002",
    "\u0002\u09c3\u09c4\u0003\u0002\u0002\u0002\u09c4\u009b\u0003\u0002\u0002",
    "\u0002\u09c5\u09c6\u0005\u00a0Q\u0002\u09c6\u09ca\bO\u0001\u0002\u09c7",
    "\u09c8\u0005\u009eP\u0002\u09c8\u09c9\bO\u0001\u0002\u09c9\u09cb\u0003",
    "\u0002\u0002\u0002\u09ca\u09c7\u0003\u0002\u0002\u0002\u09ca\u09cb\u0003",
    "\u0002\u0002\u0002\u09cb\u009d\u0003\u0002\u0002\u0002\u09cc\u09cd\u0005",
    "\u00c2b\u0002\u09cd\u09ce\bP\u0001\u0002\u09ce\u09cf\u0005\u009cO\u0002",
    "\u09cf\u09d0\bP\u0001\u0002\u09d0\u09d1\u00077\u0002\u0002\u09d1\u09d2",
    "\u0005\u00c8e\u0002\u09d2\u09d3\bP\u0001\u0002\u09d3\u09da\u0003\u0002",
    "\u0002\u0002\u09d4\u09d5\u0007L\u0002\u0002\u09d5\u09d6\u0007h\u0002",
    "\u0002\u09d6\u09d7\u0005\u00a0Q\u0002\u09d7\u09d8\bP\u0001\u0002\u09d8",
    "\u09da\u0003\u0002\u0002\u0002\u09d9\u09cc\u0003\u0002\u0002\u0002\u09d9",
    "\u09d4\u0003\u0002\u0002\u0002\u09da\u09db\u0003\u0002\u0002\u0002\u09db",
    "\u09d9\u0003\u0002\u0002\u0002\u09db\u09dc\u0003\u0002\u0002\u0002\u09dc",
    "\u009f\u0003\u0002\u0002\u0002\u09dd\u09de\u0005\u00a2R\u0002\u09de",
    "\u09df\bQ\u0001\u0002\u09df\u09e4\u0003\u0002\u0002\u0002\u09e0\u09e1",
    "\u0005\u00a4S\u0002\u09e1\u09e2\bQ\u0001\u0002\u09e2\u09e4\u0003\u0002",
    "\u0002\u0002\u09e3\u09dd\u0003\u0002\u0002\u0002\u09e3\u09e0\u0003\u0002",
    "\u0002\u0002\u09e4\u00a1\u0003\u0002\u0002\u0002\u09e5\u09e6\bR\u0001",
    "\u0002\u09e6\u09e7\u0005\u00a8U\u0002\u09e7\u09eb\bR\u0001\u0002\u09e8",
    "\u09e9\bR\u0001\u0002\u09e9\u09ea\u0007\u0007\u0002\u0002\u09ea\u09ec",
    "\u0005\u00a8U\u0002\u09eb\u09e8\u0003\u0002\u0002\u0002\u09eb\u09ec",
    "\u0003\u0002\u0002\u0002\u09ec\u09f4\u0003\u0002\u0002\u0002\u09ed\u09ee",
    "\u0007*\u0002\u0002\u09ee\u09ef\u0005\u011a\u008e\u0002\u09ef\u09f0",
    "\bR\u0001\u0002\u09f0\u09f5\u0003\u0002\u0002\u0002\u09f1\u09f2\u0005",
    "\u0118\u008d\u0002\u09f2\u09f3\bR\u0001\u0002\u09f3\u09f5\u0003\u0002",
    "\u0002\u0002\u09f4\u09ed\u0003\u0002\u0002\u0002\u09f4\u09f1\u0003\u0002",
    "\u0002\u0002\u09f4\u09f5\u0003\u0002\u0002\u0002\u09f5\u09f6\u0003\u0002",
    "\u0002\u0002\u09f6\u09f7\bR\u0001\u0002\u09f7\u00a3\u0003\u0002\u0002",
    "\u0002\u09f8\u0a0e\u0007\b\u0002\u0002\u09f9\u09fa\u0005\u00a4S\u0002",
    "\u09fa\u09fe\bS\u0001\u0002\u09fb\u09fc\u0005\u00a6T\u0002\u09fc\u09fd",
    "\bS\u0001\u0002\u09fd\u09ff\u0003\u0002\u0002\u0002\u09fe\u09fb\u0003",
    "\u0002\u0002\u0002\u09fe\u09ff\u0003\u0002\u0002\u0002\u09ff\u0a0f\u0003",
    "\u0002\u0002\u0002\u0a00\u0a01\u0005\u00a2R\u0002\u0a01\u0a05\bS\u0001",
    "\u0002\u0a02\u0a03\u0005\u009eP\u0002\u0a03\u0a04\bS\u0001\u0002\u0a04",
    "\u0a06\u0003\u0002\u0002\u0002\u0a05\u0a02\u0003\u0002\u0002\u0002\u0a05",
    "\u0a06\u0003\u0002\u0002\u0002\u0a06\u0a0f\u0003\u0002\u0002\u0002\u0a07",
    "\u0a08\u0005\u0098M\u0002\u0a08\u0a0c\bS\u0001\u0002\u0a09\u0a0a\u0005",
    "\u0094K\u0002\u0a0a\u0a0b\bS\u0001\u0002\u0a0b\u0a0d\u0003\u0002\u0002",
    "\u0002\u0a0c\u0a09\u0003\u0002\u0002\u0002\u0a0c\u0a0d\u0003\u0002\u0002",
    "\u0002\u0a0d\u0a0f\u0003\u0002\u0002\u0002\u0a0e\u09f9\u0003\u0002\u0002",
    "\u0002\u0a0e\u0a00\u0003\u0002\u0002\u0002\u0a0e\u0a07\u0003\u0002\u0002",
    "\u0002\u0a0f\u0a10\u0003\u0002\u0002\u0002\u0a10\u0a11\u0007\t\u0002",
    "\u0002\u0a11\u0a1b\bS\u0001\u0002\u0a12\u0a13\u0007*\u0002\u0002\u0a13",
    "\u0a14\u0005\u011a\u008e\u0002\u0a14\u0a15\bS\u0001\u0002\u0a15\u0a16",
    "\bS\u0001\u0002\u0a16\u0a1c\u0003\u0002\u0002\u0002\u0a17\u0a18\u0005",
    "\u0118\u008d\u0002\u0a18\u0a19\bS\u0001\u0002\u0a19\u0a1a\bS\u0001\u0002",
    "\u0a1a\u0a1c\u0003\u0002\u0002\u0002\u0a1b\u0a12\u0003\u0002\u0002\u0002",
    "\u0a1b\u0a17\u0003\u0002\u0002\u0002\u0a1b\u0a1c\u0003\u0002\u0002\u0002",
    "\u0a1c\u00a5\u0003\u0002\u0002\u0002\u0a1d\u0a1e\bT\u0001\u0002\u0a1e",
    "\u0a1f\u0005\u0094K\u0002\u0a1f\u0a20\bT\u0001\u0002\u0a20\u0a25\u0003",
    "\u0002\u0002\u0002\u0a21\u0a22\u0005\u009eP\u0002\u0a22\u0a23\bT\u0001",
    "\u0002\u0a23\u0a25\u0003\u0002\u0002\u0002\u0a24\u0a1d\u0003\u0002\u0002",
    "\u0002\u0a24\u0a21\u0003\u0002\u0002\u0002\u0a25\u00a7\u0003\u0002\u0002",
    "\u0002\u0a26\u0a27\u0005\u011a\u008e\u0002\u0a27\u0a31\bU\u0001\u0002",
    "\u0a28\u0a2a\u0005\u00aaV\u0002\u0a29\u0a2b\u0005\u00f6|\u0002\u0a2a",
    "\u0a29\u0003\u0002\u0002\u0002\u0a2a\u0a2b\u0003\u0002\u0002\u0002\u0a2b",
    "\u0a2c\u0003\u0002\u0002\u0002\u0a2c\u0a2d\bU\u0001\u0002\u0a2d\u0a32",
    "\u0003\u0002\u0002\u0002\u0a2e\u0a2f\u0005\u00f6|\u0002\u0a2f\u0a30",
    "\bU\u0001\u0002\u0a30\u0a32\u0003\u0002\u0002\u0002\u0a31\u0a28\u0003",
    "\u0002\u0002\u0002\u0a31\u0a2e\u0003\u0002\u0002\u0002\u0a31\u0a32\u0003",
    "\u0002\u0002\u0002\u0a32\u0a44\u0003\u0002\u0002\u0002\u0a33\u0a34\b",
    "U\u0001\u0002\u0a34\u0a35\u0007\u0011\u0002\u0002\u0a35\u0a36\u0005",
    "\u011a\u008e\u0002\u0a36\u0a40\bU\u0001\u0002\u0a37\u0a39\u0005\u00aa",
    "V\u0002\u0a38\u0a3a\u0005\u00f6|\u0002\u0a39\u0a38\u0003\u0002\u0002",
    "\u0002\u0a39\u0a3a\u0003\u0002\u0002\u0002\u0a3a\u0a3b\u0003\u0002\u0002",
    "\u0002\u0a3b\u0a3c\bU\u0001\u0002\u0a3c\u0a41\u0003\u0002\u0002\u0002",
    "\u0a3d\u0a3e\u0005\u00f6|\u0002\u0a3e\u0a3f\bU\u0001\u0002\u0a3f\u0a41",
    "\u0003\u0002\u0002\u0002\u0a40\u0a37\u0003\u0002\u0002\u0002\u0a40\u0a3d",
    "\u0003\u0002\u0002\u0002\u0a40\u0a41\u0003\u0002\u0002\u0002\u0a41\u0a43",
    "\u0003\u0002\u0002\u0002\u0a42\u0a33\u0003\u0002\u0002\u0002\u0a43\u0a46",
    "\u0003\u0002\u0002\u0002\u0a44\u0a42\u0003\u0002\u0002\u0002\u0a44\u0a45",
    "\u0003\u0002\u0002\u0002\u0a45\u00a9\u0003\u0002\u0002\u0002\u0a46\u0a44",
    "\u0003\u0002\u0002\u0002\u0a47\u0a48\u0007\b\u0002\u0002\u0a48\u0a49",
    "\bV\u0001\u0002\u0a49\u0a4a\u0005\u011a\u008e\u0002\u0a4a\u0a4b\u0007",
    "\u0007\u0002\u0002\u0a4b\u0a54\u0005\u00e2r\u0002\u0a4c\u0a4d\u0007",
    "\u0005\u0002\u0002\u0a4d\u0a4e\bV\u0001\u0002\u0a4e\u0a4f\u0005\u011a",
    "\u008e\u0002\u0a4f\u0a50\u0007\u0007\u0002\u0002\u0a50\u0a51\u0005\u00e2",
    "r\u0002\u0a51\u0a53\u0003\u0002\u0002\u0002\u0a52\u0a4c\u0003\u0002",
    "\u0002\u0002\u0a53\u0a56\u0003\u0002\u0002\u0002\u0a54\u0a52\u0003\u0002",
    "\u0002\u0002\u0a54\u0a55\u0003\u0002\u0002\u0002\u0a55\u0a57\u0003\u0002",
    "\u0002\u0002\u0a56\u0a54\u0003\u0002\u0002\u0002\u0a57\u0a58\u0007\t",
    "\u0002\u0002\u0a58\u0a59\bV\u0001\u0002\u0a59\u00ab\u0003\u0002\u0002",
    "\u0002\u0a5a\u0a5b\u0007[\u0002\u0002\u0a5b\u0a5c\u0007\u0004\u0002",
    "\u0002\u0a5c\u0a5d\bW\u0001\u0002\u0a5d\u0a63\u0005\u00aeX\u0002\u0a5e",
    "\u0a5f\u0007\u0005\u0002\u0002\u0a5f\u0a60\bW\u0001\u0002\u0a60\u0a62",
    "\u0005\u00aeX\u0002\u0a61\u0a5e\u0003\u0002\u0002\u0002\u0a62\u0a65",
    "\u0003\u0002\u0002\u0002\u0a63\u0a61\u0003\u0002\u0002\u0002\u0a63\u0a64",
    "\u0003\u0002\u0002\u0002\u0a64\u0a66\u0003\u0002\u0002\u0002\u0a65\u0a63",
    "\u0003\u0002\u0002\u0002\u0a66\u0a67\u0007\u0006\u0002\u0002\u0a67\u0a68",
    "\bW\u0001\u0002\u0a68\u00ad\u0003\u0002\u0002\u0002\u0a69\u0a6a\u0005",
    "\u011a\u008e\u0002\u0a6a\u0a6b\bX\u0001\u0002\u0a6b\u00af\u0003\u0002",
    "\u0002\u0002\u0a6c\u0a6d\u0005\u011a\u008e\u0002\u0a6d\u0a6e\u0007\u0007",
    "\u0002\u0002\u0a6e\u0a6f\u0005n8\u0002\u0a6f\u0a73\bY\u0001\u0002\u0a70",
    "\u0a74\u0005v<\u0002\u0a71\u0a74\u0005t;\u0002\u0a72\u0a74\u0005\u00dc",
    "o\u0002\u0a73\u0a70\u0003\u0002\u0002\u0002\u0a73\u0a71\u0003\u0002",
    "\u0002\u0002\u0a73\u0a72\u0003\u0002\u0002\u0002\u0a74\u0a76\u0003\u0002",
    "\u0002\u0002\u0a75\u0a77\u0005p9\u0002\u0a76\u0a75\u0003\u0002\u0002",
    "\u0002\u0a76\u0a77\u0003\u0002\u0002\u0002\u0a77\u0a78\u0003\u0002\u0002",
    "\u0002\u0a78\u0a79\u0005\u000e\b\u0002\u0a79\u00b1\u0003\u0002\u0002",
    "\u0002\u0a7a\u0a7b\u0007\u000e\u0002\u0002\u0a7b\u0a8e\bZ\u0001\u0002",
    "\u0a7c\u0a80\bZ\u0001\u0002\u0a7d\u0a7f\u0005\u0102\u0082\u0002\u0a7e",
    "\u0a7d\u0003\u0002\u0002\u0002\u0a7f\u0a82\u0003\u0002\u0002\u0002\u0a80",
    "\u0a7e\u0003\u0002\u0002\u0002\u0a80\u0a81\u0003\u0002\u0002\u0002\u0a81",
    "\u0a83\u0003\u0002\u0002\u0002\u0a82\u0a80\u0003\u0002\u0002\u0002\u0a83",
    "\u0a86\bZ\u0001\u0002\u0a84\u0a85\u0007\u0090\u0002\u0002\u0a85\u0a87",
    "\bZ\u0001\u0002\u0a86\u0a84\u0003\u0002\u0002\u0002\u0a86\u0a87\u0003",
    "\u0002\u0002\u0002\u0a87\u0a8a\u0003\u0002\u0002\u0002\u0a88\u0a89\u0007",
    "2\u0002\u0002\u0a89\u0a8b\bZ\u0001\u0002\u0a8a\u0a88\u0003\u0002\u0002",
    "\u0002\u0a8a\u0a8b\u0003\u0002\u0002\u0002\u0a8b\u0a8c\u0003\u0002\u0002",
    "\u0002\u0a8c\u0a8e\u0005\u00b4[\u0002\u0a8d\u0a7a\u0003\u0002\u0002",
    "\u0002\u0a8d\u0a7c\u0003\u0002\u0002\u0002\u0a8e\u00b3\u0003\u0002\u0002",
    "\u0002\u0a8f\u0ab8\b[\u0001\u0002\u0a90\u0a91\u0005\u00d2j\u0002\u0a91",
    "\u0a9a\b[\u0001\u0002\u0a92\u0a93\u0007*\u0002\u0002\u0a93\u0a94\u0005",
    "\u011a\u008e\u0002\u0a94\u0a95\b[\u0001\u0002\u0a95\u0a9b\u0003\u0002",
    "\u0002\u0002\u0a96\u0a97\u0005\u011a\u008e\u0002\u0a97\u0a98\b[\u0001",
    "\u0002\u0a98\u0a9b\u0003\u0002\u0002\u0002\u0a99\u0a9b\b[\u0001\u0002",
    "\u0a9a\u0a92\u0003\u0002\u0002\u0002\u0a9a\u0a96\u0003\u0002\u0002\u0002",
    "\u0a9a\u0a99\u0003\u0002\u0002\u0002\u0a9b\u0a9c\u0003\u0002\u0002\u0002",
    "\u0a9c\u0aae\b[\u0001\u0002\u0a9d\u0a9e\b[\u0001\u0002\u0a9e\u0aa0\u0005",
    "\u00b8]\u0002\u0a9f\u0aa1\u0005\u00acW\u0002\u0aa0\u0a9f\u0003\u0002",
    "\u0002\u0002\u0aa0\u0aa1\u0003\u0002\u0002\u0002\u0aa1\u0aaf\u0003\u0002",
    "\u0002\u0002\u0aa2\u0aa3\b[\u0001\u0002\u0aa3\u0aa4\b[\u0001\u0002\u0aa4",
    "\u0aa5\u0007\u0098\u0002\u0002\u0aa5\u0aac\b[\u0001\u0002\u0aa6\u0aa8",
    "\u0005\u00b8]\u0002\u0aa7\u0aa9\u0005\u00acW\u0002\u0aa8\u0aa7\u0003",
    "\u0002\u0002\u0002\u0aa8\u0aa9\u0003\u0002\u0002\u0002\u0aa9\u0aad\u0003",
    "\u0002\u0002\u0002\u0aaa\u0aab\u0007\u000e\u0002\u0002\u0aab\u0aad\b",
    "[\u0001\u0002\u0aac\u0aa6\u0003\u0002\u0002\u0002\u0aac\u0aaa\u0003",
    "\u0002\u0002\u0002\u0aad\u0aaf\u0003\u0002\u0002\u0002\u0aae\u0a9d\u0003",
    "\u0002\u0002\u0002\u0aae\u0aa2\u0003\u0002\u0002\u0002\u0aae\u0aaf\u0003",
    "\u0002\u0002\u0002\u0aaf\u0ab9\u0003\u0002\u0002\u0002\u0ab0\u0ab2\u0005",
    "\u00b8]\u0002\u0ab1\u0ab3\u0005\u00acW\u0002\u0ab2\u0ab1\u0003\u0002",
    "\u0002\u0002\u0ab2\u0ab3\u0003\u0002\u0002\u0002\u0ab3\u0ab4\u0003\u0002",
    "\u0002\u0002\u0ab4\u0ab5\u0007*\u0002\u0002\u0ab5\u0ab6\u0005\u011a",
    "\u008e\u0002\u0ab6\u0ab7\b[\u0001\u0002\u0ab7\u0ab9\u0003\u0002\u0002",
    "\u0002\u0ab8\u0a90\u0003\u0002\u0002\u0002\u0ab8\u0ab0\u0003\u0002\u0002",
    "\u0002\u0ab9\u0aba\u0003\u0002\u0002\u0002\u0aba\u0abe\b[\u0001\u0002",
    "\u0abb\u0abd\u0005\u00fe\u0080\u0002\u0abc\u0abb\u0003\u0002\u0002\u0002",
    "\u0abd\u0ac0\u0003\u0002\u0002\u0002\u0abe\u0abc\u0003\u0002\u0002\u0002",
    "\u0abe\u0abf\u0003\u0002\u0002\u0002\u0abf\u0af8\u0003\u0002\u0002\u0002",
    "\u0ac0\u0abe\u0003\u0002\u0002\u0002\u0ac1\u0af6\u0007\u0007\u0002\u0002",
    "\u0ac2\u0ac3\u0007|\u0002\u0002\u0ac3\u0ac4\u0007\u0084\u0002\u0002",
    "\u0ac4\u0ac5\b[\u0001\u0002\u0ac5\u0ace\u0005\u00dco\u0002\u0ac6\u0acf",
    "\u0005p9\u0002\u0ac7\u0acb\b[\u0001\u0002\u0ac8\u0aca\u0005\u0100\u0081",
    "\u0002\u0ac9\u0ac8\u0003\u0002\u0002\u0002\u0aca\u0acd\u0003\u0002\u0002",
    "\u0002\u0acb\u0ac9\u0003\u0002\u0002\u0002\u0acb\u0acc\u0003\u0002\u0002",
    "\u0002\u0acc\u0acf\u0003\u0002\u0002\u0002\u0acd\u0acb\u0003\u0002\u0002",
    "\u0002\u0ace\u0ac6\u0003\u0002\u0002\u0002\u0ace\u0ac7\u0003\u0002\u0002",
    "\u0002\u0acf\u0af7\u0003\u0002\u0002\u0002\u0ad0\u0ad1\u0005\u0082B",
    "\u0002\u0ad1\u0ad5\b[\u0001\u0002\u0ad2\u0ad4\u0005\u0100\u0081\u0002",
    "\u0ad3\u0ad2\u0003\u0002\u0002\u0002\u0ad4\u0ad7\u0003\u0002\u0002\u0002",
    "\u0ad5\u0ad3\u0003\u0002\u0002\u0002\u0ad5\u0ad6\u0003\u0002\u0002\u0002",
    "\u0ad6\u0af7\u0003\u0002\u0002\u0002\u0ad7\u0ad5\u0003\u0002\u0002\u0002",
    "\u0ad8\u0ad9\u0007m\u0002\u0002\u0ad9\u0ada\b[\u0001\u0002\u0ada\u0adb",
    "\u0005\u0084C\u0002\u0adb\u0adf\b[\u0001\u0002\u0adc\u0ade\u0005\u0100",
    "\u0081\u0002\u0add\u0adc\u0003\u0002\u0002\u0002\u0ade\u0ae1\u0003\u0002",
    "\u0002\u0002\u0adf\u0add\u0003\u0002\u0002\u0002\u0adf\u0ae0\u0003\u0002",
    "\u0002\u0002\u0ae0\u0af7\u0003\u0002\u0002\u0002\u0ae1\u0adf\u0003\u0002",
    "\u0002\u0002\u0ae2\u0ae3\u0005\u0084C\u0002\u0ae3\u0ae7\b[\u0001\u0002",
    "\u0ae4\u0ae6\u0005\u0100\u0081\u0002\u0ae5\u0ae4\u0003\u0002\u0002\u0002",
    "\u0ae6\u0ae9\u0003\u0002\u0002\u0002\u0ae7\u0ae5\u0003\u0002\u0002\u0002",
    "\u0ae7\u0ae8\u0003\u0002\u0002\u0002\u0ae8\u0af7\u0003\u0002\u0002\u0002",
    "\u0ae9\u0ae7\u0003\u0002\u0002\u0002\u0aea\u0aeb\b[\u0001\u0002\u0aeb",
    "\u0aec\b[\u0001\u0002\u0aec\u0af0\u0005n8\u0002\u0aed\u0af1\u0005v<",
    "\u0002\u0aee\u0af1\u0005t;\u0002\u0aef\u0af1\u0005\u00dco\u0002\u0af0",
    "\u0aed\u0003\u0002\u0002\u0002\u0af0\u0aee\u0003\u0002\u0002\u0002\u0af0",
    "\u0aef\u0003\u0002\u0002\u0002\u0af1\u0af2\u0003\u0002\u0002\u0002\u0af2",
    "\u0af3\u00077\u0002\u0002\u0af3\u0af4\u0005\u00c8e\u0002\u0af4\u0af5",
    "\b[\u0001\u0002\u0af5\u0af7\u0003\u0002\u0002\u0002\u0af6\u0ac2\u0003",
    "\u0002\u0002\u0002\u0af6\u0ad0\u0003\u0002\u0002\u0002\u0af6\u0ad8\u0003",
    "\u0002\u0002\u0002\u0af6\u0ae2\u0003\u0002\u0002\u0002\u0af6\u0aea\u0003",
    "\u0002\u0002\u0002\u0af7\u0af9\u0003\u0002\u0002\u0002\u0af8\u0ac1\u0003",
    "\u0002\u0002\u0002\u0af8\u0af9\u0003\u0002\u0002\u0002\u0af9\u00b5\u0003",
    "\u0002\u0002\u0002\u0afa\u0afb\u0007\u0004\u0002\u0002\u0afb\u0b05\b",
    "\\\u0001\u0002\u0afc\u0b02\u0005\u00b2Z\u0002\u0afd\u0afe\u0007\u0005",
    "\u0002\u0002\u0afe\u0aff\b\\\u0001\u0002\u0aff\u0b01\u0005\u00b2Z\u0002",
    "\u0b00\u0afd\u0003\u0002\u0002\u0002\u0b01\u0b04\u0003\u0002\u0002\u0002",
    "\u0b02\u0b00\u0003\u0002\u0002\u0002\u0b02\u0b03\u0003\u0002\u0002\u0002",
    "\u0b03\u0b06\u0003\u0002\u0002\u0002\u0b04\u0b02\u0003\u0002\u0002\u0002",
    "\u0b05\u0afc\u0003\u0002\u0002\u0002\u0b05\u0b06\u0003\u0002\u0002\u0002",
    "\u0b06\u0b07\u0003\u0002\u0002\u0002\u0b07\u0b08\u0007\u0006\u0002\u0002",
    "\u0b08\u0b09\b\\\u0001\u0002\u0b09\u00b7\u0003\u0002\u0002\u0002\u0b0a",
    "\u0b0b\u0007\u0004\u0002\u0002\u0b0b\u0b15\b]\u0001\u0002\u0b0c\u0b12",
    "\u0005\u00ba^\u0002\u0b0d\u0b0e\u0007\u0005\u0002\u0002\u0b0e\u0b0f",
    "\b]\u0001\u0002\u0b0f\u0b11\u0005\u00ba^\u0002\u0b10\u0b0d\u0003\u0002",
    "\u0002\u0002\u0b11\u0b14\u0003\u0002\u0002\u0002\u0b12\u0b10\u0003\u0002",
    "\u0002\u0002\u0b12\u0b13\u0003\u0002\u0002\u0002\u0b13\u0b16\u0003\u0002",
    "\u0002\u0002\u0b14\u0b12\u0003\u0002\u0002\u0002\u0b15\u0b0c\u0003\u0002",
    "\u0002\u0002\u0b15\u0b16\u0003\u0002\u0002\u0002\u0b16\u0b17\u0003\u0002",
    "\u0002\u0002\u0b17\u0b18\u0007\u0006\u0002\u0002\u0b18\u0b19\b]\u0001",
    "\u0002\u0b19\u00b9\u0003\u0002\u0002\u0002\u0b1a\u0b1b\u0007\u000e\u0002",
    "\u0002\u0b1b\u0b26\b^\u0001\u0002\u0b1c\u0b20\b^\u0001\u0002\u0b1d\u0b1f",
    "\u0005\u0102\u0082\u0002\u0b1e\u0b1d\u0003\u0002\u0002\u0002\u0b1f\u0b22",
    "\u0003\u0002\u0002\u0002\u0b20\u0b1e\u0003\u0002\u0002\u0002\u0b20\u0b21",
    "\u0003\u0002\u0002\u0002\u0b21\u0b23\u0003\u0002\u0002\u0002\u0b22\u0b20",
    "\u0003\u0002\u0002\u0002\u0b23\u0b24\b^\u0001\u0002\u0b24\u0b26\u0005",
    "\u00b4[\u0002\u0b25\u0b1a\u0003\u0002\u0002\u0002\u0b25\u0b1c\u0003",
    "\u0002\u0002\u0002\u0b26\u00bb\u0003\u0002\u0002\u0002\u0b27\u0b28\u0007",
    "v\u0002\u0002\u0b28\u0b29\u0007+\u0002\u0002\u0b29\u0b2a\b_\u0001\u0002",
    "\u0b2a\u0b2b\u0005\u00c0a\u0002\u0b2b\u0b32\b_\u0001\u0002\u0b2c\u0b2d",
    "\u0007\u0005\u0002\u0002\u0b2d\u0b2e\u0005\u00c0a\u0002\u0b2e\u0b2f",
    "\b_\u0001\u0002\u0b2f\u0b31\u0003\u0002\u0002\u0002\u0b30\u0b2c\u0003",
    "\u0002\u0002\u0002\u0b31\u0b34\u0003\u0002\u0002\u0002\u0b32\u0b30\u0003",
    "\u0002\u0002\u0002\u0b32\u0b33\u0003\u0002\u0002\u0002\u0b33\u00bd\u0003",
    "\u0002\u0002\u0002\u0b34\u0b32\u0003\u0002\u0002\u0002\u0b35\u0b36\u0007",
    "l\u0002\u0002\u0b36\u0b37\b`\u0001\u0002\u0b37\u0b38\u0005\u00d2j\u0002",
    "\u0b38\u0b3d\b`\u0001\u0002\u0b39\u0b3a\u0007s\u0002\u0002\u0b3a\u0b3b",
    "\u0005\u00d2j\u0002\u0b3b\u0b3c\b`\u0001\u0002\u0b3c\u0b3e\u0003\u0002",
    "\u0002\u0002\u0b3d\u0b39\u0003\u0002\u0002\u0002\u0b3d\u0b3e\u0003\u0002",
    "\u0002\u0002\u0b3e\u00bf\u0003\u0002\u0002\u0002\u0b3f\u0b40\u0005\u00d2",
    "j\u0002\u0b40\u0b45\ba\u0001\u0002\u0b41\u0b42\u0007E\u0002\u0002\u0b42",
    "\u0b46\ba\u0001\u0002\u0b43\u0b44\u0007Q\u0002\u0002\u0b44\u0b46\ba",
    "\u0001\u0002\u0b45\u0b41\u0003\u0002\u0002\u0002\u0b45\u0b43\u0003\u0002",
    "\u0002\u0002\u0b45\u0b46\u0003\u0002\u0002\u0002\u0b46\u0b4a\u0003\u0002",
    "\u0002\u0002\u0b47\u0b48\u0007r\u0002\u0002\u0b48\u0b49\t\u0005\u0002",
    "\u0002\u0b49\u0b4b\ba\u0001\u0002\u0b4a\u0b47\u0003\u0002\u0002\u0002",
    "\u0b4a\u0b4b\u0003\u0002\u0002\u0002\u0b4b\u00c1\u0003\u0002\u0002\u0002",
    "\u0b4c\u0b4d\u0007h\u0002\u0002\u0b4d\u0b70\bb\u0001\u0002\u0b4e\u0b50",
    "\u0007d\u0002\u0002\u0b4f\u0b51\u0005\u00c4c\u0002\u0b50\u0b4f\u0003",
    "\u0002\u0002\u0002\u0b50\u0b51\u0003\u0002\u0002\u0002\u0b51\u0b52\u0003",
    "\u0002\u0002\u0002\u0b52\u0b53\u0007h\u0002\u0002\u0b53\u0b70\bb\u0001",
    "\u0002\u0b54\u0b56\u0007j\u0002\u0002\u0b55\u0b57\u0007w\u0002\u0002",
    "\u0b56\u0b55\u0003\u0002\u0002\u0002\u0b56\u0b57\u0003\u0002\u0002\u0002",
    "\u0b57\u0b59\u0003\u0002\u0002\u0002\u0b58\u0b5a\u0005\u00c4c\u0002",
    "\u0b59\u0b58\u0003\u0002\u0002\u0002\u0b59\u0b5a\u0003\u0002\u0002\u0002",
    "\u0b5a\u0b5b\u0003\u0002\u0002\u0002\u0b5b\u0b5c\u0007h\u0002\u0002",
    "\u0b5c\u0b70\bb\u0001\u0002\u0b5d\u0b5f\u0007~\u0002\u0002\u0b5e\u0b60",
    "\u0007w\u0002\u0002\u0b5f\u0b5e\u0003\u0002\u0002\u0002\u0b5f\u0b60",
    "\u0003\u0002\u0002\u0002\u0b60\u0b62\u0003\u0002\u0002\u0002\u0b61\u0b63",
    "\u0005\u00c4c\u0002\u0b62\u0b61\u0003\u0002\u0002\u0002\u0b62\u0b63",
    "\u0003\u0002\u0002\u0002\u0b63\u0b64\u0003\u0002\u0002\u0002\u0b64\u0b65",
    "\u0007h\u0002\u0002\u0b65\u0b70\bb\u0001\u0002\u0b66\u0b68\u0007`\u0002",
    "\u0002\u0b67\u0b69\u0007w\u0002\u0002\u0b68\u0b67\u0003\u0002\u0002",
    "\u0002\u0b68\u0b69\u0003\u0002\u0002\u0002\u0b69\u0b6b\u0003\u0002\u0002",
    "\u0002\u0b6a\u0b6c\u0005\u00c4c\u0002\u0b6b\u0b6a\u0003\u0002\u0002",
    "\u0002\u0b6b\u0b6c\u0003\u0002\u0002\u0002\u0b6c\u0b6d\u0003\u0002\u0002",
    "\u0002\u0b6d\u0b6e\u0007h\u0002\u0002\u0b6e\u0b70\bb\u0001\u0002\u0b6f",
    "\u0b4c\u0003\u0002\u0002\u0002\u0b6f\u0b4e\u0003\u0002\u0002\u0002\u0b6f",
    "\u0b54\u0003\u0002\u0002\u0002\u0b6f\u0b5d\u0003\u0002\u0002\u0002\u0b6f",
    "\u0b66\u0003\u0002\u0002\u0002\u0b70\u0b71\u0003\u0002\u0002\u0002\u0b71",
    "\u0b72\bb\u0001\u0002\u0b72\u00c3\u0003\u0002\u0002\u0002\u0b73\u0b75",
    "\u0007Y\u0002\u0002\u0b74\u0b73\u0003\u0002\u0002\u0002\u0b74\u0b75",
    "\u0003\u0002\u0002\u0002\u0b75\u0b76\u0003\u0002\u0002\u0002\u0b76\u0b77",
    "\u0007t\u0002\u0002\u0b77\u0b7b\bc\u0001\u0002\u0b78\u0b79\u0007n\u0002",
    "\u0002\u0b79\u0b7b\bc\u0001\u0002\u0b7a\u0b74\u0003\u0002\u0002\u0002",
    "\u0b7a\u0b78\u0003\u0002\u0002\u0002\u0b7b\u0b7c\u0003\u0002\u0002\u0002",
    "\u0b7c\u0b84\u0007\u0084\u0002\u0002\u0b7d\u0b7f\u0007Y\u0002\u0002",
    "\u0b7e\u0b7d\u0003\u0002\u0002\u0002\u0b7e\u0b7f\u0003\u0002\u0002\u0002",
    "\u0b7f\u0b80\u0003\u0002\u0002\u0002\u0b80\u0b81\u0007t\u0002\u0002",
    "\u0b81\u0b85\bc\u0001\u0002\u0b82\u0b83\u0007n\u0002\u0002\u0b83\u0b85",
    "\bc\u0001\u0002\u0b84\u0b7e\u0003\u0002\u0002\u0002\u0b84\u0b82\u0003",
    "\u0002\u0002\u0002\u0b85\u00c5\u0003\u0002\u0002\u0002\u0b86\u0b87\u0005",
    "\u00c8e\u0002\u0b87\u0b88\bd\u0001\u0002\u0b88\u0b89\u0007\u0002\u0002",
    "\u0003\u0b89\u00c7\u0003\u0002\u0002\u0002\u0b8a\u0b8c\u0005\u00ccg",
    "\u0002\u0b8b\u0b8d\u0005\u00caf\u0002\u0b8c\u0b8b\u0003\u0002\u0002",
    "\u0002\u0b8c\u0b8d\u0003\u0002\u0002\u0002\u0b8d\u00c9\u0003\u0002\u0002",
    "\u0002\u0b8e\u0b8f\u0007u\u0002\u0002\u0b8f\u0b93\bf\u0001\u0002\u0b90",
    "\u0b91\u0007A\u0002\u0002\u0b91\u0b93\bf\u0001\u0002\u0b92\u0b8e\u0003",
    "\u0002\u0002\u0002\u0b92\u0b90\u0003\u0002\u0002\u0002\u0b93\u0b94\u0003",
    "\u0002\u0002\u0002\u0b94\u0b95\u0005\u00ccg\u0002\u0b95\u0b96\bf\u0001",
    "\u0002\u0b96\u0b98\u0003\u0002\u0002\u0002\u0b97\u0b92\u0003\u0002\u0002",
    "\u0002\u0b98\u0b99\u0003\u0002\u0002\u0002\u0b99\u0b97\u0003\u0002\u0002",
    "\u0002\u0b99\u0b9a\u0003\u0002\u0002\u0002\u0b9a\u0ba4\u0003\u0002\u0002",
    "\u0002\u0b9b\u0b9c\u0007\u0012\u0002\u0002\u0b9c\u0b9d\bf\u0001\u0002",
    "\u0b9d\u0b9e\u0005\u00d2j\u0002\u0b9e\u0b9f\bf\u0001\u0002\u0b9f\u0ba0",
    "\u0007\u0007\u0002\u0002\u0ba0\u0ba1\bf\u0001\u0002\u0ba1\u0ba2\u0005",
    "\u00d2j\u0002\u0ba2\u0ba3\bf\u0001\u0002\u0ba3\u0ba5\u0003\u0002\u0002",
    "\u0002\u0ba4\u0b9b\u0003\u0002\u0002\u0002\u0ba4\u0ba5\u0003\u0002\u0002",
    "\u0002\u0ba5\u0bb0\u0003\u0002\u0002\u0002\u0ba6\u0ba7\u0007\u0012\u0002",
    "\u0002\u0ba7\u0ba8\bf\u0001\u0002\u0ba8\u0ba9\u0005\u00d2j\u0002\u0ba9",
    "\u0baa\bf\u0001\u0002\u0baa\u0bab\u0007\u0007\u0002\u0002\u0bab\u0bac",
    "\bf\u0001\u0002\u0bac\u0bad\u0005\u00d2j\u0002\u0bad\u0bae\bf\u0001",
    "\u0002\u0bae\u0bb0\u0003\u0002\u0002\u0002\u0baf\u0b97\u0003\u0002\u0002",
    "\u0002\u0baf\u0ba6\u0003\u0002\u0002\u0002\u0bb0\u00cb\u0003\u0002\u0002",
    "\u0002\u0bb1\u0bb2\u0005\u00ceh\u0002\u0bb2\u0bb3\bg\u0001\u0002\u0bb3",
    "\u0bbc\u0003\u0002\u0002\u0002\u0bb4\u0bb6\u0005\u00d8m\u0002\u0bb5",
    "\u0bb7\u0005\u00d4k\u0002\u0bb6\u0bb5\u0003\u0002\u0002\u0002\u0bb6",
    "\u0bb7\u0003\u0002\u0002\u0002\u0bb7\u0bb9\u0003\u0002\u0002\u0002\u0bb8",
    "\u0bba\u0005\u00d0i\u0002\u0bb9\u0bb8\u0003\u0002\u0002\u0002\u0bb9",
    "\u0bba\u0003\u0002\u0002\u0002\u0bba\u0bbc\u0003\u0002\u0002\u0002\u0bbb",
    "\u0bb1\u0003\u0002\u0002\u0002\u0bbb\u0bb4\u0003\u0002\u0002\u0002\u0bbc",
    "\u00cd\u0003\u0002\u0002\u0002\u0bbd\u0bbe\u00074\u0002\u0002\u0bbe",
    "\u0bbf\bh\u0001\u0002\u0bbf\u0bc0\u0005\u00ccg\u0002\u0bc0\u0bc1\bh",
    "\u0001\u0002\u0bc1\u0bdb\u0003\u0002\u0002\u0002\u0bc2\u0bc3\u0007/",
    "\u0002\u0002\u0bc3\u0bcf\bh\u0001\u0002\u0bc4\u0bc5\u0007\b\u0002\u0002",
    "\u0bc5\u0bc6\u0005\u0092J\u0002\u0bc6\u0bc7\u0007\t\u0002\u0002\u0bc7",
    "\u0bc8\bh\u0001\u0002\u0bc8\u0bd0\u0003\u0002\u0002\u0002\u0bc9\u0bca",
    "\t\u0006\u0002\u0002\u0bca\u0bd0\bh\u0001\u0002\u0bcb\u0bcc\u0005\u00de",
    "p\u0002\u0bcc\u0bcd\bh\u0001\u0002\u0bcd\u0bce\bh\u0001\u0002\u0bce",
    "\u0bd0\u0003\u0002\u0002\u0002\u0bcf\u0bc4\u0003\u0002\u0002\u0002\u0bcf",
    "\u0bc9\u0003\u0002\u0002\u0002\u0bcf\u0bcb\u0003\u0002\u0002\u0002\u0bd0",
    "\u0bdb\u0003\u0002\u0002\u0002\u0bd1\u0bd3\u0005\u00d6l\u0002\u0bd2",
    "\u0bd4\u0005\u00d4k\u0002\u0bd3\u0bd2\u0003\u0002\u0002\u0002\u0bd3",
    "\u0bd4\u0003\u0002\u0002\u0002\u0bd4\u0bd6\u0003\u0002\u0002\u0002\u0bd5",
    "\u0bd7\u0005\u00d0i\u0002\u0bd6\u0bd5\u0003\u0002\u0002\u0002\u0bd6",
    "\u0bd7\u0003\u0002\u0002\u0002\u0bd7\u0bd8\u0003\u0002\u0002\u0002\u0bd8",
    "\u0bd9\bh\u0001\u0002\u0bd9\u0bdb\u0003\u0002\u0002\u0002\u0bda\u0bbd",
    "\u0003\u0002\u0002\u0002\u0bda\u0bc2\u0003\u0002\u0002\u0002\u0bda\u0bd1",
    "\u0003\u0002\u0002\u0002\u0bdb\u00cf\u0003\u0002\u0002\u0002\u0bdc\u0bdd",
    "\t\u0007\u0002\u0002\u0bdd\u0be0\bi\u0001\u0002\u0bde\u0bdf\t\b\u0002",
    "\u0002\u0bdf\u0be1\bi\u0001\u0002\u0be0\u0bde\u0003\u0002\u0002\u0002",
    "\u0be0\u0be1\u0003\u0002\u0002\u0002\u0be1\u0be2\u0003\u0002\u0002\u0002",
    "\u0be2\u0be3\u0005\u00d2j\u0002\u0be3\u0be4\bi\u0001\u0002\u0be4\u0c0d",
    "\u0003\u0002\u0002\u0002\u0be5\u0be6\u0007g\u0002\u0002\u0be6\u0be9",
    "\bi\u0001\u0002\u0be7\u0be8\u00074\u0002\u0002\u0be8\u0bea\bi\u0001",
    "\u0002\u0be9\u0be7\u0003\u0002\u0002\u0002\u0be9\u0bea\u0003\u0002\u0002",
    "\u0002\u0bea\u0beb\u0003\u0002\u0002\u0002\u0beb\u0bec\u00075\u0002",
    "\u0002\u0bec\u0c0d\bi\u0001\u0002\u0bed\u0bee\u00074\u0002\u0002\u0bee",
    "\u0bf0\bi\u0001\u0002\u0bef\u0bed\u0003\u0002\u0002\u0002\u0bef\u0bf0",
    "\u0003\u0002\u0002\u0002\u0bf0\u0c0a\u0003\u0002\u0002\u0002\u0bf1\u0bf2",
    "\u00071\u0002\u0002\u0bf2\u0bf3\bi\u0001\u0002\u0bf3\u0bf4\u0005\u00d2",
    "j\u0002\u0bf4\u0bf5\bi\u0001\u0002\u0bf5\u0c0b\u0003\u0002\u0002\u0002",
    "\u0bf6\u0bf7\u0007H\u0002\u0002\u0bf7\u0bf8\bi\u0001\u0002\u0bf8\u0bf9",
    "\u0005\u00d2j\u0002\u0bf9\u0bfa\bi\u0001\u0002\u0bfa\u0bfb\u0007A\u0002",
    "\u0002\u0bfb\u0bfc\bi\u0001\u0002\u0bfc\u0bfd\u0005\u00d2j\u0002\u0bfd",
    "\u0bfe\bi\u0001\u0002\u0bfe\u0c0b\u0003\u0002\u0002\u0002\u0bff\u0c00",
    "\u0007k\u0002\u0002\u0c00\u0c01\bi\u0001\u0002\u0c01\u0c02\u0005\u00d2",
    "j\u0002\u0c02\u0c08\bi\u0001\u0002\u0c03\u0c04\u0007X\u0002\u0002\u0c04",
    "\u0c05\bi\u0001\u0002\u0c05\u0c06\u0005\u00d2j\u0002\u0c06\u0c07\bi",
    "\u0001\u0002\u0c07\u0c09\u0003\u0002\u0002\u0002\u0c08\u0c03\u0003\u0002",
    "\u0002\u0002\u0c08\u0c09\u0003\u0002\u0002\u0002\u0c09\u0c0b\u0003\u0002",
    "\u0002\u0002\u0c0a\u0bf1\u0003\u0002\u0002\u0002\u0c0a\u0bf6\u0003\u0002",
    "\u0002\u0002\u0c0a\u0bff\u0003\u0002\u0002\u0002\u0c0b\u0c0d\u0003\u0002",
    "\u0002\u0002\u0c0c\u0bdc\u0003\u0002\u0002\u0002\u0c0c\u0be5\u0003\u0002",
    "\u0002\u0002\u0c0c\u0bef\u0003\u0002\u0002\u0002\u0c0d\u00d1\u0003\u0002",
    "\u0002\u0002\u0c0e\u0c0f\u0005\u00d6l\u0002\u0c0f\u0c10\bj\u0001\u0002",
    "\u0c10\u0c15\u0003\u0002\u0002\u0002\u0c11\u0c12\u0005\u00d8m\u0002",
    "\u0c12\u0c13\bj\u0001\u0002\u0c13\u0c15\u0003\u0002\u0002\u0002\u0c14",
    "\u0c0e\u0003\u0002\u0002\u0002\u0c14\u0c11\u0003\u0002\u0002\u0002\u0c15",
    "\u0c19\u0003\u0002\u0002\u0002\u0c16\u0c17\u0005\u00d4k\u0002\u0c17",
    "\u0c18\bj\u0001\u0002\u0c18\u0c1a\u0003\u0002\u0002\u0002\u0c19\u0c16",
    "\u0003\u0002\u0002\u0002\u0c19\u0c1a\u0003\u0002\u0002\u0002\u0c1a\u00d3",
    "\u0003\u0002\u0002\u0002\u0c1b\u0c1c\u0007\u0019\u0002\u0002\u0c1c\u0c26",
    "\bk\u0001\u0002\u0c1d\u0c1e\u0007\u000b\u0002\u0002\u0c1e\u0c26\bk\u0001",
    "\u0002\u0c1f\u0c20\u0007\f\u0002\u0002\u0c20\u0c26\bk\u0001\u0002\u0c21",
    "\u0c22\u0007\u000e\u0002\u0002\u0c22\u0c26\bk\u0001\u0002\u0c23\u0c24",
    "\u0007\u001a\u0002\u0002\u0c24\u0c26\bk\u0001\u0002\u0c25\u0c1b\u0003",
    "\u0002\u0002\u0002\u0c25\u0c1d\u0003\u0002\u0002\u0002\u0c25\u0c1f\u0003",
    "\u0002\u0002\u0002\u0c25\u0c21\u0003\u0002\u0002\u0002\u0c25\u0c23\u0003",
    "\u0002\u0002\u0002\u0c26\u0c2d\u0003\u0002\u0002\u0002\u0c27\u0c28\u0005",
    "\u00d6l\u0002\u0c28\u0c29\bk\u0001\u0002\u0c29\u0c2e\u0003\u0002\u0002",
    "\u0002\u0c2a\u0c2b\u0005\u00d8m\u0002\u0c2b\u0c2c\bk\u0001\u0002\u0c2c",
    "\u0c2e\u0003\u0002\u0002\u0002\u0c2d\u0c27\u0003\u0002\u0002\u0002\u0c2d",
    "\u0c2a\u0003\u0002\u0002\u0002\u0c2e\u0c30\u0003\u0002\u0002\u0002\u0c2f",
    "\u0c25\u0003\u0002\u0002\u0002\u0c30\u0c31\u0003\u0002\u0002\u0002\u0c31",
    "\u0c2f\u0003\u0002\u0002\u0002\u0c31\u0c32\u0003\u0002\u0002\u0002\u0c32",
    "\u00d5\u0003\u0002\u0002\u0002\u0c33\u0c34\t\t\u0002\u0002\u0c34\u0c3b",
    "\bl\u0001\u0002\u0c35\u0c36\u0005\u00d6l\u0002\u0c36\u0c37\bl\u0001",
    "\u0002\u0c37\u0c3c\u0003\u0002\u0002\u0002\u0c38\u0c39\u0005\u00d8m",
    "\u0002\u0c39\u0c3a\bl\u0001\u0002\u0c3a\u0c3c\u0003\u0002\u0002\u0002",
    "\u0c3b\u0c35\u0003\u0002\u0002\u0002\u0c3b\u0c38\u0003\u0002\u0002\u0002",
    "\u0c3c\u0c8d\u0003\u0002\u0002\u0002\u0c3d\u0c3e\u0005\u0116\u008c\u0002",
    "\u0c3e\u0c3f\bl\u0001\u0002\u0c3f\u0c8d\u0003\u0002\u0002\u0002\u0c40",
    "\u0c41\u0005\u00dan\u0002\u0c41\u0c42\bl\u0001\u0002\u0c42\u0c8d\u0003",
    "\u0002\u0002\u0002\u0c43\u0c44\u0007,\u0002\u0002\u0c44\u0c61\bl\u0001",
    "\u0002\u0c45\u0c46\u0005\u00d2j\u0002\u0c46\u0c50\bl\u0001\u0002\u0c47",
    "\u0c48\u0007:\u0002\u0002\u0c48\u0c49\bl\u0001\u0002\u0c49\u0c4a\u0005",
    "\u00d2j\u0002\u0c4a\u0c4b\bl\u0001\u0002\u0c4b\u0c4c\u0007\u0083\u0002",
    "\u0002\u0c4c\u0c4d\bl\u0001\u0002\u0c4d\u0c4e\u0005\u00d2j\u0002\u0c4e",
    "\u0c4f\bl\u0001\u0002\u0c4f\u0c51\u0003\u0002\u0002\u0002\u0c50\u0c47",
    "\u0003\u0002\u0002\u0002\u0c51\u0c52\u0003\u0002\u0002\u0002\u0c52\u0c50",
    "\u0003\u0002\u0002\u0002\u0c52\u0c53\u0003\u0002\u0002\u0002\u0c53\u0c62",
    "\u0003\u0002\u0002\u0002\u0c54\u0c55\u0007:\u0002\u0002\u0c55\u0c56",
    "\bl\u0001\u0002\u0c56\u0c57\u0005\u00c8e\u0002\u0c57\u0c58\bl\u0001",
    "\u0002\u0c58\u0c59\u0007\u0083\u0002\u0002\u0c59\u0c5a\bl\u0001\u0002",
    "\u0c5a\u0c5b\u0005\u00d2j\u0002\u0c5b\u0c5c\bl\u0001\u0002\u0c5c\u0c5e",
    "\u0003\u0002\u0002\u0002\u0c5d\u0c54\u0003\u0002\u0002\u0002\u0c5e\u0c5f",
    "\u0003\u0002\u0002\u0002\u0c5f\u0c5d\u0003\u0002\u0002\u0002\u0c5f\u0c60",
    "\u0003\u0002\u0002\u0002\u0c60\u0c62\u0003\u0002\u0002\u0002\u0c61\u0c45",
    "\u0003\u0002\u0002\u0002\u0c61\u0c5d\u0003\u0002\u0002\u0002\u0c62\u0c68",
    "\u0003\u0002\u0002\u0002\u0c63\u0c64\u0007S\u0002\u0002\u0c64\u0c65",
    "\bl\u0001\u0002\u0c65\u0c66\u0005\u00d2j\u0002\u0c66\u0c67\bl\u0001",
    "\u0002\u0c67\u0c69\u0003\u0002\u0002\u0002\u0c68\u0c63\u0003\u0002\u0002",
    "\u0002\u0c68\u0c69\u0003\u0002\u0002\u0002\u0c69\u0c6a\u0003\u0002\u0002",
    "\u0002\u0c6a\u0c6b\u0007T\u0002\u0002\u0c6b\u0c6c\bl\u0001\u0002\u0c6c",
    "\u0c8d\u0003\u0002\u0002\u0002\u0c6d\u0c6e\u00073\u0002\u0002\u0c6e",
    "\u0c6f\bl\u0001\u0002\u0c6f\u0c70\u0005\u00dep\u0002\u0c70\u0c71\bl",
    "\u0001\u0002\u0c71\u0c72\bl\u0001\u0002\u0c72\u0c8d\u0003\u0002\u0002",
    "\u0002\u0c73\u0c74\u0005\u00dep\u0002\u0c74\u0c75\bl\u0001\u0002\u0c75",
    "\u0c7e\bl\u0001\u0002\u0c76\u0c77\bl\u0001\u0002\u0c77\u0c78\u0007\u0091",
    "\u0002\u0002\u0c78\u0c79\bl\u0001\u0002\u0c79\u0c7a\u0007\b\u0002\u0002",
    "\u0c7a\u0c7b\u0005\u00e6t\u0002\u0c7b\u0c7c\u0007\t\u0002\u0002\u0c7c",
    "\u0c7d\bl\u0001\u0002\u0c7d\u0c7f\u0003\u0002\u0002\u0002\u0c7e\u0c76",
    "\u0003\u0002\u0002\u0002\u0c7e\u0c7f\u0003\u0002\u0002\u0002\u0c7f\u0c8d",
    "\u0003\u0002\u0002\u0002\u0c80\u0c81\u0007\u0007\u0002\u0002\u0c81\u0c82",
    "\bl\u0001\u0002\u0c82\u0c88\bl\u0001\u0002\u0c83\u0c84\u0005\u00dep",
    "\u0002\u0c84\u0c85\bl\u0001\u0002\u0c85\u0c89\u0003\u0002\u0002\u0002",
    "\u0c86\u0c87\u0007=\u0002\u0002\u0c87\u0c89\bl\u0001\u0002\u0c88\u0c83",
    "\u0003\u0002\u0002\u0002\u0c88\u0c86\u0003\u0002\u0002\u0002\u0c89\u0c8d",
    "\u0003\u0002\u0002\u0002\u0c8a\u0c8b\u0007\u0012\u0002\u0002\u0c8b\u0c8d",
    "\bl\u0001\u0002\u0c8c\u0c33\u0003\u0002\u0002\u0002\u0c8c\u0c3d\u0003",
    "\u0002\u0002\u0002\u0c8c\u0c40\u0003\u0002\u0002\u0002\u0c8c\u0c43\u0003",
    "\u0002\u0002\u0002\u0c8c\u0c6d\u0003\u0002\u0002\u0002\u0c8c\u0c73\u0003",
    "\u0002\u0002\u0002\u0c8c\u0c80\u0003\u0002\u0002\u0002\u0c8c\u0c8a\u0003",
    "\u0002\u0002\u0002\u0c8d\u00d7\u0003\u0002\u0002\u0002\u0c8e\u0cbf\u0007",
    "\b\u0002\u0002\u0c8f\u0c91\u0005\u0098M\u0002\u0c90\u0c92\u0005\u0094",
    "K\u0002\u0c91\u0c90\u0003\u0002\u0002\u0002\u0c91\u0c92\u0003\u0002",
    "\u0002\u0002\u0c92\u0c93\u0003\u0002\u0002\u0002\u0c93\u0c94\bm\u0001",
    "\u0002\u0c94\u0cc0\u0003\u0002\u0002\u0002\u0c95\u0c97\u0005\u00ceh",
    "\u0002\u0c96\u0c98\u0005\u00caf\u0002\u0c97\u0c96\u0003\u0002\u0002",
    "\u0002\u0c97\u0c98\u0003\u0002\u0002\u0002\u0c98\u0c99\u0003\u0002\u0002",
    "\u0002\u0c99\u0ca1\bm\u0001\u0002\u0c9a\u0c9b\u0007\u0005\u0002\u0002",
    "\u0c9b\u0c9c\bm\u0001\u0002\u0c9c\u0c9d\u0005\u00c8e\u0002\u0c9d\u0c9e",
    "\bm\u0001\u0002\u0c9e\u0ca0\u0003\u0002\u0002\u0002\u0c9f\u0c9a\u0003",
    "\u0002\u0002\u0002\u0ca0\u0ca3\u0003\u0002\u0002\u0002\u0ca1\u0c9f\u0003",
    "\u0002\u0002\u0002\u0ca1\u0ca2\u0003\u0002\u0002\u0002\u0ca2\u0cc0\u0003",
    "\u0002\u0002\u0002\u0ca3\u0ca1\u0003\u0002\u0002\u0002\u0ca4\u0ca5\u0005",
    "\u00d8m\u0002\u0ca5\u0cbd\bm\u0001\u0002\u0ca6\u0ca7\u0005\u0094K\u0002",
    "\u0ca7\u0ca8\bm\u0001\u0002\u0ca8\u0cbe\u0003\u0002\u0002\u0002\u0ca9",
    "\u0cab\u0005\u00d4k\u0002\u0caa\u0ca9\u0003\u0002\u0002\u0002\u0caa",
    "\u0cab\u0003\u0002\u0002\u0002\u0cab\u0cad\u0003\u0002\u0002\u0002\u0cac",
    "\u0cae\u0005\u00d0i\u0002\u0cad\u0cac\u0003\u0002\u0002\u0002\u0cad",
    "\u0cae\u0003\u0002\u0002\u0002\u0cae\u0cb0\u0003\u0002\u0002\u0002\u0caf",
    "\u0cb1\u0005\u00caf\u0002\u0cb0\u0caf\u0003\u0002\u0002\u0002\u0cb0",
    "\u0cb1\u0003\u0002\u0002\u0002\u0cb1\u0cb2\u0003\u0002\u0002\u0002\u0cb2",
    "\u0cba\bm\u0001\u0002\u0cb3\u0cb4\u0007\u0005\u0002\u0002\u0cb4\u0cb5",
    "\bm\u0001\u0002\u0cb5\u0cb6\u0005\u00c8e\u0002\u0cb6\u0cb7\bm\u0001",
    "\u0002\u0cb7\u0cb9\u0003\u0002\u0002\u0002\u0cb8\u0cb3\u0003\u0002\u0002",
    "\u0002\u0cb9\u0cbc\u0003\u0002\u0002\u0002\u0cba\u0cb8\u0003\u0002\u0002",
    "\u0002\u0cba\u0cbb\u0003\u0002\u0002\u0002\u0cbb\u0cbe\u0003\u0002\u0002",
    "\u0002\u0cbc\u0cba\u0003\u0002\u0002\u0002\u0cbd\u0ca6\u0003\u0002\u0002",
    "\u0002\u0cbd\u0caa\u0003\u0002\u0002\u0002\u0cbe\u0cc0\u0003\u0002\u0002",
    "\u0002\u0cbf\u0c8f\u0003\u0002\u0002\u0002\u0cbf\u0c95\u0003\u0002\u0002",
    "\u0002\u0cbf\u0ca4\u0003\u0002\u0002\u0002\u0cc0\u0cc1\u0003\u0002\u0002",
    "\u0002\u0cc1\u0cc2\u0007\t\u0002\u0002\u0cc2\u0cc3\bm\u0001\u0002\u0cc3",
    "\u00d9\u0003\u0002\u0002\u0002\u0cc4\u0cc5\u0007-\u0002\u0002\u0cc5",
    "\u0cc6\u0007\b\u0002\u0002\u0cc6\u0cc7\bn\u0001\u0002\u0cc7\u0cc8\u0005",
    "\u00d2j\u0002\u0cc8\u0cc9\u0007*\u0002\u0002\u0cc9\u0cca\u0005\u0084",
    "C\u0002\u0cca\u0ccb\bn\u0001\u0002\u0ccb\u0ccc\u0007\t\u0002\u0002\u0ccc",
    "\u0ccd\bn\u0001\u0002\u0ccd\u00db\u0003\u0002\u0002\u0002\u0cce\u0ccf",
    "\u0005\u011a\u008e\u0002\u0ccf\u0cd6\bo\u0001\u0002\u0cd0\u0cd1\u0007",
    "\u0011\u0002\u0002\u0cd1\u0cd2\u0005\u011a\u008e\u0002\u0cd2\u0cd3\b",
    "o\u0001\u0002\u0cd3\u0cd5\u0003\u0002\u0002\u0002\u0cd4\u0cd0\u0003",
    "\u0002\u0002\u0002\u0cd5\u0cd8\u0003\u0002\u0002\u0002\u0cd6\u0cd4\u0003",
    "\u0002\u0002\u0002\u0cd6\u0cd7\u0003\u0002\u0002\u0002\u0cd7\u00dd\u0003",
    "\u0002\u0002\u0002\u0cd8\u0cd6\u0003\u0002\u0002\u0002\u0cd9\u0cda\u0005",
    "\u011a\u008e\u0002\u0cda\u0ce0\bp\u0001\u0002\u0cdb\u0cdd\u0005\u00e0",
    "q\u0002\u0cdc\u0cde\u0005\u00f6|\u0002\u0cdd\u0cdc\u0003\u0002\u0002",
    "\u0002\u0cdd\u0cde\u0003\u0002\u0002\u0002\u0cde\u0ce1\u0003\u0002\u0002",
    "\u0002\u0cdf\u0ce1\u0005\u00f6|\u0002\u0ce0\u0cdb\u0003\u0002\u0002",
    "\u0002\u0ce0\u0cdf\u0003\u0002\u0002\u0002\u0ce0\u0ce1\u0003\u0002\u0002",
    "\u0002\u0ce1\u0cee\u0003\u0002\u0002\u0002\u0ce2\u0ce3\u0007\u0011\u0002",
    "\u0002\u0ce3\u0ce4\u0005\u011a\u008e\u0002\u0ce4\u0cea\bp\u0001\u0002",
    "\u0ce5\u0ce7\u0005\u00e0q\u0002\u0ce6\u0ce8\u0005\u00f6|\u0002\u0ce7",
    "\u0ce6\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0003\u0002\u0002\u0002\u0ce8",
    "\u0ceb\u0003\u0002\u0002\u0002\u0ce9\u0ceb\u0005\u00f6|\u0002\u0cea",
    "\u0ce5\u0003\u0002\u0002\u0002\u0cea\u0ce9\u0003\u0002\u0002\u0002\u0cea",
    "\u0ceb\u0003\u0002\u0002\u0002\u0ceb\u0ced\u0003\u0002\u0002\u0002\u0cec",
    "\u0ce2\u0003\u0002\u0002\u0002\u0ced\u0cf0\u0003\u0002\u0002\u0002\u0cee",
    "\u0cec\u0003\u0002\u0002\u0002\u0cee\u0cef\u0003\u0002\u0002\u0002\u0cef",
    "\u00df\u0003\u0002\u0002\u0002\u0cf0\u0cee\u0003\u0002\u0002\u0002\u0cf1",
    "\u0cf2\bq\u0001\u0002\u0cf2\u0cf3\u0007\b\u0002\u0002\u0cf3\u0d22\b",
    "q\u0001\u0002\u0cf4\u0cf5\bq\u0001\u0002\u0cf5\u0cf6\u0007\u0092\u0002",
    "\u0002\u0cf6\u0cf7\u0007\u0007\u0002\u0002\u0cf7\u0d00\u0005\u00e2r",
    "\u0002\u0cf8\u0cf9\u0007\u0005\u0002\u0002\u0cf9\u0cfa\bq\u0001\u0002",
    "\u0cfa\u0cfb\u0005\u011a\u008e\u0002\u0cfb\u0cfc\u0007\u0007\u0002\u0002",
    "\u0cfc\u0cfd\u0005\u00e2r\u0002\u0cfd\u0cff\u0003\u0002\u0002\u0002",
    "\u0cfe\u0cf8\u0003\u0002\u0002\u0002\u0cff\u0d02\u0003\u0002\u0002\u0002",
    "\u0d00\u0cfe\u0003\u0002\u0002\u0002\u0d00\u0d01\u0003\u0002\u0002\u0002",
    "\u0d01\u0d23\u0003\u0002\u0002\u0002\u0d02\u0d00\u0003\u0002\u0002\u0002",
    "\u0d03\u0d04\bq\u0001\u0002\u0d04\u0d05\u0007\u0093\u0002\u0002\u0d05",
    "\u0d06\u0007\u001b\u0002\u0002\u0d06\u0d0f\u0005\u00e2r\u0002\u0d07",
    "\u0d08\u0007\u0005\u0002\u0002\u0d08\u0d09\bq\u0001\u0002\u0d09\u0d0a",
    "\u0005\u011a\u008e\u0002\u0d0a\u0d0b\u0007\u001b\u0002\u0002\u0d0b\u0d0c",
    "\u0005\u00e2r\u0002\u0d0c\u0d0e\u0003\u0002\u0002\u0002\u0d0d\u0d07",
    "\u0003\u0002\u0002\u0002\u0d0e\u0d11\u0003\u0002\u0002\u0002\u0d0f\u0d0d",
    "\u0003\u0002\u0002\u0002\u0d0f\u0d10\u0003\u0002\u0002\u0002\u0d10\u0d23",
    "\u0003\u0002\u0002\u0002\u0d11\u0d0f\u0003\u0002\u0002\u0002\u0d12\u0d13",
    "\bq\u0001\u0002\u0d13\u0d19\u0005\u00e4s\u0002\u0d14\u0d15\u0007\u0005",
    "\u0002\u0002\u0d15\u0d16\bq\u0001\u0002\u0d16\u0d18\u0005\u00e4s\u0002",
    "\u0d17\u0d14\u0003\u0002\u0002\u0002\u0d18\u0d1b\u0003\u0002\u0002\u0002",
    "\u0d19\u0d17\u0003\u0002\u0002\u0002\u0d19\u0d1a\u0003\u0002\u0002\u0002",
    "\u0d1a\u0d1f\u0003\u0002\u0002\u0002\u0d1b\u0d19\u0003\u0002\u0002\u0002",
    "\u0d1c\u0d1d\u0005\u00eav\u0002\u0d1d\u0d1e\bq\u0001\u0002\u0d1e\u0d20",
    "\u0003\u0002\u0002\u0002\u0d1f\u0d1c\u0003\u0002\u0002\u0002\u0d1f\u0d20",
    "\u0003\u0002\u0002\u0002\u0d20\u0d23\u0003\u0002\u0002\u0002\u0d21\u0d23",
    "\bq\u0001\u0002\u0d22\u0cf4\u0003\u0002\u0002\u0002\u0d22\u0d03\u0003",
    "\u0002\u0002\u0002\u0d22\u0d12\u0003\u0002\u0002\u0002\u0d22\u0d21\u0003",
    "\u0002\u0002\u0002\u0d23\u0d24\u0003\u0002\u0002\u0002\u0d24\u0d25\u0007",
    "\t\u0002\u0002\u0d25\u0d26\bq\u0001\u0002\u0d26\u00e1\u0003\u0002\u0002",
    "\u0002\u0d27\u0d28\u0005\u00d2j\u0002\u0d28\u0d29\br\u0001\u0002\u0d29",
    "\u00e3\u0003\u0002\u0002\u0002\u0d2a\u0d2b\u0005\u00d2j\u0002\u0d2b",
    "\u0d2c\bs\u0001\u0002\u0d2c\u0d38\u0003\u0002\u0002\u0002\u0d2d\u0d2e",
    "\u0007\u0095\u0002\u0002\u0d2e\u0d38\bs\u0001\u0002\u0d2f\u0d30\u0007",
    "\u0097\u0002\u0002\u0d30\u0d31\bs\u0001\u0002\u0d31\u0d32\u0005\u00d2",
    "j\u0002\u0d32\u0d33\bs\u0001\u0002\u0d33\u0d38\u0003\u0002\u0002\u0002",
    "\u0d34\u0d35\bs\u0001\u0002\u0d35\u0d36\t\n\u0002\u0002\u0d36\u0d38",
    "\bs\u0001\u0002\u0d37\u0d2a\u0003\u0002\u0002\u0002\u0d37\u0d2d\u0003",
    "\u0002\u0002\u0002\u0d37\u0d2f\u0003\u0002\u0002\u0002\u0d37\u0d34\u0003",
    "\u0002\u0002\u0002\u0d38\u0d4e\u0003\u0002\u0002\u0002\u0d39\u0d3d\b",
    "s\u0001\u0002\u0d3a\u0d3e\u0007\u0096\u0002\u0002\u0d3b\u0d3c\bs\u0001",
    "\u0002\u0d3c\u0d3e\t\u000b\u0002\u0002\u0d3d\u0d3a\u0003\u0002\u0002",
    "\u0002\u0d3d\u0d3b\u0003\u0002\u0002\u0002\u0d3e\u0d3f\u0003\u0002\u0002",
    "\u0002\u0d3f\u0d48\bs\u0001\u0002\u0d40\u0d41\u0005\u00d2j\u0002\u0d41",
    "\u0d42\bs\u0001\u0002\u0d42\u0d49\u0003\u0002\u0002\u0002\u0d43\u0d44",
    "\u0007\u0095\u0002\u0002\u0d44\u0d49\bs\u0001\u0002\u0d45\u0d46\bs\u0001",
    "\u0002\u0d46\u0d47\t\f\u0002\u0002\u0d47\u0d49\bs\u0001\u0002\u0d48",
    "\u0d40\u0003\u0002\u0002\u0002\u0d48\u0d43\u0003\u0002\u0002\u0002\u0d48",
    "\u0d45\u0003\u0002\u0002\u0002\u0d49\u0d4b\u0003\u0002\u0002\u0002\u0d4a",
    "\u0d39\u0003\u0002\u0002\u0002\u0d4b\u0d4c\u0003\u0002\u0002\u0002\u0d4c",
    "\u0d4a\u0003\u0002\u0002\u0002\u0d4c\u0d4d\u0003\u0002\u0002\u0002\u0d4d",
    "\u0d4f\u0003\u0002\u0002\u0002\u0d4e\u0d4a\u0003\u0002\u0002\u0002\u0d4e",
    "\u0d4f\u0003\u0002\u0002\u0002\u0d4f\u00e5\u0003\u0002\u0002\u0002\u0d50",
    "\u0d51\u0007y\u0002\u0002\u0d51\u0d52\bt\u0001\u0002\u0d52\u0d53\u0007",
    "+\u0002\u0002\u0d53\u0d54\bt\u0001\u0002\u0d54\u0d55\u0005\u00e8u\u0002",
    "\u0d55\u0d56\bt\u0001\u0002\u0d56\u0d58\u0003\u0002\u0002\u0002\u0d57",
    "\u0d50\u0003\u0002\u0002\u0002\u0d57\u0d58\u0003\u0002\u0002\u0002\u0d58",
    "\u0d60\u0003\u0002\u0002\u0002\u0d59\u0d5a\u0007v\u0002\u0002\u0d5a",
    "\u0d5b\bt\u0001\u0002\u0d5b\u0d5c\u0007+\u0002\u0002\u0d5c\u0d5d\bt",
    "\u0001\u0002\u0d5d\u0d5e\u0005\u00ecw\u0002\u0d5e\u0d5f\bt\u0001\u0002",
    "\u0d5f\u0d61\u0003\u0002\u0002\u0002\u0d60\u0d59\u0003\u0002\u0002\u0002",
    "\u0d60\u0d61\u0003\u0002\u0002\u0002\u0d61\u0d67\u0003\u0002\u0002\u0002",
    "\u0d62\u0d63\u0007\u0080\u0002\u0002\u0d63\u0d64\bt\u0001\u0002\u0d64",
    "\u0d65\u0005\u00f0y\u0002\u0d65\u0d66\bt\u0001\u0002\u0d66\u0d68\u0003",
    "\u0002\u0002\u0002\u0d67\u0d62\u0003\u0002\u0002\u0002\u0d67\u0d68\u0003",
    "\u0002\u0002\u0002\u0d68\u00e7\u0003\u0002\u0002\u0002\u0d69\u0d6a\u0005",
    "\u00d2j\u0002\u0d6a\u0d72\bu\u0001\u0002\u0d6b\u0d6c\u0007\u0005\u0002",
    "\u0002\u0d6c\u0d6d\bu\u0001\u0002\u0d6d\u0d6e\u0005\u00d2j\u0002\u0d6e",
    "\u0d6f\bu\u0001\u0002\u0d6f\u0d71\u0003\u0002\u0002\u0002\u0d70\u0d6b",
    "\u0003\u0002\u0002\u0002\u0d71\u0d74\u0003\u0002\u0002\u0002\u0d72\u0d70",
    "\u0003\u0002\u0002\u0002\u0d72\u0d73\u0003\u0002\u0002\u0002\u0d73\u00e9",
    "\u0003\u0002\u0002\u0002\u0d74\u0d72\u0003\u0002\u0002\u0002\u0d75\u0d76",
    "\u0007v\u0002\u0002\u0d76\u0d77\bv\u0001\u0002\u0d77\u0d78\u0007+\u0002",
    "\u0002\u0d78\u0d79\bv\u0001\u0002\u0d79\u0d7a\u0005\u00ecw\u0002\u0d7a",
    "\u0d7b\bv\u0001\u0002\u0d7b\u00eb\u0003\u0002\u0002\u0002\u0d7c\u0d82",
    "\u0005\u00eex\u0002\u0d7d\u0d7e\u0007\u0005\u0002\u0002\u0d7e\u0d7f",
    "\bw\u0001\u0002\u0d7f\u0d81\u0005\u00eex\u0002\u0d80\u0d7d\u0003\u0002",
    "\u0002\u0002\u0d81\u0d84\u0003\u0002\u0002\u0002\u0d82\u0d80\u0003\u0002",
    "\u0002\u0002\u0d82\u0d83\u0003\u0002\u0002\u0002\u0d83\u00ed\u0003\u0002",
    "\u0002\u0002\u0d84\u0d82\u0003\u0002\u0002\u0002\u0d85\u0d86\u0005\u00d2",
    "j\u0002\u0d86\u0d8b\bx\u0001\u0002\u0d87\u0d88\u0007E\u0002\u0002\u0d88",
    "\u0d8c\bx\u0001\u0002\u0d89\u0d8a\u0007Q\u0002\u0002\u0d8a\u0d8c\bx",
    "\u0001\u0002\u0d8b\u0d87\u0003\u0002\u0002\u0002\u0d8b\u0d89\u0003\u0002",
    "\u0002\u0002\u0d8b\u0d8c\u0003\u0002\u0002\u0002\u0d8c\u0d91\u0003\u0002",
    "\u0002\u0002\u0d8d\u0d8e\u0007r\u0002\u0002\u0d8e\u0d8f\bx\u0001\u0002",
    "\u0d8f\u0d90\t\u0005\u0002\u0002\u0d90\u0d92\bx\u0001\u0002\u0d91\u0d8d",
    "\u0003\u0002\u0002\u0002\u0d91\u0d92\u0003\u0002\u0002\u0002\u0d92\u00ef",
    "\u0003\u0002\u0002\u0002\u0d93\u0d9c\u0005\u00f4{\u0002\u0d94\u0d95",
    "\u0007H\u0002\u0002\u0d95\u0d96\by\u0001\u0002\u0d96\u0d97\u0005\u00f2",
    "z\u0002\u0d97\u0d98\u0007A\u0002\u0002\u0d98\u0d99\by\u0001\u0002\u0d99",
    "\u0d9a\u0005\u00f2z\u0002\u0d9a\u0d9c\u0003\u0002\u0002\u0002\u0d9b",
    "\u0d93\u0003\u0002\u0002\u0002\u0d9b\u0d94\u0003\u0002\u0002\u0002\u0d9c",
    "\u00f1\u0003\u0002\u0002\u0002\u0d9d\u0d9e\u0007\u0087\u0002\u0002\u0d9e",
    "\u0d9f\bz\u0001\u0002\u0d9f\u0da0\t\r\u0002\u0002\u0da0\u0daa\bz\u0001",
    "\u0002\u0da1\u0da2\u0007=\u0002\u0002\u0da2\u0da3\bz\u0001\u0002\u0da3",
    "\u0da4\t\r\u0002\u0002\u0da4\u0daa\bz\u0001\u0002\u0da5\u0da6\u0007",
    "M\u0002\u0002\u0da6\u0da7\bz\u0001\u0002\u0da7\u0da8\u0007\u007f\u0002",
    "\u0002\u0da8\u0daa\bz\u0001\u0002\u0da9\u0d9d\u0003\u0002\u0002\u0002",
    "\u0da9\u0da1\u0003\u0002\u0002\u0002\u0da9\u0da5\u0003\u0002\u0002\u0002",
    "\u0daa\u00f3\u0003\u0002\u0002\u0002\u0dab\u0dac\u0007\u0087\u0002\u0002",
    "\u0dac\u0dad\b{\u0001\u0002\u0dad\u0dae\u0007z\u0002\u0002\u0dae\u0db8",
    "\b{\u0001\u0002\u0daf\u0db0\u0007=\u0002\u0002\u0db0\u0db1\b{\u0001",
    "\u0002\u0db1\u0db2\u0007z\u0002\u0002\u0db2\u0db8\b{\u0001\u0002\u0db3",
    "\u0db4\u0007M\u0002\u0002\u0db4\u0db5\b{\u0001\u0002\u0db5\u0db6\u0007",
    "\u007f\u0002\u0002\u0db6\u0db8\b{\u0001\u0002\u0db7\u0dab\u0003\u0002",
    "\u0002\u0002\u0db7\u0daf\u0003\u0002\u0002\u0002\u0db7\u0db3\u0003\u0002",
    "\u0002\u0002\u0db8\u00f5\u0003\u0002\u0002\u0002\u0db9\u0dba\b|\u0001",
    "\u0002\u0dba\u0dbc\u0007\r\u0002\u0002\u0dbb\u0dbd\u0005\u00f8}\u0002",
    "\u0dbc\u0dbb\u0003\u0002\u0002\u0002\u0dbc\u0dbd\u0003\u0002\u0002\u0002",
    "\u0dbd\u0dbe\u0003\u0002\u0002\u0002\u0dbe\u0dce\u0005\u00fa~\u0002",
    "\u0dbf\u0dc0\u0007b\u0002\u0002\u0dc0\u0dc1\u0007+\u0002\u0002\u0dc1",
    "\u0dc2\u0005\u00d2j\u0002\u0dc2\u0dc9\b|\u0001\u0002\u0dc3\u0dc4\u0007",
    "\u0005\u0002\u0002\u0dc4\u0dc5\u0005\u00d2j\u0002\u0dc5\u0dc6\b|\u0001",
    "\u0002\u0dc6\u0dc8\u0003\u0002\u0002\u0002\u0dc7\u0dc3\u0003\u0002\u0002",
    "\u0002\u0dc8\u0dcb\u0003\u0002\u0002\u0002\u0dc9\u0dc7\u0003\u0002\u0002",
    "\u0002\u0dc9\u0dca\u0003\u0002\u0002\u0002\u0dca\u0dcc\u0003\u0002\u0002",
    "\u0002\u0dcb\u0dc9\u0003\u0002\u0002\u0002\u0dcc\u0dcd\b|\u0001\u0002",
    "\u0dcd\u0dcf\u0003\u0002\u0002\u0002\u0dce\u0dbf\u0003\u0002\u0002\u0002",
    "\u0dce\u0dcf\u0003\u0002\u0002\u0002\u0dcf\u0dd5\u0003\u0002\u0002\u0002",
    "\u0dd0\u0dd1\u0007c\u0002\u0002\u0dd1\u0dd2\u0005\u00c8e\u0002\u0dd2",
    "\u0dd3\b|\u0001\u0002\u0dd3\u0dd4\b|\u0001\u0002\u0dd4\u0dd6\u0003\u0002",
    "\u0002\u0002\u0dd5\u0dd0\u0003\u0002\u0002\u0002\u0dd5\u0dd6\u0003\u0002",
    "\u0002\u0002\u0dd6\u0ddc\u0003\u0002\u0002\u0002\u0dd7\u0dd8\b|\u0001",
    "\u0002\u0dd8\u0dd9\u0005\u00bc_\u0002\u0dd9\u0dda\b|\u0001\u0002\u0dda",
    "\u0ddb\b|\u0001\u0002\u0ddb\u0ddd\u0003\u0002\u0002\u0002\u0ddc\u0dd7",
    "\u0003\u0002\u0002\u0002\u0ddc\u0ddd\u0003\u0002\u0002\u0002\u0ddd\u0de3",
    "\u0003\u0002\u0002\u0002\u0dde\u0ddf\b|\u0001\u0002\u0ddf\u0de0\u0005",
    "\u00be`\u0002\u0de0\u0de1\b|\u0001\u0002\u0de1\u0de2\b|\u0001\u0002",
    "\u0de2\u0de4\u0003\u0002\u0002\u0002\u0de3\u0dde\u0003\u0002\u0002\u0002",
    "\u0de3\u0de4\u0003\u0002\u0002\u0002\u0de4\u0de5\u0003\u0002\u0002\u0002",
    "\u0de5\u0de6\u0007\u0010\u0002\u0002\u0de6\u00f7\u0003\u0002\u0002\u0002",
    "\u0de7\u0de8\b}\u0001\u0002\u0de8\u0de9\u0007=\u0002\u0002\u0de9\u0dea",
    "\b}\u0001\u0002\u0dea\u0deb\u0007\u0007\u0002\u0002\u0deb\u00f9\u0003",
    "\u0002\u0002\u0002\u0dec\u0ded\b~\u0001\u0002\u0ded\u0dee\u0005\u00fc",
    "\u007f\u0002\u0dee\u0def\u0005\u00c8e\u0002\u0def\u0df0\b~\u0001\u0002",
    "\u0df0\u00fb\u0003\u0002\u0002\u0002\u0df1\u0df2\b\u007f\u0001\u0002",
    "\u0df2\u0df3\u0007;\u0002\u0002\u0df3\u00fd\u0003\u0002\u0002\u0002",
    "\u0df4\u0df5\u0007\u001c\u0002\u0002\u0df5\u0dff\b\u0080\u0001\u0002",
    "\u0df6\u0e00\u0005\u0104\u0083\u0002\u0df7\u0df8\b\u0080\u0001\u0002",
    "\u0df8\u0dfb\u0005\u0108\u0085\u0002\u0df9\u0dfa\u0007\u001d\u0002\u0002",
    "\u0dfa\u0dfc\u0005\u010a\u0086\u0002\u0dfb\u0df9\u0003\u0002\u0002\u0002",
    "\u0dfb\u0dfc\u0003\u0002\u0002\u0002\u0dfc\u0dfd\u0003\u0002\u0002\u0002",
    "\u0dfd\u0dfe\b\u0080\u0001\u0002\u0dfe\u0e00\u0003\u0002\u0002\u0002",
    "\u0dff\u0df6\u0003\u0002\u0002\u0002\u0dff\u0df7\u0003\u0002\u0002\u0002",
    "\u0e00\u00ff\u0003\u0002\u0002\u0002\u0e01\u0e02\u0007\u001c\u0002\u0002",
    "\u0e02\u0e0f\b\u0081\u0001\u0002\u0e03\u0e10\u0005\u0104\u0083\u0002",
    "\u0e04\u0e05\b\u0081\u0001\u0002\u0e05\u0e08\u0005\u0108\u0085\u0002",
    "\u0e06\u0e07\u0007\u001d\u0002\u0002\u0e07\u0e09\u0005\u010a\u0086\u0002",
    "\u0e08\u0e06\u0003\u0002\u0002\u0002\u0e08\u0e09\u0003\u0002\u0002\u0002",
    "\u0e09\u0e0d\u0003\u0002\u0002\u0002\u0e0a\u0e0b\u0007\u0007\u0002\u0002",
    "\u0e0b\u0e0c\b\u0081\u0001\u0002\u0e0c\u0e0e\u0005\u010c\u0087\u0002",
    "\u0e0d\u0e0a\u0003\u0002\u0002\u0002\u0e0d\u0e0e\u0003\u0002\u0002\u0002",
    "\u0e0e\u0e10\u0003\u0002\u0002\u0002\u0e0f\u0e03\u0003\u0002\u0002\u0002",
    "\u0e0f\u0e04\u0003\u0002\u0002\u0002\u0e10\u0101\u0003\u0002\u0002\u0002",
    "\u0e11\u0e12\u0007\u001c\u0002\u0002\u0e12\u0e2d\b\u0082\u0001\u0002",
    "\u0e13\u0e2e\u0005\u0104\u0083\u0002\u0e14\u0e15\b\u0082\u0001\u0002",
    "\u0e15\u0e16\u0005\u0108\u0085\u0002\u0e16\u0e19\b\u0082\u0001\u0002",
    "\u0e17\u0e18\u0007\u0092\u0002\u0002\u0e18\u0e1a\u0005\u010a\u0086\u0002",
    "\u0e19\u0e17\u0003\u0002\u0002\u0002\u0e19\u0e1a\u0003\u0002\u0002\u0002",
    "\u0e1a\u0e1b\u0003\u0002\u0002\u0002\u0e1b\u0e2b\b\u0082\u0001\u0002",
    "\u0e1c\u0e1d\u0007\u0093\u0002\u0002\u0e1d\u0e29\b\u0082\u0001\u0002",
    "\u0e1e\u0e2a\u0005\u010e\u0088\u0002\u0e1f\u0e20\u0007\u001c\u0002\u0002",
    "\u0e20\u0e23\u0005\u0108\u0085\u0002\u0e21\u0e23\u0005\u0108\u0085\u0002",
    "\u0e22\u0e1f\u0003\u0002\u0002\u0002\u0e22\u0e21\u0003\u0002\u0002\u0002",
    "\u0e23\u0e24\u0003\u0002\u0002\u0002\u0e24\u0e27\b\u0082\u0001\u0002",
    "\u0e25\u0e26\u0007\u0092\u0002\u0002\u0e26\u0e28\u0005\u010a\u0086\u0002",
    "\u0e27\u0e25\u0003\u0002\u0002\u0002\u0e27\u0e28\u0003\u0002\u0002\u0002",
    "\u0e28\u0e2a\u0003\u0002\u0002\u0002\u0e29\u0e1e\u0003\u0002\u0002\u0002",
    "\u0e29\u0e22\u0003\u0002\u0002\u0002\u0e2a\u0e2c\u0003\u0002\u0002\u0002",
    "\u0e2b\u0e1c\u0003\u0002\u0002\u0002\u0e2b\u0e2c\u0003\u0002\u0002\u0002",
    "\u0e2c\u0e2e\u0003\u0002\u0002\u0002\u0e2d\u0e13\u0003\u0002\u0002\u0002",
    "\u0e2d\u0e14\u0003\u0002\u0002\u0002\u0e2e\u0103\u0003\u0002\u0002\u0002",
    "\u0e2f\u0e30\u0007\b\u0002\u0002\u0e30\u0e31\b\u0083\u0001\u0002\u0e31",
    "\u0e37\u0005\u0106\u0084\u0002\u0e32\u0e33\u0007\u0005\u0002\u0002\u0e33",
    "\u0e34\b\u0083\u0001\u0002\u0e34\u0e36\u0005\u0106\u0084\u0002\u0e35",
    "\u0e32\u0003\u0002\u0002\u0002\u0e36\u0e39\u0003\u0002\u0002\u0002\u0e37",
    "\u0e35\u0003\u0002\u0002\u0002\u0e37\u0e38\u0003\u0002\u0002\u0002\u0e38",
    "\u0e3a\u0003\u0002\u0002\u0002\u0e39\u0e37\u0003\u0002\u0002\u0002\u0e3a",
    "\u0e3b\u0007\t\u0002\u0002\u0e3b\u0105\u0003\u0002\u0002\u0002\u0e3c",
    "\u0e3f\u0005\u0108\u0085\u0002\u0e3d\u0e3e\u0007\u001d\u0002\u0002\u0e3e",
    "\u0e40\u0005\u010a\u0086\u0002\u0e3f\u0e3d\u0003\u0002\u0002\u0002\u0e3f",
    "\u0e40\u0003\u0002\u0002\u0002\u0e40\u0e44\u0003\u0002\u0002\u0002\u0e41",
    "\u0e42\u0007\u0007\u0002\u0002\u0e42\u0e43\b\u0084\u0001\u0002\u0e43",
    "\u0e45\u0005\u010c\u0087\u0002\u0e44\u0e41\u0003\u0002\u0002\u0002\u0e44",
    "\u0e45\u0003\u0002\u0002\u0002\u0e45\u0107\u0003\u0002\u0002\u0002\u0e46",
    "\u0e47\u0005\u011a\u008e\u0002\u0e47\u0e51\b\u0085\u0001\u0002\u0e48",
    "\u0e4a\u0007\u0011\u0002\u0002\u0e49\u0e4b\u0007\u001c\u0002\u0002\u0e4a",
    "\u0e49\u0003\u0002\u0002\u0002\u0e4a\u0e4b\u0003\u0002\u0002\u0002\u0e4b",
    "\u0e4c\u0003\u0002\u0002\u0002\u0e4c\u0e4d\u0005\u011a\u008e\u0002\u0e4d",
    "\u0e4e\b\u0085\u0001\u0002\u0e4e\u0e50\u0003\u0002\u0002\u0002\u0e4f",
    "\u0e48\u0003\u0002\u0002\u0002\u0e50\u0e53\u0003\u0002\u0002\u0002\u0e51",
    "\u0e4f\u0003\u0002\u0002\u0002\u0e51\u0e52\u0003\u0002\u0002\u0002\u0e52",
    "\u0109\u0003\u0002\u0002\u0002\u0e53\u0e51\u0003\u0002\u0002\u0002\u0e54",
    "\u0e55\b\u0086\u0001\u0002\u0e55\u0e56\u0005\u00dco\u0002\u0e56\u0e57",
    "\b\u0086\u0001\u0002\u0e57\u010b\u0003\u0002\u0002\u0002\u0e58\u0e62",
    "\u0005\u010e\u0088\u0002\u0e59\u0e5b\u0007\u001c\u0002\u0002\u0e5a\u0e59",
    "\u0003\u0002\u0002\u0002\u0e5a\u0e5b\u0003\u0002\u0002\u0002\u0e5b\u0e5c",
    "\u0003\u0002\u0002\u0002\u0e5c\u0e5f\u0005\u0108\u0085\u0002\u0e5d\u0e5e",
    "\u0007\u001d\u0002\u0002\u0e5e\u0e60\u0005\u010a\u0086\u0002\u0e5f\u0e5d",
    "\u0003\u0002\u0002\u0002\u0e5f\u0e60\u0003\u0002\u0002\u0002\u0e60\u0e62",
    "\u0003\u0002\u0002\u0002\u0e61\u0e58\u0003\u0002\u0002\u0002\u0e61\u0e5a",
    "\u0003\u0002\u0002\u0002\u0e62\u010d\u0003\u0002\u0002\u0002\u0e63\u0e64",
    "\u0007\u0004\u0002\u0002\u0e64\u0e65\b\u0088\u0001\u0002\u0e65\u0e6b",
    "\u0005\u0110\u0089\u0002\u0e66\u0e67\u0007\u0005\u0002\u0002\u0e67\u0e68",
    "\b\u0088\u0001\u0002\u0e68\u0e6a\u0005\u0110\u0089\u0002\u0e69\u0e66",
    "\u0003\u0002\u0002\u0002\u0e6a\u0e6d\u0003\u0002\u0002\u0002\u0e6b\u0e69",
    "\u0003\u0002\u0002\u0002\u0e6b\u0e6c\u0003\u0002\u0002\u0002\u0e6c\u0e6e",
    "\u0003\u0002\u0002\u0002\u0e6d\u0e6b\u0003\u0002\u0002\u0002\u0e6e\u0e6f",
    "\u0007\u0006\u0002\u0002\u0e6f\u0ea7\u0003\u0002\u0002\u0002\u0e70\u0e71",
    "\u0007\r\u0002\u0002\u0e71\u0e72\b\u0088\u0001\u0002\u0e72\u0e94\b\u0088",
    "\u0001\u0002\u0e73\u0e74\u0005\u0114\u008b\u0002\u0e74\u0e75\b\u0088",
    "\u0001\u0002\u0e75\u0e7e\u0003\u0002\u0002\u0002\u0e76\u0e7a\u0007\u001e",
    "\u0002\u0002\u0e77\u0e78\u0007\u0088\u0002\u0002\u0e78\u0e79\u0007\u0084",
    "\u0002\u0002\u0e79\u0e7b\u0005\u0114\u008b\u0002\u0e7a\u0e77\u0003\u0002",
    "\u0002\u0002\u0e7a\u0e7b\u0003\u0002\u0002\u0002\u0e7b\u0e7c\u0003\u0002",
    "\u0002\u0002\u0e7c\u0e7e\b\u0088\u0001\u0002\u0e7d\u0e73\u0003\u0002",
    "\u0002\u0002\u0e7d\u0e76\u0003\u0002\u0002\u0002\u0e7e\u0e91\u0003\u0002",
    "\u0002\u0002\u0e7f\u0e80\u0007\u0005\u0002\u0002\u0e80\u0e81\b\u0088",
    "\u0001\u0002\u0e81\u0e8d\b\u0088\u0001\u0002\u0e82\u0e83\u0005\u0114",
    "\u008b\u0002\u0e83\u0e84\b\u0088\u0001\u0002\u0e84\u0e8e\u0003\u0002",
    "\u0002\u0002\u0e85\u0e86\b\u0088\u0001\u0002\u0e86\u0e8a\u0007\u001e",
    "\u0002\u0002\u0e87\u0e88\u0007\u0088\u0002\u0002\u0e88\u0e89\u0007\u0084",
    "\u0002\u0002\u0e89\u0e8b\u0005\u0114\u008b\u0002\u0e8a\u0e87\u0003\u0002",
    "\u0002\u0002\u0e8a\u0e8b\u0003\u0002\u0002\u0002\u0e8b\u0e8c\u0003\u0002",
    "\u0002\u0002\u0e8c\u0e8e\b\u0088\u0001\u0002\u0e8d\u0e82\u0003\u0002",
    "\u0002\u0002\u0e8d\u0e85\u0003\u0002\u0002\u0002\u0e8e\u0e90\u0003\u0002",
    "\u0002\u0002\u0e8f\u0e7f\u0003\u0002\u0002\u0002\u0e90\u0e93\u0003\u0002",
    "\u0002\u0002\u0e91\u0e8f\u0003\u0002\u0002\u0002\u0e91\u0e92\u0003\u0002",
    "\u0002\u0002\u0e92\u0e95\u0003\u0002\u0002\u0002\u0e93\u0e91\u0003\u0002",
    "\u0002\u0002\u0e94\u0e7d\u0003\u0002\u0002\u0002\u0e94\u0e95\u0003\u0002",
    "\u0002\u0002\u0e95\u0e96\u0003\u0002\u0002\u0002\u0e96\u0e97\u0007\u0010",
    "\u0002\u0002\u0e97\u0ea7\b\u0088\u0001\u0002\u0e98\u0e99\u0005\u0116",
    "\u008c\u0002\u0e99\u0e9a\b\u0088\u0001\u0002\u0e9a\u0ea7\u0003\u0002",
    "\u0002\u0002\u0e9b\u0e9e\u0007\u000b\u0002\u0002\u0e9c\u0e9e\u0007\f",
    "\u0002\u0002\u0e9d\u0e9b\u0003\u0002\u0002\u0002\u0e9d\u0e9c\u0003\u0002",
    "\u0002\u0002\u0e9e\u0e9f\u0003\u0002\u0002\u0002\u0e9f\u0ea0\u0007=",
    "\u0002\u0002\u0ea0\u0ea7\b\u0088\u0001\u0002\u0ea1\u0ea2\u0007\b\u0002",
    "\u0002\u0ea2\u0ea3\u0005\u00c8e\u0002\u0ea3\u0ea4\b\u0088\u0001\u0002",
    "\u0ea4\u0ea5\u0007\t\u0002\u0002\u0ea5\u0ea7\u0003\u0002\u0002\u0002",
    "\u0ea6\u0e63\u0003\u0002\u0002\u0002\u0ea6\u0e70\u0003\u0002\u0002\u0002",
    "\u0ea6\u0e98\u0003\u0002\u0002\u0002\u0ea6\u0e9d\u0003\u0002\u0002\u0002",
    "\u0ea6\u0ea1\u0003\u0002\u0002\u0002\u0ea7\u010f\u0003\u0002\u0002\u0002",
    "\u0ea8\u0eaa\u0007\u001c\u0002\u0002\u0ea9\u0ea8\u0003\u0002\u0002\u0002",
    "\u0ea9\u0eaa\u0003\u0002\u0002\u0002\u0eaa\u0eab\u0003\u0002\u0002\u0002",
    "\u0eab\u0eae\u0005\u0108\u0085\u0002\u0eac\u0ead\u0007\u001d\u0002\u0002",
    "\u0ead\u0eaf\u0005\u010a\u0086\u0002\u0eae\u0eac\u0003\u0002\u0002\u0002",
    "\u0eae\u0eaf\u0003\u0002\u0002\u0002\u0eaf\u0eb3\u0003\u0002\u0002\u0002",
    "\u0eb0\u0eb1\u0007\u0007\u0002\u0002\u0eb1\u0eb2\b\u0089\u0001\u0002",
    "\u0eb2\u0eb4\u0005\u010c\u0087\u0002\u0eb3\u0eb0\u0003\u0002\u0002\u0002",
    "\u0eb3\u0eb4\u0003\u0002\u0002\u0002\u0eb4\u0eb5\u0003\u0002\u0002\u0002",
    "\u0eb5\u0eb6\b\u0089\u0001\u0002\u0eb6\u0111\u0003\u0002\u0002\u0002",
    "\u0eb7\u0eb9\u0007\u001c\u0002\u0002\u0eb8\u0eb7\u0003\u0002\u0002\u0002",
    "\u0eb8\u0eb9\u0003\u0002\u0002\u0002\u0eb9\u0eba\u0003\u0002\u0002\u0002",
    "\u0eba\u0ec0\u0005\u0108\u0085\u0002\u0ebb\u0ebc\u0007\u0007\u0002\u0002",
    "\u0ebc\u0ebd\b\u008a\u0001\u0002\u0ebd\u0ebe\u0005\u0114\u008b\u0002",
    "\u0ebe\u0ebf\b\u008a\u0001\u0002\u0ebf\u0ec1\u0003\u0002\u0002\u0002",
    "\u0ec0\u0ebb\u0003\u0002\u0002\u0002\u0ec0\u0ec1\u0003\u0002\u0002\u0002",
    "\u0ec1\u0ec2\u0003\u0002\u0002\u0002\u0ec2\u0ec3\b\u008a\u0001\u0002",
    "\u0ec3\u0113\u0003\u0002\u0002\u0002\u0ec4\u0ec5\u0007\u0004\u0002\u0002",
    "\u0ec5\u0ec6\b\u008b\u0001\u0002\u0ec6\u0ec7\b\u008b\u0001\u0002\u0ec7",
    "\u0ecd\u0005\u0112\u008a\u0002\u0ec8\u0ec9\u0007\u0005\u0002\u0002\u0ec9",
    "\u0eca\b\u008b\u0001\u0002\u0eca\u0ecc\u0005\u0112\u008a\u0002\u0ecb",
    "\u0ec8\u0003\u0002\u0002\u0002\u0ecc\u0ecf\u0003\u0002\u0002\u0002\u0ecd",
    "\u0ecb\u0003\u0002\u0002\u0002\u0ecd\u0ece\u0003\u0002\u0002\u0002\u0ece",
    "\u0ed0\u0003\u0002\u0002\u0002\u0ecf\u0ecd\u0003\u0002\u0002\u0002\u0ed0",
    "\u0ed1\u0007\u0006\u0002\u0002\u0ed1\u0efc\u0003\u0002\u0002\u0002\u0ed2",
    "\u0ed3\u0007\r\u0002\u0002\u0ed3\u0ed4\b\u008b\u0001\u0002\u0ed4\u0ee2",
    "\b\u008b\u0001\u0002\u0ed5\u0ed6\u0005\u0114\u008b\u0002\u0ed6\u0edf",
    "\b\u008b\u0001\u0002\u0ed7\u0ed8\u0007\u0005\u0002\u0002\u0ed8\u0ed9",
    "\b\u008b\u0001\u0002\u0ed9\u0eda\b\u008b\u0001\u0002\u0eda\u0edb\u0005",
    "\u0114\u008b\u0002\u0edb\u0edc\b\u008b\u0001\u0002\u0edc\u0ede\u0003",
    "\u0002\u0002\u0002\u0edd\u0ed7\u0003\u0002\u0002\u0002\u0ede\u0ee1\u0003",
    "\u0002\u0002\u0002\u0edf\u0edd\u0003\u0002\u0002\u0002\u0edf\u0ee0\u0003",
    "\u0002\u0002\u0002\u0ee0\u0ee3\u0003\u0002\u0002\u0002\u0ee1\u0edf\u0003",
    "\u0002\u0002\u0002\u0ee2\u0ed5\u0003\u0002\u0002\u0002\u0ee2\u0ee3\u0003",
    "\u0002\u0002\u0002\u0ee3\u0ee4\u0003\u0002\u0002\u0002\u0ee4\u0efc\u0007",
    "\u0010\u0002\u0002\u0ee5\u0ee6\u0005\u0116\u008c\u0002\u0ee6\u0ee7\b",
    "\u008b\u0001\u0002\u0ee7\u0efc\u0003\u0002\u0002\u0002\u0ee8\u0eeb\u0007",
    "\u000b\u0002\u0002\u0ee9\u0eeb\u0007\f\u0002\u0002\u0eea\u0ee8\u0003",
    "\u0002\u0002\u0002\u0eea\u0ee9\u0003\u0002\u0002\u0002\u0eeb\u0eec\u0003",
    "\u0002\u0002\u0002\u0eec\u0eed\u0007=\u0002\u0002\u0eed\u0efc\b\u008b",
    "\u0001\u0002\u0eee\u0ef0\u0007\u001c\u0002\u0002\u0eef\u0eee\u0003\u0002",
    "\u0002\u0002\u0eef\u0ef0\u0003\u0002\u0002\u0002\u0ef0\u0ef1\u0003\u0002",
    "\u0002\u0002\u0ef1\u0ef4\u0005\u0108\u0085\u0002\u0ef2\u0ef3\u0007\u001d",
    "\u0002\u0002\u0ef3\u0ef5\u0005\u010a\u0086\u0002\u0ef4\u0ef2\u0003\u0002",
    "\u0002\u0002\u0ef4\u0ef5\u0003\u0002\u0002\u0002\u0ef5\u0efc\u0003\u0002",
    "\u0002\u0002\u0ef6\u0ef7\u0007\b\u0002\u0002\u0ef7\u0ef8\u0005\u00c8",
    "e\u0002\u0ef8\u0ef9\b\u008b\u0001\u0002\u0ef9\u0efa\u0007\t\u0002\u0002",
    "\u0efa\u0efc\u0003\u0002\u0002\u0002\u0efb\u0ec4\u0003\u0002\u0002\u0002",
    "\u0efb\u0ed2\u0003\u0002\u0002\u0002\u0efb\u0ee5\u0003\u0002\u0002\u0002",
    "\u0efb\u0eea\u0003\u0002\u0002\u0002\u0efb\u0eef\u0003\u0002\u0002\u0002",
    "\u0efb\u0ef6\u0003\u0002\u0002\u0002\u0efc\u0115\u0003\u0002\u0002\u0002",
    "\u0efd\u0efe\u0007\u001d\u0002\u0002\u0efe\u0eff\b\u008c\u0001\u0002",
    "\u0eff\u0f00\u0005\u011a\u008e\u0002\u0f00\u0f01\b\u008c\u0001\u0002",
    "\u0f01\u0f0d\u0003\u0002\u0002\u0002\u0f02\u0f03\u00075\u0002\u0002",
    "\u0f03\u0f0d\b\u008c\u0001\u0002\u0f04\u0f05\u0007\'\u0002\u0002\u0f05",
    "\u0f0d\b\u008c\u0001\u0002\u0f06\u0f07\u0007=\u0002\u0002\u0f07\u0f0d",
    "\b\u008c\u0001\u0002\u0f08\u0f09\u0007#\u0002\u0002\u0f09\u0f0d\b\u008c",
    "\u0001\u0002\u0f0a\u0f0b\u0007$\u0002\u0002\u0f0b\u0f0d\b\u008c\u0001",
    "\u0002\u0f0c\u0efd\u0003\u0002\u0002\u0002\u0f0c\u0f02\u0003\u0002\u0002",
    "\u0002\u0f0c\u0f04\u0003\u0002\u0002\u0002\u0f0c\u0f06\u0003\u0002\u0002",
    "\u0002\u0f0c\u0f08\u0003\u0002\u0002\u0002\u0f0c\u0f0a\u0003\u0002\u0002",
    "\u0002\u0f0d\u0117\u0003\u0002\u0002\u0002\u0f0e\u0f0f\u0007\u008c\u0002",
    "\u0002\u0f0f\u0119\u0003\u0002\u0002\u0002\u0f10\u0f11\t\u000e\u0002",
    "\u0002\u0f11\u011b\u0003\u0002\u0002\u0002\u01f9\u011f\u0125\u0127\u012d",
    "\u012f\u0132\u0144\u014f\u0157\u0159\u0165\u016b\u016f\u017a\u0184\u0189",
    "\u0190\u0195\u019a\u019e\u01a6\u01b2\u01b8\u01c1\u01c7\u01cf\u01de\u01e8",
    "\u01ec\u01f5\u01f7\u01ff\u020b\u0210\u0217\u021f\u0223\u022c\u022f\u0236",
    "\u0241\u0246\u024a\u0255\u025a\u025e\u0269\u026e\u0273\u0275\u027a\u027d",
    "\u0284\u028e\u0292\u0295\u0298\u029c\u02a3\u02ae\u02b3\u02bb\u02c6\u02cb",
    "\u02d3\u02d9\u02dd\u02e3\u02ec\u02f1\u02f9\u02ff\u0309\u0311\u0317\u031e",
    "\u032a\u0334\u033c\u0346\u034a\u0350\u0353\u035b\u0363\u0367\u036c\u0371",
    "\u0378\u0380\u0387\u038e\u0394\u0398\u03b3\u03ba\u03be\u03c2\u03c5\u03cb",
    "\u03d5\u03db\u03dd\u03df\u03eb\u03f4\u03f7\u0401\u040a\u0410\u0418\u041b",
    "\u0425\u042e\u0434\u043c\u043f\u0443\u0449\u044d\u0451\u0455\u0457\u046c",
    "\u0474\u0481\u048e\u0499\u04a2\u04b0\u04b3\u04bd\u04c2\u04c6\u04c8\u04d0",
    "\u04d6\u04dc\u04e4\u04ea\u04f0\u04fb\u0503\u0507\u050d\u0511\u0515\u051c",
    "\u0527\u052c\u0534\u0539\u0541\u0547\u0552\u0555\u055f\u0564\u056c\u0571",
    "\u0575\u0581\u0589\u0596\u0599\u059d\u059f\u05a7\u05af\u05bc\u05c9\u05cf",
    "\u05d2\u05d8\u05e0\u05e7\u05ef\u05f5\u05fa\u0606\u060c\u0613\u0618\u061e",
    "\u0623\u0632\u063a\u0643\u0647\u0649\u0651\u065d\u0668\u0670\u0678\u0680",
    "\u0686\u068e\u0699\u06a0\u06a4\u06ac\u06b4\u06bc\u06c2\u06ca\u06d3\u06db",
    "\u06e2\u06e7\u06ef\u06f5\u06f7\u06fb\u0703\u0709\u070b\u070d\u0714\u071d",
    "\u0725\u0728\u0733\u073a\u0741\u0745\u0748\u074e\u0758\u075e\u0760\u0764",
    "\u0768\u076e\u0777\u077d\u0788\u078f\u0798\u079e\u07a2\u07ac\u07b4\u07b6",
    "\u07b8\u07ba\u07c1\u07cc\u07d7\u07db\u07df\u07e7\u07ed\u07ef\u07f3\u07fb",
    "\u0801\u0803\u0805\u0809\u080f\u0813\u081f\u0822\u0827\u082e\u0838\u083b",
    "\u0840\u0847\u084d\u0860\u086c\u086e\u0870\u087f\u0881\u0883\u088b\u0890",
    "\u0896\u089d\u08a9\u08b2\u08c0\u08c4\u08cd\u08d0\u08dc\u08ea\u08ef\u08fa",
    "\u0900\u0904\u0907\u090d\u0919\u091c\u0922\u0927\u092c\u0933\u0937\u093b",
    "\u093f\u0943\u0945\u094c\u0951\u0956\u095d\u0962\u096c\u0978\u097e\u0982",
    "\u0985\u0988\u098c\u0995\u099b\u09a1\u09ad\u09b0\u09b6\u09c1\u09c3\u09ca",
    "\u09d9\u09db\u09e3\u09eb\u09f4\u09fe\u0a05\u0a0c\u0a0e\u0a1b\u0a24\u0a2a",
    "\u0a31\u0a39\u0a40\u0a44\u0a54\u0a63\u0a73\u0a76\u0a80\u0a86\u0a8a\u0a8d",
    "\u0a9a\u0aa0\u0aa8\u0aac\u0aae\u0ab2\u0ab8\u0abe\u0acb\u0ace\u0ad5\u0adf",
    "\u0ae7\u0af0\u0af6\u0af8\u0b02\u0b05\u0b12\u0b15\u0b20\u0b25\u0b32\u0b3d",
    "\u0b45\u0b4a\u0b50\u0b56\u0b59\u0b5f\u0b62\u0b68\u0b6b\u0b6f\u0b74\u0b7a",
    "\u0b7e\u0b84\u0b8c\u0b92\u0b99\u0ba4\u0baf\u0bb6\u0bb9\u0bbb\u0bcf\u0bd3",
    "\u0bd6\u0bda\u0be0\u0be9\u0bef\u0c08\u0c0a\u0c0c\u0c14\u0c19\u0c25\u0c2d",
    "\u0c31\u0c3b\u0c52\u0c5f\u0c61\u0c68\u0c7e\u0c88\u0c8c\u0c91\u0c97\u0ca1",
    "\u0caa\u0cad\u0cb0\u0cba\u0cbd\u0cbf\u0cd6\u0cdd\u0ce0\u0ce7\u0cea\u0cee",
    "\u0d00\u0d0f\u0d19\u0d1f\u0d22\u0d37\u0d3d\u0d48\u0d4c\u0d4e\u0d57\u0d60",
    "\u0d67\u0d72\u0d82\u0d8b\u0d91\u0d9b\u0da9\u0db7\u0dbc\u0dc9\u0dce\u0dd5",
    "\u0ddc\u0de3\u0dfb\u0dff\u0e08\u0e0d\u0e0f\u0e19\u0e22\u0e27\u0e29\u0e2b",
    "\u0e2d\u0e37\u0e3f\u0e44\u0e4a\u0e51\u0e5a\u0e5f\u0e61\u0e6b\u0e7a\u0e7d",
    "\u0e8a\u0e8d\u0e91\u0e94\u0e9d\u0ea6\u0ea9\u0eae\u0eb3\u0eb8\u0ec0\u0ecd",
    "\u0edf\u0ee2\u0eea\u0eef\u0ef4\u0efb\u0f0c"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class languageParser extends genericAntlrParser {

    static grammarFileName = "language.g4";
    static literalNames = [ null, "';'", "'{'", "','", "'}'", "':'", "'('", 
                            "')'", "'='", "'+'", "'-'", "'['", "'*'", "'..'", 
                            "']'", "'.'", "'?'", "'<>'", "'>'", "'>='", 
                            "'<'", "'<='", "'!='", "'||'", "'/'", "'=>'", 
                            "'@'", "'#'", "'...'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, "WhiteSpace", 
                             "DocComment", "Comment", "LineComment", "String", 
                             "QuotedLiteral", "UnterminatedLiteral", "UnterminatedDelimitedIdentifier", 
                             "Boolean", "ALL", "ANY", "AS", "BY", "CASE", 
                             "CAST", "DISTINCT", "EXISTS", "FROM", "IN", 
                             "KEY", "NEW", "NOT", "NULL", "OF", "ON", "SELECT", 
                             "SOME", "WHEN", "WHERE", "WITH", "Number", 
                             "ABSTRACT", "ACTION", "ACTIONS", "AND", "ANNOTATE", 
                             "ANNOTATION", "ARRAY", "ASC", "ASPECT", "ASSOCIATION", 
                             "BETWEEN", "COLUMNS", "COMPOSITION", "CONTEXT", 
                             "CROSS", "CURRENT", "DEFAULT", "DEFINE", "DEFINITIONS", 
                             "DESC", "ELEMENTS", "ELSE", "END", "ENTITY", 
                             "ENUM", "EVENT", "ESCAPE", "EXACT", "EXCEPT", 
                             "EXCLUDING", "EXTEND", "FIRST", "FLOATING", 
                             "FOLLOWING", "FULL", "FUNCTION", "GROUP", "HAVING", 
                             "INNER", "INTERSECT", "INTO", "IS", "JOIN", 
                             "LAST", "LEFT", "LIKE", "LIMIT", "LOCALIZED", 
                             "MANY", "MINUS", "MIXIN", "NAMESPACE", "NULLS", 
                             "OFFSET", "ONE", "OR", "ORDER", "OUTER", "PARAMETERS", 
                             "PARTITION", "PRECEDING", "PROJECTION", "REDIRECTED", 
                             "RETURNS", "RIGHT", "ROW", "ROWS", "SERVICE", 
                             "STORED", "THEN", "TO", "TYPE", "UNION", "UNBOUNDED", 
                             "UP", "USING", "VARIABLE", "VIEW", "Identifier", 
                             "IllegalToken", "ELEMENT", "MASKED", "VIRTUAL", 
                             "OVER", "HelperToken1", "HelperToken2", "HideAlternatives", 
                             "GenericExpr", "GenericSeparator", "GenericIntro", 
                             "DOTbeforeBRACE", "COMPOSITIONofBRACE", "SemicolonTopLevel" ];
    static ruleNames = [ "start", "namespaceDeclaration", "usingDeclaration", 
                         "usingProxy", "artifactDefOrExtend", "optArtifactsBlock", 
                         "requiredSemi", "optionalSemi", "annotationDef", 
                         "serviceDef", "contextDef", "eventDef", "viewDef", 
                         "entityDef", "aspectDef", "elementsAndOptActions", 
                         "typeDef", "actionFunctionMainDef", "actionFunctionDef", 
                         "parameterDef", "parameterListDef", "enumSymbolDef", 
                         "elementDef", "elementDefInner", "elementType", 
                         "elementProperties", "defaultAndNullability", "defaultValue", 
                         "extendArtifact", "extendService", "extendContext", 
                         "extendEntityOrAspect", "extendForEntity", "extendProjection", 
                         "extendType", "extendWithOptElementsOrType", "extendWithOptElementsNoWith", 
                         "elementDefOrExtend", "extendElement", "annotateArtifact", 
                         "annotateArtifactActions", "annotateArtifactElements", 
                         "annotateElement", "annotateAction", "annotateReturns", 
                         "annotateParam", "includeRef", "typeSpec", "returnTypeSpec", 
                         "typeSpecCont", "typeSpecSemi", "typeStruct", "typeCompoStruct", 
                         "typeArray", "typeAssociationBase", "typeAssociationCont", 
                         "typeAssociationElementCont", "typeToOne", "typeToMany", 
                         "cardinality", "targetCardinality", "optInvisibleNullability", 
                         "nullability", "foreignKey", "typeTypeOf", "typeRefOptArgs", 
                         "typeRefArgs", "typeNamedArgList", "typeNamedArg", 
                         "queryEOF", "projectionSpec", "projectionClauses", 
                         "queryExpression", "queryExpressionCont", "queryPrimary", 
                         "selectQuery", "querySource", "tableExpression", 
                         "tableExpressionCont", "tableTerm", "fromRefWithOptAlias", 
                         "tableOrQueryParenthesis", "tableOrQueryExpressionCont", 
                         "fromPath", "fromArguments", "excludingClause", 
                         "projectionExclusion", "mixinElementDef", "selectItemDef", 
                         "selectItemDefBody", "bracedSelectItemListDef", 
                         "selectItemInlineList", "selectItemInlineDef", 
                         "orderByClause", "limitClause", "orderBySpec", 
                         "joinOp", "joinCardinality", "conditionEOF", "condition", 
                         "conditionCont", "conditionTerm", "conditionPrimary", 
                         "comparisonCont", "expression", "expressionCont", 
                         "expressionPrimary", "conditionOrQueryParenthesis", 
                         "specialFunction", "simplePath", "valuePath", "pathArguments", 
                         "namedExpression", "funcExpression", "overClause", 
                         "partitionByClause", "funcOrderByClause", "exprOrderByClause", 
                         "orderBySpecInExpr", "windowFrameClause", "windowFrameBoundSpec", 
                         "windowFrameStartSpec", "cardinalityAndFilter", 
                         "optionalCardinality", "filterWhereClause", "optionalWhereForFilter", 
                         "annotationAssignment_fix", "annotationAssignment_ll1", 
                         "annotationAssignment_atn", "annotationAssignment_paren", 
                         "annotationAssignment_1", "annotationPath", "annotationPathVariant", 
                         "annoValue", "annoValueBase", "flattenedValue", 
                         "namedValue", "annoSubValue", "literalValue", "identNoKeyword", 
                         "ident" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = languageParser.ruleNames;
        this.literalNames = languageParser.literalNames;
        this.symbolicNames = languageParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	start() {
	    let localctx = new StartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, languageParser.RULE_start);
	     localctx.source =  this.createSource() 
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.USING) {
	            this.state = 282;
	            this.usingDeclaration(localctx.source);
	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 304;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.NAMESPACE:
	        	this.state = 288;
	        	this.namespaceDeclaration(localctx.source);
	        	this.state = 293;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.USING - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
	        	    this.state = 291;
	        	    this._errHandler.sync(this);
	        	    switch(this._input.LA(1)) {
	        	    case languageParser.USING:
	        	        this.state = 289;
	        	        this.usingDeclaration(localctx.source);
	        	        break;
	        	    case languageParser.T__25:
	        	    case languageParser.ABSTRACT:
	        	    case languageParser.ACTION:
	        	    case languageParser.ANNOTATE:
	        	    case languageParser.ANNOTATION:
	        	    case languageParser.ASPECT:
	        	    case languageParser.CONTEXT:
	        	    case languageParser.DEFINE:
	        	    case languageParser.ENTITY:
	        	    case languageParser.EVENT:
	        	    case languageParser.EXTEND:
	        	    case languageParser.FUNCTION:
	        	    case languageParser.SERVICE:
	        	    case languageParser.TYPE:
	        	    case languageParser.VIEW:
	        	    case languageParser.HideAlternatives:
	        	        this.state = 290;
	        	        this.artifactDefOrExtend(localctx.source);
	        	        break;
	        	    default:
	        	        throw new antlr4.error.NoViableAltException(this);
	        	    }
	        	    this.state = 295;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	break;
	        case languageParser.T__25:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ASPECT:
	        case languageParser.CONTEXT:
	        case languageParser.DEFINE:
	        case languageParser.ENTITY:
	        case languageParser.EVENT:
	        case languageParser.EXTEND:
	        case languageParser.FUNCTION:
	        case languageParser.SERVICE:
	        case languageParser.TYPE:
	        case languageParser.VIEW:
	        case languageParser.HideAlternatives:
	        	this.state = 296;
	        	this.artifactDefOrExtend(localctx.source);
	        	this.state = 301;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.USING - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
	        	    this.state = 299;
	        	    this._errHandler.sync(this);
	        	    switch(this._input.LA(1)) {
	        	    case languageParser.USING:
	        	        this.state = 297;
	        	        this.usingDeclaration(localctx.source);
	        	        break;
	        	    case languageParser.T__25:
	        	    case languageParser.ABSTRACT:
	        	    case languageParser.ACTION:
	        	    case languageParser.ANNOTATE:
	        	    case languageParser.ANNOTATION:
	        	    case languageParser.ASPECT:
	        	    case languageParser.CONTEXT:
	        	    case languageParser.DEFINE:
	        	    case languageParser.ENTITY:
	        	    case languageParser.EVENT:
	        	    case languageParser.EXTEND:
	        	    case languageParser.FUNCTION:
	        	    case languageParser.SERVICE:
	        	    case languageParser.TYPE:
	        	    case languageParser.VIEW:
	        	    case languageParser.HideAlternatives:
	        	        this.state = 298;
	        	        this.artifactDefOrExtend(localctx.source);
	        	        break;
	        	    default:
	        	        throw new antlr4.error.NoViableAltException(this);
	        	    }
	        	    this.state = 303;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	break;
	        case languageParser.EOF:
	        	break;
	        default:
	        	break;
	        }
	         this.markAsSkippedUntilEOF(); 
	        this.state = 307;
	        this.match(languageParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDeclaration(source) {
	    let localctx = new NamespaceDeclarationContext(this, this._ctx, this.state, source);
	    this.enterRule(localctx, 2, languageParser.RULE_namespaceDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(languageParser.NAMESPACE);
	        this.state = 310;
	        this.simplePath( localctx.decl, 'Namespace' );
	        this.state = 311;
	        this.match(languageParser.T__0);
	        this._ctx.stop = this._input.LT(-1);

	          localctx.source.namespace = { kind: 'namespace', name: localctx.decl };
	          this.attachLocation( localctx.source.namespace );

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingDeclaration(source) {
	    let localctx = new UsingDeclarationContext(this, this._ctx, this.state, source);
	    this.enterRule(localctx, 4, languageParser.RULE_usingDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.decl.location = this.startLocation(); 
	        this.state = 314;
	        this.match(languageParser.USING);
	        this.state = 343;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.FROM:
	            this.state = 315;
	            this.match(languageParser.FROM);
	            this.state = 316;
	            localctx.str = this.match(languageParser.String);
	             localctx.source.dependencies.push( this.quotedLiteral( localctx.str, 'string' ) ); 
	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.state = 318;
	            this.usingProxy( localctx.source, localctx.decl );
	            this.state = 322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.FROM) {
	                this.state = 319;
	                this.match(languageParser.FROM);
	                this.state = 320;
	                localctx.str = this.match(languageParser.String);
	                 localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) ); 
	            }

	            break;
	        case languageParser.T__1:
	             this.addItem( localctx.decl, localctx.source, 'usings', 'using' ); 
	            this.state = 325;
	            this.match(languageParser.T__1);
	             localctx.decl.usings = this.createArray(); 
	            this.state = 327;
	            this.usingProxy( localctx.decl, {} );
	            this.state = 333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 328;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 330;
	                this.usingProxy( localctx.decl, {} );
	                this.state = 335;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 336;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.decl.usings ); 
	            this.state = 341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.FROM) {
	                this.state = 338;
	                this.match(languageParser.FROM);
	                this.state = 339;
	                localctx.str = this.match(languageParser.String);
	                 localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) ); 
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 345;
	        this.match(languageParser.T__0);
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.decl); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingProxy(outer, proxy) {
	    let localctx = new UsingProxyContext(this, this._ctx, this.state, outer, proxy);
	    this.enterRule(localctx, 6, languageParser.RULE_usingProxy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         if (!localctx.proxy.location) localctx.proxy.location = this.startLocation();
	              localctx.proxy.extern = {}; 
	        this.state = 348;
	        this.simplePath( localctx.proxy.extern, 'global' );
	         this.addItem( localctx.proxy, localctx.outer, 'usings', 'using' ); 
	        this.state = 355;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.AS:
	            this.state = 350;
	            this.match(languageParser.AS);
	            this.state = 351;
	            localctx.name = this.ident('UsingAlias');
	             localctx.proxy.name = localctx.name.id; 
	            break;
	        case languageParser.T__0:
	        case languageParser.T__2:
	        case languageParser.T__3:
	        case languageParser.FROM:
	             this.classifyImplicitName( 'Using' ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.proxy); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	artifactDefOrExtend(outer, defOnly) {
	    let localctx = new ArtifactDefOrExtendContext(this, this._ctx, this.state, outer, defOnly);
	    this.enterRule(localctx, 8, languageParser.RULE_artifactDefOrExtend);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation(); this.docComment( localctx.art ); 
	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 358;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 391;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ANNOTATION:
	        case languageParser.ASPECT:
	        case languageParser.CONTEXT:
	        case languageParser.DEFINE:
	        case languageParser.ENTITY:
	        case languageParser.EVENT:
	        case languageParser.FUNCTION:
	        case languageParser.SERVICE:
	        case languageParser.TYPE:
	        case languageParser.VIEW:
	        case languageParser.HideAlternatives:
	            this.state = 365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.DEFINE) {
	                this.state = 364;
	                this.match(languageParser.DEFINE);
	            }

	            this.state = 376;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.SERVICE:
	                this.state = 367;
	                this.serviceDef( localctx.art, localctx.outer, localctx.defOnly );
	                break;
	            case languageParser.CONTEXT:
	                this.state = 368;
	                this.contextDef( localctx.art, localctx.outer, localctx.defOnly );
	                break;
	            case languageParser.ENTITY:
	                this.state = 369;
	                this.entityDef( localctx.art, localctx.outer );
	                break;
	            case languageParser.TYPE:
	                this.state = 370;
	                this.typeDef( localctx.art, localctx.outer );
	                break;
	            case languageParser.ABSTRACT:
	            case languageParser.ASPECT:
	            case languageParser.HideAlternatives:
	                this.state = 371;
	                this.aspectDef( localctx.art, localctx.outer );
	                break;
	            case languageParser.ANNOTATION:
	                this.state = 372;
	                this.annotationDef( localctx.art, localctx.outer );
	                break;
	            case languageParser.VIEW:
	                this.state = 373;
	                this.viewDef( localctx.art, localctx.outer );
	                break;
	            case languageParser.EVENT:
	                this.state = 374;
	                this.eventDef( localctx.art, localctx.outer );
	                break;
	            case languageParser.ACTION:
	            case languageParser.FUNCTION:
	                this.state = 375;
	                this.actionFunctionMainDef( localctx.art, localctx.outer );
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.EXTEND:
	            this.state = 378;
	            localctx.extend = this.match(languageParser.EXTEND);
	             this.reportUnexpectedExtension( localctx.defOnly, localctx.extend );
	                    if (!localctx.outer.extensions) localctx.outer.extensions = [];
	                  
	            this.state = 386;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 380;
	                this.extendService( localctx.art, localctx.outer );
	                break;

	            case 2:
	                this.state = 381;
	                this.extendContext( localctx.art, localctx.outer );
	                break;

	            case 3:
	                this.state = 382;
	                this.extendEntityOrAspect( localctx.art, localctx.outer );
	                break;

	            case 4:
	                this.state = 383;
	                this.extendProjection( localctx.art, localctx.outer );
	                break;

	            case 5:
	                this.state = 384;
	                this.extendType( localctx.art, localctx.outer );
	                break;

	            case 6:
	                this.state = 385;
	                this.extendArtifact( localctx.art, localctx.outer );
	                break;

	            }
	            break;
	        case languageParser.ANNOTATE:
	            this.state = 388;
	            localctx.annotate = this.match(languageParser.ANNOTATE);
	             this.reportUnexpectedExtension( localctx.defOnly, localctx.annotate );
	                    if (!localctx.outer.extensions) localctx.outer.extensions = [];
	                    this.meltKeywordToIdentifier();
	                  
	            this.state = 390;
	            this.annotateArtifact( localctx.art, localctx.outer );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optArtifactsBlock(art, defOnly) {
	    let localctx = new OptArtifactsBlockContext(this, this._ctx, this.state, art, defOnly);
	    this.enterRule(localctx, 10, languageParser.RULE_optArtifactsBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__1) {
	            this.state = 393;
	            this.match(languageParser.T__1);
	             localctx.art.artifacts = this.createDict(); localctx.art.extensions = []; 
	            this.state = 398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
	                this.state = 395;
	                this.artifactDefOrExtend( localctx.art, defOnly );
	                this.state = 400;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 401;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.artifacts ); this.insertSemicolon(); 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiredSemi() {
	    let localctx = new RequiredSemiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, languageParser.RULE_requiredSemi);
	    try {
	        this.state = 408;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 405;
	            this.match(languageParser.T__0);
	            break;
	        case languageParser.T__3:
	            this.enterOuterAlt(localctx, 2);
	             return localctx; 
	            this.state = 407;
	            this.match(languageParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalSemi() {
	    let localctx = new OptionalSemiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, languageParser.RULE_optionalSemi);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.noAssignmentInSameLine(); 
	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__0) {
	            this.state = 411;
	            this.match(languageParser.T__0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationDef(art, outer) {
	    let localctx = new AnnotationDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 16, languageParser.RULE_annotationDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        localctx.annotation = this.match(languageParser.ANNOTATION);
	        this.state = 415;
	        this.simplePath( localctx.name, 'AnnoDef' );
	         if (localctx.outer.kind !== 'source') { // this is a syntax restriction to avoid confusion
	                this.error( 'syntax-unexpected-vocabulary', localctx.annotation, { '#': localctx.outer.kind } );
	                localctx.art =  new this.XsnArtifact() }
	              else {
	                if (!localctx.outer.vocabularies) localctx.outer.vocabularies = Object.create(null);
	                this.addDef( localctx.art, localctx.outer, 'vocabularies', 'annotation', localctx.name );
	              }
	              this.docComment( localctx.art ); 
	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 417;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 423;
	        this.typeSpecSemi( localctx.art );
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serviceDef(art, outer, defOnly) {
	    let localctx = new ServiceDefContext(this, this._ctx, this.state, art, outer, defOnly);
	    this.enterRule(localctx, 18, languageParser.RULE_serviceDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(languageParser.SERVICE);
	        this.state = 426;
	        this.simplePath( localctx.name, 'Service' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'service', localctx.name ); 
	         this.docComment( localctx.art ); 
	        this.state = 432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 429;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 435;
	        this.optArtifactsBlock( localctx.art, defOnly );
	        this.state = 438;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 436;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 437;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextDef(art, outer, defOnly) {
	    let localctx = new ContextDefContext(this, this._ctx, this.state, art, outer, defOnly);
	    this.enterRule(localctx, 20, languageParser.RULE_contextDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(languageParser.CONTEXT);
	        this.state = 441;
	        this.simplePath( localctx.name, 'Context' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'context', localctx.name ); 
	         this.docComment( localctx.art ); 
	        this.state = 447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 444;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 450;
	        this.optArtifactsBlock( localctx.art, defOnly );
	        this.state = 453;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 451;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 452;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventDef(art, outer) {
	    let localctx = new EventDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 22, languageParser.RULE_eventDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this.match(languageParser.EVENT);
	        this.state = 456;
	        this.simplePath( localctx.name, 'Event' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'event', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 458;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.state = 464;
	            this.typeStruct( localctx.art );
	            this.state = 465;
	            this.optionalSemi();
	            break;
	        case languageParser.T__4:
	            this.state = 467;
	            this.match(languageParser.T__4);
	            this.state = 499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            switch(la_) {
	            case 1:
	                 localctx.art.type = {}; 
	                this.state = 469;
	                this.simplePath( localctx.art.type, 'artref' );
	                this.state = 490;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__1:
	                case languageParser.T__2:
	                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
	                    this.state = 476;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__2) {
	                        this.state = 471;
	                        this.match(languageParser.T__2);
	                         if (this.isStraightBefore('{')) break; 
	                        this.state = 473;
	                        this.includeRef( localctx.art );
	                        this.state = 478;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 479;
	                    this.typeStruct( localctx.art );
	                    this.state = 480;
	                    this.optionalSemi();
	                    break;
	                case languageParser.T__0:
	                case languageParser.T__3:
	                case languageParser.T__25:
	                     this.docComment( localctx.art ); 
	                    this.state = 486;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__25) {
	                        this.state = 483;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 488;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 489;
	                    this.requiredSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 492;
	                this.typeStruct( localctx.art );
	                this.state = 493;
	                this.optionalSemi();
	                break;

	            case 3:
	                this.state = 495;
	                localctx.qp = this.projectionSpec();
	                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
	                this.state = 497;
	                this.requiredSemi();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewDef(art, outer) {
	    let localctx = new ViewDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 24, languageParser.RULE_viewDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        localctx.v = this.match(languageParser.VIEW);
	        this.state = 504;
	        this.simplePath( localctx.name, 'Entity' );
	         localctx.art['$'+'syntax'] = 'view';
	              this.addDef( localctx.art, localctx.outer, 'artifacts', 'entity', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 506;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 526;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__5:
	        	this.state = 512;
	        	this.parameterListDef( localctx.art );
	        	break;
	        case languageParser.WITH:
	        case languageParser.HideAlternatives:
	        	this.state = 513;
	        	_la = this._input.LA(1);
	        	if(!(_la===languageParser.WITH || _la===languageParser.HideAlternatives)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	 localctx.art.params = this.createDict(); 
	        	this.state = 515;
	        	this.match(languageParser.PARAMETERS);
	        	this.state = 516;
	        	this.parameterDef( localctx.art );
	        	this.state = 521;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===languageParser.T__2) {
	        	    this.state = 517;
	        	    this.match(languageParser.T__2);
	        	    this.state = 518;
	        	    this.parameterDef( localctx.art );
	        	    this.state = 523;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	 this.finalizeDictOrArray( localctx.art.params ); 
	        	break;
	        case languageParser.AS:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 528;
	        this.match(languageParser.AS);
	        this.state = 529;
	        localctx.qe = this.queryExpression();
	         localctx.art.query = localctx.qe.query; 
	        this.state = 533;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 531;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 532;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityDef(art, outer) {
	    let localctx = new EntityDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 26, languageParser.RULE_entityDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.match(languageParser.ENTITY);
	        this.state = 536;
	        this.simplePath( localctx.name, 'Entity' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'entity', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 538;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__5) {
	            this.state = 544;
	            this.parameterListDef( localctx.art );
	        }

	        this.state = 627;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	        case languageParser.T__4:
	            this.state = 557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__4) {
	                this.state = 547;
	                this.match(languageParser.T__4);
	                this.state = 548;
	                this.includeRef( localctx.art );
	                this.state = 554;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 549;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore('{')) break; 
	                    this.state = 551;
	                    this.includeRef( localctx.art );
	                    this.state = 556;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 559;
	            this.match(languageParser.T__1);
	             localctx.art.elements = this.createDict(); 
	            this.state = 564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	                this.state = 561;
	                this.elementDef( localctx.art );
	                this.state = 566;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 567;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.elements ); this.insertSemicolon(); 
	            this.state = 580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ACTIONS) {
	                this.state = 569;
	                this.match(languageParser.ACTIONS);
	                this.state = 570;
	                this.match(languageParser.T__1);
	                 localctx.art.actions = this.createDict(); 
	                this.state = 575;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	                    this.state = 572;
	                    this.actionFunctionDef( localctx.art );
	                    this.state = 577;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 578;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	            }

	            this.state = 584;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__0:
	            case languageParser.T__3:
	                this.state = 582;
	                this.requiredSemi();
	                break;
	            case languageParser.SemicolonTopLevel:
	                this.state = 583;
	                this.match(languageParser.SemicolonTopLevel);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.AS:
	            this.state = 586;
	            this.match(languageParser.AS);
	            this.state = 625;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__5:
	            case languageParser.SELECT:
	                this.state = 587;
	                localctx.qe = this.queryExpression();
	                 localctx.art.query = localctx.qe.query; localctx.art['$'+'syntax'] = 'entity' 
	                this.state = 600;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.ACTIONS) {
	                    this.state = 589;
	                    this.match(languageParser.ACTIONS);
	                    this.state = 590;
	                    this.match(languageParser.T__1);
	                     localctx.art.actions = this.createDict(); 
	                    this.state = 595;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	                        this.state = 592;
	                        this.actionFunctionDef( localctx.art );
	                        this.state = 597;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 598;
	                    this.match(languageParser.T__3);
	                     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	                }

	                this.state = 604;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__0:
	                case languageParser.T__3:
	                    this.state = 602;
	                    this.requiredSemi();
	                    break;
	                case languageParser.SemicolonTopLevel:
	                    this.state = 603;
	                    this.match(languageParser.SemicolonTopLevel);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case languageParser.PROJECTION:
	                this.state = 606;
	                localctx.qp = this.projectionSpec();
	                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
	                this.state = 608;
	                this.projectionClauses( localctx.qp.query );
	                this.state = 620;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.ACTIONS) {
	                    this.state = 609;
	                    this.match(languageParser.ACTIONS);
	                    this.state = 610;
	                    this.match(languageParser.T__1);
	                     localctx.art.actions = this.createDict(); 
	                    this.state = 615;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	                        this.state = 612;
	                        this.actionFunctionDef( localctx.art );
	                        this.state = 617;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 618;
	                    this.match(languageParser.T__3);
	                     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	                }

	                 this.reportMissingSemicolon(); 
	                this.state = 623;
	                this.optionalSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aspectDef(art, outer) {
	    let localctx = new AspectDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 28, languageParser.RULE_aspectDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 635;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.ASPECT:
	            this.state = 629;
	            this.match(languageParser.ASPECT);
	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.HideAlternatives:
	            this.state = 632;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.ABSTRACT:
	                this.state = 630;
	                localctx.abs = this.match(languageParser.ABSTRACT);
	                break;
	            case languageParser.HideAlternatives:
	                this.state = 631;
	                this.match(languageParser.HideAlternatives);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 634;
	            localctx.ent = this.match(languageParser.ENTITY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 637;
	        this.simplePath( localctx.name, 'Type' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'aspect', localctx.name );
	              if (localctx.ent)
	                this.warning( 'syntax-deprecated-abstract', this.tokenLocation( localctx.abs, localctx.ent ) );
	              this.docComment( localctx.art ); 
	        this.state = 642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 639;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 662;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__4:
	        	this.state = 645;
	        	this.match(languageParser.T__4);
	        	this.state = 659;
	        	this._errHandler.sync(this);
	        	switch(this._input.LA(1)) {
	        	case languageParser.ABSTRACT:
	        	case languageParser.ACTION:
	        	case languageParser.ACTIONS:
	        	case languageParser.AND:
	        	case languageParser.ANNOTATE:
	        	case languageParser.ANNOTATION:
	        	case languageParser.ARRAY:
	        	case languageParser.ASC:
	        	case languageParser.ASPECT:
	        	case languageParser.ASSOCIATION:
	        	case languageParser.BETWEEN:
	        	case languageParser.COLUMNS:
	        	case languageParser.COMPOSITION:
	        	case languageParser.CONTEXT:
	        	case languageParser.CROSS:
	        	case languageParser.CURRENT:
	        	case languageParser.DEFAULT:
	        	case languageParser.DEFINE:
	        	case languageParser.DEFINITIONS:
	        	case languageParser.DESC:
	        	case languageParser.ELEMENTS:
	        	case languageParser.ELSE:
	        	case languageParser.END:
	        	case languageParser.ENTITY:
	        	case languageParser.ENUM:
	        	case languageParser.EVENT:
	        	case languageParser.ESCAPE:
	        	case languageParser.EXACT:
	        	case languageParser.EXCEPT:
	        	case languageParser.EXCLUDING:
	        	case languageParser.EXTEND:
	        	case languageParser.FIRST:
	        	case languageParser.FLOATING:
	        	case languageParser.FOLLOWING:
	        	case languageParser.FULL:
	        	case languageParser.FUNCTION:
	        	case languageParser.GROUP:
	        	case languageParser.HAVING:
	        	case languageParser.INNER:
	        	case languageParser.INTERSECT:
	        	case languageParser.INTO:
	        	case languageParser.IS:
	        	case languageParser.JOIN:
	        	case languageParser.LAST:
	        	case languageParser.LEFT:
	        	case languageParser.LIKE:
	        	case languageParser.LIMIT:
	        	case languageParser.LOCALIZED:
	        	case languageParser.MANY:
	        	case languageParser.MINUS:
	        	case languageParser.MIXIN:
	        	case languageParser.NAMESPACE:
	        	case languageParser.NULLS:
	        	case languageParser.OFFSET:
	        	case languageParser.ONE:
	        	case languageParser.OR:
	        	case languageParser.ORDER:
	        	case languageParser.OUTER:
	        	case languageParser.PARAMETERS:
	        	case languageParser.PARTITION:
	        	case languageParser.PRECEDING:
	        	case languageParser.PROJECTION:
	        	case languageParser.REDIRECTED:
	        	case languageParser.RETURNS:
	        	case languageParser.RIGHT:
	        	case languageParser.ROW:
	        	case languageParser.ROWS:
	        	case languageParser.SERVICE:
	        	case languageParser.STORED:
	        	case languageParser.THEN:
	        	case languageParser.TO:
	        	case languageParser.TYPE:
	        	case languageParser.UNION:
	        	case languageParser.UNBOUNDED:
	        	case languageParser.UP:
	        	case languageParser.USING:
	        	case languageParser.VARIABLE:
	        	case languageParser.VIEW:
	        	case languageParser.Identifier:
	        	    this.state = 646;
	        	    this.includeRef( localctx.art );
	        	    this.state = 652;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===languageParser.T__2) {
	        	        this.state = 647;
	        	        this.match(languageParser.T__2);
	        	         if (this.isStraightBefore('{')) break; 
	        	        this.state = 649;
	        	        this.includeRef( localctx.art );
	        	        this.state = 654;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	    this.state = 656;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    if(_la===languageParser.T__1) {
	        	        this.state = 655;
	        	        this.elementsAndOptActions( localctx.art );
	        	    }

	        	    break;
	        	case languageParser.T__1:
	        	    this.state = 658;
	        	    this.elementsAndOptActions( localctx.art );
	        	    break;
	        	default:
	        	    throw new antlr4.error.NoViableAltException(this);
	        	}
	        	break;
	        case languageParser.T__1:
	        	this.state = 661;
	        	this.elementsAndOptActions( localctx.art );
	        	break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 666;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 664;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 665;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementsAndOptActions(art) {
	    let localctx = new ElementsAndOptActionsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 30, languageParser.RULE_elementsAndOptActions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 668;
	        this.match(languageParser.T__1);
	         localctx.art.elements = this.createDict(); 

	        this.state = 673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	            this.state = 670;
	            this.elementDef( localctx.art );
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 676;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); this.insertSemicolon(); 
	        this.state = 689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.ACTIONS) {
	            this.state = 678;
	            this.match(languageParser.ACTIONS);
	            this.state = 679;
	            this.match(languageParser.T__1);
	             localctx.art.actions = this.createDict(); 
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	                this.state = 681;
	                this.actionFunctionDef( localctx.art );
	                this.state = 686;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 687;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDef(art, outer) {
	    let localctx = new TypeDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 32, languageParser.RULE_typeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        this.match(languageParser.TYPE);
	        this.state = 692;
	        this.simplePath( localctx.name, 'Type' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'type', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 694;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 700;
	        this.typeSpecSemi( localctx.art );
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionFunctionMainDef(art, outer) {
	    let localctx = new ActionFunctionMainDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 34, languageParser.RULE_actionFunctionMainDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.ACTION:
	            this.state = 702;
	            this.match(languageParser.ACTION);
	            this.state = 703;
	            this.simplePath( localctx.name, 'Action' );
	             this.addDef( localctx.art, localctx.outer, 'artifacts', 'action', localctx.name );
	                  this.docComment( localctx.art ); 
	            this.state = 708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 705;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 710;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 711;
	            this.parameterListDef( localctx.art );
	            this.state = 713;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.RETURNS) {
	                this.state = 712;
	                this.returnTypeSpec( localctx.art );
	            }

	            break;
	        case languageParser.FUNCTION:
	            this.state = 715;
	            this.match(languageParser.FUNCTION);
	            this.state = 716;
	            this.simplePath( localctx.name, 'Action' );
	             this.addDef( localctx.art, localctx.outer, 'artifacts', 'function', localctx.name );
	                  this.docComment( localctx.art ); 
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 718;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 723;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 724;
	            this.parameterListDef( localctx.art );
	            this.state = 725;
	            this.returnTypeSpec( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 731;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 729;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 730;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionFunctionDef(outer) {
	    let localctx = new ActionFunctionDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 36, languageParser.RULE_actionFunctionDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 734;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 765;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.ACTION:
	            this.state = 740;
	            this.match(languageParser.ACTION);
	            this.state = 741;
	            localctx.name = this.ident('BoundAction');
	             this.addDef( localctx.art, localctx.outer, 'actions', 'action', localctx.name.id );
	                    this.docComment( localctx.art ); 
	            this.state = 746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 743;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 748;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 749;
	            this.parameterListDef( localctx.art );
	            this.state = 751;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.RETURNS) {
	                this.state = 750;
	                this.returnTypeSpec( localctx.art );
	            }

	            break;
	        case languageParser.FUNCTION:
	            this.state = 753;
	            this.match(languageParser.FUNCTION);
	            this.state = 754;
	            localctx.name = this.ident('BoundAction');
	             this.addDef( localctx.art, localctx.outer, 'actions', 'function', localctx.name.id );
	                    this.docComment( localctx.art ); 
	            this.state = 759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 756;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 761;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 762;
	            this.parameterListDef( localctx.art );
	            this.state = 763;
	            this.returnTypeSpec( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 767;
	        this.requiredSemi();
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDef(outer) {
	    let localctx = new ParameterDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 38, languageParser.RULE_parameterDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.meltKeywordToIdentifier();; this.docComment( localctx.art ); 
	        this.state = 775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 770;
	            this.annotationAssignment_ll1( localctx.art );
	             this.meltKeywordToIdentifier(); 
	            this.state = 777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 778;
	        localctx.name = this.ident('Param');
	         this.addDef( localctx.art, localctx.outer, 'params', 'param', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 780;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 786;
	        this.typeSpec( localctx.art );
	        this.state = 789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.DEFAULT) {
	             if (localctx.art.items) this.message( 'syntax-unexpected-after', this.getCurrentToken(), { '#': 'many', keyword: 'default' } ); 
	            this.state = 788;
	            this.defaultValue( localctx.art );
	        }

	         if (this.getCurrentToken().text === '@' && (localctx.art.enum || localctx.art.items?.enum))
	              this.message( 'syntax-unexpected-after', this.getCurrentToken(), { '#': 'enum' } ); 
	         this.docComment( localctx.art ); 
	        this.state = 796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 793;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterListDef(art) {
	    let localctx = new ParameterListDefContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 40, languageParser.RULE_parameterListDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 799;
	        this.match(languageParser.T__5);
	         localctx.art.params = this.createDict(); 

	              if (this.isStraightBefore(')')) {
	                this.matchWildcard();   // we know it is the ')' - we do not reach the final match
	                this.finalizeDictOrArray( localctx.art.params );
	                return localctx;
	              }
	            
	        this.state = 802;
	        this.parameterDef( localctx.art );
	        this.state = 808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 803;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore(')')) break; 
	            this.state = 805;
	            this.parameterDef( localctx.art );
	            this.state = 810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 811;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.art.params ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumSymbolDef(outer) {
	    let localctx = new EnumSymbolDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 42, languageParser.RULE_enumSymbolDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 815;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 820;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 821;
	        localctx.name = this.ident('Enum');
	         this.addDef( localctx.art, localctx.outer, 'enum', 'enum', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 823;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 828;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__7) {
	            this.state = 829;
	            this.match(languageParser.T__7);
	             this.excludeExpected( ['Boolean', 'QuotedLiteral', "'#'", 'NULL'] ); 
	            this.state = 840;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__26:
	            case languageParser.String:
	            case languageParser.QuotedLiteral:
	            case languageParser.Boolean:
	            case languageParser.NULL:
	            case languageParser.Number:
	                this.state = 831;
	                localctx.val = this.literalValue();
	                 localctx.art.value = localctx.val.val; 
	                break;
	            case languageParser.T__8:
	            case languageParser.T__9:
	                this.state = 836;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__8:
	                    this.state = 834;
	                    localctx.plus = this.match(languageParser.T__8);
	                    break;
	                case languageParser.T__9:
	                    this.state = 835;
	                    localctx.min = this.match(languageParser.T__9);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 838;
	                this.match(languageParser.Number);
	                 localctx.art.value = this.numberLiteral( localctx.plus||localctx.min ); 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	             this.docComment( localctx.art ); 
	            this.state = 846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 843;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 848;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 851;
	        this.requiredSemi();
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementDef(outer) {
	    let localctx = new ElementDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 44, languageParser.RULE_elementDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 854;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 860;
	        this.elementDefInner( localctx.art, localctx.outer );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementDefInner(art, outer, explicitElement) {
	    let localctx = new ElementDefInnerContext(this, this._ctx, this.state, art, outer, explicitElement);
	    this.enterRule(localctx, 46, languageParser.RULE_elementDefInner);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^[;:{@=}]$/ ); 
	        this.state = 865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.VIRTUAL) {
	            this.state = 863;
	            localctx.virtual = this.match(languageParser.VIRTUAL);
	             localctx.art.virtual = this.valueWithTokenLocation( true, localctx.virtual ); 
	        }

	        this.state = 869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.KEY) {
	            this.state = 867;
	            localctx.key = this.match(languageParser.KEY);
	             localctx.art.key = this.valueWithTokenLocation( true, localctx.key ); 
	        }

	         this.setLocalToken( 'MASKED', 'MASKED', /^[;:{@=}]$/ ); 
	        this.state = 874;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.MASKED) {
	            this.state = 872;
	            localctx.masked = this.match(languageParser.MASKED);

	                    localctx.art.masked = this.valueWithTokenLocation( true, localctx.masked ) ;
	                    this.message( 'syntax-unsupported-masked', localctx.masked, { keyword: 'masked' } );
	                  
	        }

	         this.setLocalToken( 'ELEMENT', 'ELEMENT', /^[;:{@=}]$/ ); 
	        this.state = 879;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.ELEMENT) {
	            this.state = 877;
	            this.match(languageParser.ELEMENT);
	             localctx.explicitElement =  true 
	        }

	        this.state = 881;
	        localctx.name = this.ident('Element');
	         this.addDef( localctx.art, localctx.outer, 'elements', 'element', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 883;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 888;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 914;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.state = 889;
	            this.typeStruct( localctx.art );
	            this.state = 894;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.NOT:
	            case languageParser.NULL:
	                this.state = 890;
	                this.nullability( localctx.art );
	                this.state = 891;
	                this.requiredSemi();
	                break;
	            case languageParser.T__0:
	            case languageParser.T__3:
	            case languageParser.T__25:
	            case languageParser.KEY:
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	            case languageParser.ELEMENT:
	            case languageParser.MASKED:
	            case languageParser.VIRTUAL:
	                this.state = 893;
	                this.optionalSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.T__4:
	            this.state = 896;
	            this.match(languageParser.T__4);
	            this.state = 897;
	            this.elementType( localctx.art );
	            break;
	        case languageParser.T__7:
	            this.state = 898;
	            localctx.eq = this.match(languageParser.T__7);
	            this.state = 899;
	            localctx.e = this.expression();
	            this.state = 901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.STORED) {
	                this.state = 900;
	                localctx.stored = this.match(languageParser.STORED);
	            }

	             localctx.art.value = localctx.e.expr;
	                    // this.setIntroLocation( eq );  -- future
	                    if (localctx.stored)
	                      localctx.art.value.stored = this.valueWithTokenLocation( true, localctx.stored );
	                    if (localctx.explicitElement)
	                      localctx.art['$'+'syntax'] = 'element';
	                  
	             this.docComment( localctx.art ); 
	            this.state = 908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 905;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 910;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 911;
	            this.requiredSemi();
	            break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 913;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementType(art) {
	    let localctx = new ElementTypeContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 48, languageParser.RULE_elementType);
	    var _la = 0; // Token type
	    try {
	        this.state = 1089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 916;
	            this.typeStruct( localctx.art );
	            this.state = 918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 917;
	                this.nullability( localctx.art );
	            }

	            this.state = 920;
	            this.requiredSemi();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 922;
	            this.typeAssociationBase( localctx.art, true );
	            this.state = 945;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 923;
	                this.typeStruct( localctx.art.target, true );
	                this.state = 924;
	                this.optionalSemi();
	                break;

	            case 2:
	                this.state = 926;
	                localctx.one = this.match(languageParser.ONE);
	                 this.setMaxCardinality( localctx.art, { literal: 'number', val: 1 }, localctx.one ); 
	                this.state = 928;
	                this.typeCompoStruct( localctx.art.target );
	                this.state = 929;
	                this.optionalSemi();
	                break;

	            case 3:
	                this.state = 931;
	                localctx.many = this.match(languageParser.MANY);
	                 this.setMaxCardinality( localctx.art, { literal: 'string', val: '*' }, localctx.many ); 
	                this.state = 933;
	                this.typeCompoStruct( localctx.art.target );
	                this.state = 934;
	                this.optionalSemi();
	                break;

	            case 4:
	                this.state = 936;
	                this.typeToMany( localctx.art );
	                this.state = 937;
	                this.typeAssociationElementCont( localctx.art );
	                break;

	            case 5:
	                this.state = 939;
	                this.typeToOne( localctx.art );
	                this.state = 940;
	                this.typeAssociationElementCont( localctx.art );
	                break;

	            case 6:
	                this.state = 942;
	                this.simplePath( localctx.art.target, 'artref' );
	                this.state = 943;
	                this.typeAssociationElementCont( localctx.art );
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 952;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.ARRAY:
	                this.state = 947;
	                localctx.array = this.match(languageParser.ARRAY);
	                this.state = 948;
	                localctx.of = this.match(languageParser.OF);
	                 localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
	                break;
	            case languageParser.MANY:
	                this.state = 950;
	                localctx.many = this.match(languageParser.MANY);
	                 localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 989;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__1:
	                this.state = 954;
	                this.typeStruct( localctx.art.items );
	                this.state = 956;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                    this.state = 955;
	                    this.nullability( localctx.art.items );
	                }

	                break;
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	                this.state = 960;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 958;
	                    this.typeTypeOf( localctx.art.items );
	                    break;

	                case 2:
	                    this.state = 959;
	                    this.typeRefOptArgs( localctx.art.items );
	                    break;

	                }
	                this.state = 963;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                    this.state = 962;
	                    this.nullability( localctx.art.items );
	                }

	                 localctx.tokenAtAnnoPos =  this.getCurrentToken(); this.docComment( localctx.art ); 
	                this.state = 969;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25) {
	                    this.state = 966;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 971;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 987;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.ENUM) {
	                     if (localctx.tokenAtAnnoPos !== this.getCurrentToken()) this.message( 'syntax-unexpected-after', this.getCurrentToken(), { keyword: this.getCurrentToken().text } ); 
	                    this.state = 973;
	                    this.match(languageParser.ENUM);
	                    this.state = 974;
	                    this.match(languageParser.T__1);
	                     localctx.art.items.enum = this.createDict(); 
	                    this.state = 979;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                        this.state = 976;
	                        this.enumSymbolDef( localctx.art.items );
	                        this.state = 981;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 982;
	                    this.match(languageParser.T__3);
	                     this.finalizeDictOrArray( localctx.art.items.enum ); 
	                    this.state = 985;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                        this.state = 984;
	                        this.nullability( localctx.art.items );
	                    }

	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 991;
	            this.requiredSemi();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 993;
	            localctx.l = this.match(languageParser.LOCALIZED);
	             localctx.art.localized = this.valueWithTokenLocation( true, localctx.l ); 
	            this.state = 995;
	            this.typeRefOptArgs( localctx.art );
	            this.state = 996;
	            this.optInvisibleNullability( localctx.art );
	             localctx.tokenAtAnnoPos =  this.getCurrentToken(); this.docComment( localctx.art ); 
	            this.state = 1001;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 998;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1003;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__7 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	                 if (localctx.tokenAtAnnoPos !== this.getCurrentToken()) this.message( 'syntax-unexpected-after', this.getCurrentToken(), { keyword: this.getCurrentToken().text } ); 
	                this.state = 1005;
	                this.elementProperties( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 1010;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25) {
	                    this.state = 1007;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 1012;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1015;
	            this.requiredSemi();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1017;
	            this.typeTypeOf( localctx.art );
	            this.state = 1018;
	            this.optInvisibleNullability( localctx.art );
	             localctx.tokenAtAnnoPos =  this.getCurrentToken(); this.docComment( localctx.art ); 
	            this.state = 1023;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1020;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1025;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1049;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case languageParser.ENUM:
	            	this.state = 1026;
	            	this.match(languageParser.ENUM);
	            	this.state = 1027;
	            	this.match(languageParser.T__1);
	            	 localctx.art.enum = this.createDict(); 
	            	this.state = 1032;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	            	    this.state = 1029;
	            	    this.enumSymbolDef( localctx.art );
	            	    this.state = 1034;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1035;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.enum ); 
	            	this.state = 1038;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===languageParser.T__7 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	            	    this.state = 1037;
	            	    this.elementProperties( localctx.art );
	            	}

	            	break;
	            case languageParser.T__7:
	            case languageParser.NOT:
	            case languageParser.NULL:
	            case languageParser.DEFAULT:
	            	 if (localctx.tokenAtAnnoPos !== this.getCurrentToken()) this.message( 'syntax-unexpected-after', this.getCurrentToken(), { keyword: this.getCurrentToken().text } ); 
	            	this.state = 1041;
	            	this.elementProperties( localctx.art );
	            	 this.docComment( localctx.art ); 
	            	this.state = 1046;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25) {
	            	    this.state = 1043;
	            	    this.annotationAssignment_ll1( localctx.art );
	            	    this.state = 1048;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case languageParser.T__0:
	            case languageParser.T__3:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1051;
	            this.requiredSemi();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1053;
	            this.typeRefOptArgs( localctx.art );
	            this.state = 1054;
	            this.optInvisibleNullability( localctx.art );
	             localctx.tokenAtAnnoPos =  this.getCurrentToken(); this.docComment( localctx.art ); 
	            this.state = 1059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1056;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1061;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1085;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case languageParser.ENUM:
	            	this.state = 1062;
	            	this.match(languageParser.ENUM);
	            	this.state = 1063;
	            	this.match(languageParser.T__1);
	            	 localctx.art.enum = this.createDict(); 
	            	this.state = 1068;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	            	    this.state = 1065;
	            	    this.enumSymbolDef( localctx.art );
	            	    this.state = 1070;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1071;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.enum ); 
	            	this.state = 1074;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===languageParser.T__7 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	            	    this.state = 1073;
	            	    this.elementProperties( localctx.art );
	            	}

	            	break;
	            case languageParser.T__7:
	            case languageParser.NOT:
	            case languageParser.NULL:
	            case languageParser.DEFAULT:
	            	 if (localctx.tokenAtAnnoPos !== this.getCurrentToken()) this.message( 'syntax-unexpected-after', this.getCurrentToken(), { keyword: this.getCurrentToken().text } ); 
	            	this.state = 1077;
	            	this.elementProperties( localctx.art );
	            	 this.docComment( localctx.art ); 
	            	this.state = 1082;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25) {
	            	    this.state = 1079;
	            	    this.annotationAssignment_ll1( localctx.art );
	            	    this.state = 1084;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case languageParser.T__0:
	            case languageParser.T__3:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1087;
	            this.requiredSemi();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 3 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementProperties(elem) {
	    let localctx = new ElementPropertiesContext(this, this._ctx, this.state, elem);
	    this.enterRule(localctx, 50, languageParser.RULE_elementProperties);
	    var _la = 0; // Token type
	    try {
	        this.state = 1099;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.DEFAULT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1091;
	            this.defaultAndNullability( localctx.elem );
	            break;
	        case languageParser.T__7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1092;
	            this.match(languageParser.T__7);
	            this.state = 1093;
	            localctx.e = this.expression();
	            this.state = 1095;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.STORED) {
	                this.state = 1094;
	                localctx.stored = this.match(languageParser.STORED);
	            }

	             localctx.elem.value = localctx.e.expr;
	                  if (localctx.stored)
	                    localctx.elem.value.stored = this.valueWithTokenLocation( true, localctx.stored );
	                
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultAndNullability(elem) {
	    let localctx = new DefaultAndNullabilityContext(this, this._ctx, this.state, elem);
	    this.enterRule(localctx, 52, languageParser.RULE_defaultAndNullability);
	    var _la = 0; // Token type
	    try {
	        this.state = 1109;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.DEFAULT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1101;
	            this.defaultValue( localctx.elem );
	            this.state = 1103;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 1102;
	                this.nullability( localctx.elem );
	            }

	            break;
	        case languageParser.NOT:
	        case languageParser.NULL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1105;
	            this.nullability( localctx.elem );
	            this.state = 1107;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.DEFAULT) {
	                this.state = 1106;
	                this.defaultValue( localctx.elem );
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue(art) {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 54, languageParser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1111;
	        this.match(languageParser.DEFAULT);
	        this.state = 1112;
	        localctx.expr = this.expression();
	         localctx.art.default = localctx.expr.expr; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendArtifact(art, outer) {
	    let localctx = new ExtendArtifactContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 56, languageParser.RULE_extendArtifact);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1115;
	        this.simplePath( localctx.name, 'Ext' );
	        this.state = 1222;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__4:
	            this.state = 1116;
	            this.match(languageParser.T__4);
	            this.state = 1117;
	            this.simplePath( localctx.elemName, 'ExtElement');
	             this.addExtension( localctx.art, localctx.outer, 'extend', localctx.name, localctx.elemName.path ); 
	            this.state = 1119;
	            this.extendWithOptElementsOrType( art );
	            break;
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__3:
	        case languageParser.T__25:
	             this.addExtension( localctx.art, localctx.outer, 'extend', localctx.name ); 
	            this.state = 1122;
	            this.extendWithOptElementsNoWith( art );
	            break;
	        case languageParser.WITH:
	             this.addExtension( localctx.art, localctx.outer, 'extend', localctx.name ); 
	            this.state = 1124;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	             this.docComment( localctx.art ); 
	            this.state = 1130;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1127;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1132;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1216;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	            if(la_===1) {
	                this.state = 1133;
	                this.match(languageParser.T__1);
	                 localctx.art.elements = this.createDict(); 
	                this.state = 1138;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	                    this.state = 1135;
	                    this.elementDefOrExtend( localctx.art );
	                    this.state = 1140;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1141;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.elements ); 
	                 this.checkExtensionDict( localctx.art.elements ); 
	                 this.insertSemicolon(); 

	            } else if(la_===2) {
	                this.state = 1145;
	                this.match(languageParser.ELEMENTS);
	                 localctx.art.elements = this.createDict(); 
	                this.state = 1147;
	                this.match(languageParser.T__1);
	                this.state = 1151;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	                    this.state = 1148;
	                    this.elementDefOrExtend( localctx.art, true );
	                    this.state = 1153;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1154;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.elements ); 
	                 this.checkExtensionDict( localctx.art.elements ); 
	                 this.insertSemicolon(); 

	            } else if(la_===3) {
	                this.state = 1158;
	                this.match(languageParser.ENUM);
	                 localctx.art.enum = this.createDict(); 
	                this.state = 1160;
	                this.match(languageParser.T__1);
	                this.state = 1164;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                    this.state = 1161;
	                    this.enumSymbolDef( localctx.art );
	                    this.state = 1166;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1167;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 

	            } else if(la_===4) {
	                this.state = 1169;
	                this.typeNamedArgList( localctx.art );

	            } else if(la_===5) {
	                this.state = 1170;
	                this.includeRef( localctx.art );
	                this.state = 1175;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 1171;
	                    this.match(languageParser.T__2);
	                    this.state = 1172;
	                    this.includeRef( localctx.art );
	                    this.state = 1177;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            } else if(la_===6) {
	                this.state = 1178;
	                this.match(languageParser.DEFINITIONS);
	                 localctx.art.artifacts = this.createDict(); 
	                this.state = 1180;
	                this.match(languageParser.T__1);
	                this.state = 1184;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (languageParser.SERVICE - 127)) | (1 << (languageParser.TYPE - 127)) | (1 << (languageParser.VIEW - 127)) | (1 << (languageParser.HideAlternatives - 127)))) !== 0)) {
	                    this.state = 1181;
	                    this.artifactDefOrExtend( localctx.art, 'definitions' );
	                    this.state = 1186;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1187;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.artifacts ); this.insertSemicolon(); 

	            } else if(la_===7) {
	                this.state = 1189;
	                this.match(languageParser.COLUMNS);
	                 localctx.art.columns = this.createArray(); 
	                this.state = 1191;
	                this.match(languageParser.T__1);
	                this.state = 1201;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__15) | (1 << languageParser.T__25) | (1 << languageParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)) | (1 << (languageParser.SERVICE - 97)) | (1 << (languageParser.STORED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)))) !== 0)) {
	                    this.state = 1192;
	                    this.selectItemDef( localctx.art.columns );
	                    this.state = 1198;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__2) {
	                        this.state = 1193;
	                        this.match(languageParser.T__2);
	                         if (this.isStraightBefore("}")) break; 
	                        this.state = 1195;
	                        this.selectItemDef( localctx.art.columns );
	                        this.state = 1200;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 1203;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.columns ); this.insertSemicolon(); 

	            } else if(la_===8) {
	                this.state = 1205;
	                this.match(languageParser.ACTIONS);
	                 localctx.art.actions = this.createDict(); 
	                this.state = 1207;
	                this.match(languageParser.T__1);
	                this.state = 1211;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	                    this.state = 1208;
	                    this.actionFunctionDef( localctx.art );
	                    this.state = 1213;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1214;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 

	            }
	            this.state = 1220;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__0:
	            case languageParser.T__3:
	                this.state = 1218;
	                this.requiredSemi();
	                break;
	            case languageParser.SemicolonTopLevel:
	                this.state = 1219;
	                this.match(languageParser.SemicolonTopLevel);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendService(art, outer) {
	    let localctx = new ExtendServiceContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 58, languageParser.RULE_extendService);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1224;
	        this.match(languageParser.SERVICE);
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1226;
	        this.simplePath( localctx.name, 'ExtService' );
	         localctx.art.name = localctx.name; this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' ); 
	        this.state = 1230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.WITH) {
	            this.state = 1228;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	        }

	         this.docComment( localctx.art ); 
	        this.state = 1236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1233;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 1238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1239;
	        this.optArtifactsBlock( art, 'service' );
	        this.state = 1242;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 1240;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 1241;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendContext(art, outer) {
	    let localctx = new ExtendContextContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 60, languageParser.RULE_extendContext);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1244;
	        this.match(languageParser.CONTEXT);
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1246;
	        this.simplePath( localctx.name, 'ExtContext' );
	         localctx.art.name = localctx.name; this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' ); 
	        this.state = 1250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.WITH) {
	            this.state = 1248;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	        }

	         this.docComment( localctx.art ); 
	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1253;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 1258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1259;
	        this.optArtifactsBlock( art, 'context' );
	        this.state = 1262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 1260;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 1261;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendEntityOrAspect(art, outer) {
	    let localctx = new ExtendEntityOrAspectContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 62, languageParser.RULE_extendEntityOrAspect);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1264;
	        _la = this._input.LA(1);
	        if(!(_la===languageParser.ASPECT || _la===languageParser.ENTITY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1266;
	        this.simplePath( localctx.name, 'Ext' );
	         localctx.art.name = localctx.name;
	              this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' );
	            
	        this.state = 1295;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.WITH:
	            this.state = 1268;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); this.docComment( localctx.art ); 
	            this.state = 1273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1270;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1275;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1285;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1276;
	                this.includeRef( localctx.art );
	                this.state = 1281;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 1277;
	                    this.match(languageParser.T__2);
	                    this.state = 1278;
	                    this.includeRef( localctx.art );
	                    this.state = 1283;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 1284;
	                this.extendForEntity( localctx.art );
	                break;

	            }
	            break;
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__3:
	        case languageParser.T__25:
	        case languageParser.ACTIONS:
	        case languageParser.SemicolonTopLevel:
	             this.docComment( localctx.art ); 
	            this.state = 1291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1288;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1293;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1294;
	            this.extendForEntity( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1299;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 1297;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 1298;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendForEntity(art) {
	    let localctx = new ExtendForEntityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 64, languageParser.RULE_extendForEntity);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1335;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__1:
	        	this.state = 1301;
	        	this.match(languageParser.T__1);
	        	 localctx.art.elements = this.createDict(); 
	        	this.state = 1306;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	        	    this.state = 1303;
	        	    this.elementDefOrExtend( localctx.art );
	        	    this.state = 1308;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1309;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.elements );
	        	            this.checkExtensionDict( localctx.art.elements );
	        	            this.insertSemicolon();
	        	      
	        	this.state = 1322;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===languageParser.ACTIONS) {
	        	    this.state = 1311;
	        	    this.match(languageParser.ACTIONS);
	        	     localctx.art.actions = this.createDict(); 
	        	    this.state = 1313;
	        	    this.match(languageParser.T__1);
	        	    this.state = 1317;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	        	        this.state = 1314;
	        	        this.actionFunctionDef( localctx.art );
	        	        this.state = 1319;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	    this.state = 1320;
	        	    this.match(languageParser.T__3);
	        	     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        	}

	        	break;
	        case languageParser.ACTIONS:
	        	this.state = 1324;
	        	this.match(languageParser.ACTIONS);
	        	 localctx.art.actions = this.createDict(); 
	        	this.state = 1326;
	        	this.match(languageParser.T__1);
	        	this.state = 1330;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	        	    this.state = 1327;
	        	    this.actionFunctionDef( localctx.art );
	        	    this.state = 1332;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1333;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        	break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendProjection(art, outer) {
	    let localctx = new ExtendProjectionContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 66, languageParser.RULE_extendProjection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1337;
	        this.match(languageParser.PROJECTION);
	         localctx.art.expectedKind = this.valueWithTokenLocation( 'entity' ); 
	        this.state = 1339;
	        this.simplePath( localctx.name, 'Ext' );
	         localctx.art.name = localctx.name;
	              this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' );
	            
	        this.state = 1343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.WITH) {
	            this.state = 1341;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	        }

	         this.docComment( localctx.art ); 
	        this.state = 1349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1346;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1391;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__1:
	        	this.state = 1352;
	        	this.match(languageParser.T__1);
	        	 localctx.art.columns = this.createArray(); 
	        	this.state = 1363;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__15) | (1 << languageParser.T__25) | (1 << languageParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)) | (1 << (languageParser.SERVICE - 97)) | (1 << (languageParser.STORED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)))) !== 0)) {
	        	    this.state = 1354;
	        	    this.selectItemDef( localctx.art.columns );
	        	    this.state = 1360;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===languageParser.T__2) {
	        	        this.state = 1355;
	        	        this.match(languageParser.T__2);
	        	         if (this.isStraightBefore("}")) break; 
	        	        this.state = 1357;
	        	        this.selectItemDef( localctx.art.columns );
	        	        this.state = 1362;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	}

	        	this.state = 1365;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.columns ); this.insertSemicolon(); 
	        	this.state = 1378;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===languageParser.ACTIONS) {
	        	    this.state = 1367;
	        	    this.match(languageParser.ACTIONS);
	        	     localctx.art.actions = this.createDict(); 
	        	    this.state = 1369;
	        	    this.match(languageParser.T__1);
	        	    this.state = 1373;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	        	        this.state = 1370;
	        	        this.actionFunctionDef( localctx.art );
	        	        this.state = 1375;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	    this.state = 1376;
	        	    this.match(languageParser.T__3);
	        	     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        	}

	        	break;
	        case languageParser.ACTIONS:
	        	this.state = 1380;
	        	this.match(languageParser.ACTIONS);
	        	 localctx.art.actions = this.createDict(); 
	        	this.state = 1382;
	        	this.match(languageParser.T__1);
	        	this.state = 1386;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===languageParser.T__25 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
	        	    this.state = 1383;
	        	    this.actionFunctionDef( localctx.art );
	        	    this.state = 1388;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1389;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon();
	        	break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 1393;
	            this.requiredSemi();
	            break;
	        case languageParser.SemicolonTopLevel:
	            this.state = 1394;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendType(art, outer) {
	    let localctx = new ExtendTypeContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 68, languageParser.RULE_extendType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1397;
	        this.match(languageParser.TYPE);
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1399;
	        this.simplePath( localctx.name, 'Ext' );
	         localctx.art.name = localctx.name;
	              this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' );
	            
	        this.state = 1437;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__3:
	        case languageParser.T__25:
	            this.state = 1401;
	            this.extendWithOptElementsNoWith( art );
	            break;
	        case languageParser.WITH:
	            this.state = 1402;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); this.docComment( localctx.art ); 
	            this.state = 1407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1404;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1409;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1431;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case languageParser.T__1:
	            	this.state = 1410;
	            	this.match(languageParser.T__1);
	            	 localctx.art.elements = this.createDict(); 
	            	this.state = 1415;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	            	    this.state = 1412;
	            	    this.elementDefOrExtend( localctx.art );
	            	    this.state = 1417;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1418;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.elements ); 
	            	 this.checkExtensionDict( localctx.art.elements ); 
	            	 this.insertSemicolon(); 
	            	break;
	            case languageParser.T__5:
	            	this.state = 1422;
	            	this.typeNamedArgList( localctx.art );
	            	break;
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	            	this.state = 1423;
	            	this.includeRef( localctx.art );
	            	this.state = 1428;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__2) {
	            	    this.state = 1424;
	            	    this.match(languageParser.T__2);
	            	    this.state = 1425;
	            	    this.includeRef( localctx.art );
	            	    this.state = 1430;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case languageParser.T__0:
	            case languageParser.T__3:
	            case languageParser.SemicolonTopLevel:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1435;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__0:
	            case languageParser.T__3:
	                this.state = 1433;
	                this.requiredSemi();
	                break;
	            case languageParser.SemicolonTopLevel:
	                this.state = 1434;
	                this.match(languageParser.SemicolonTopLevel);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendWithOptElementsOrType(art) {
	    let localctx = new ExtendWithOptElementsOrTypeContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 70, languageParser.RULE_extendWithOptElementsOrType);
	    var _la = 0; // Token type
	    try {
	        this.state = 1488;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__3:
	        case languageParser.T__25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1439;
	            this.extendWithOptElementsNoWith( art );
	            break;
	        case languageParser.WITH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1440;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); this.docComment( localctx.art ); 
	            this.state = 1445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1442;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1447;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1485;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case languageParser.T__1:
	            	this.state = 1448;
	            	this.match(languageParser.T__1);
	            	 localctx.art.elements = this.createDict(); 
	            	this.state = 1453;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	            	    this.state = 1450;
	            	    this.elementDefOrExtend( localctx.art );
	            	    this.state = 1455;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1456;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.elements ); 
	            	 this.checkExtensionDict( localctx.art.elements ); 
	            	 this.insertSemicolon(); 
	            	break;
	            case languageParser.ELEMENTS:
	            	this.state = 1460;
	            	this.match(languageParser.ELEMENTS);
	            	 localctx.art.elements = this.createDict(); 
	            	this.state = 1462;
	            	this.match(languageParser.T__1);
	            	this.state = 1466;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	            	    this.state = 1463;
	            	    this.elementDefOrExtend( localctx.art, true );
	            	    this.state = 1468;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1469;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.elements ); 
	            	 this.checkExtensionDict( localctx.art.elements ); 
	            	 this.insertSemicolon(); 
	            	break;
	            case languageParser.ENUM:
	            	this.state = 1473;
	            	this.match(languageParser.ENUM);
	            	 localctx.art.enum = this.createDict(); 
	            	this.state = 1475;
	            	this.match(languageParser.T__1);
	            	this.state = 1479;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	            	    this.state = 1476;
	            	    this.enumSymbolDef( localctx.art );
	            	    this.state = 1481;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1482;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	            	break;
	            case languageParser.T__5:
	            	this.state = 1484;
	            	this.typeNamedArgList( localctx.art );
	            	break;
	            case languageParser.T__0:
	            case languageParser.T__3:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1487;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendWithOptElementsNoWith(art) {
	    let localctx = new ExtendWithOptElementsNoWithContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 72, languageParser.RULE_extendWithOptElementsNoWith);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.docComment( localctx.art ); 
	        this.state = 1494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1491;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__1) {
	            this.state = 1497;
	            this.match(languageParser.T__1);
	             localctx.art.elements = this.createDict(); 
	            this.state = 1502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	                this.state = 1499;
	                this.elementDefOrExtend( localctx.art );
	                this.state = 1504;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1505;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.elements ); 
	             this.checkExtensionDict( localctx.art.elements ); 
	             this.insertSemicolon(); 
	        }

	        this.state = 1511;
	        this.requiredSemi();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementDefOrExtend(outer, explicitElement) {
	    let localctx = new ElementDefOrExtendContext(this, this._ctx, this.state, outer, explicitElement);
	    this.enterRule(localctx, 74, languageParser.RULE_elementDefOrExtend);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1514;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1523;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1520;
	            this.match(languageParser.EXTEND);
	            this.state = 1521;
	            this.extendElement( localctx.art, localctx.outer );
	            break;

	        case 2:
	            this.state = 1522;
	            this.elementDefInner( localctx.art, localctx.outer, localctx.explicitElement );
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendElement(art, outer) {
	    let localctx = new ExtendElementContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 76, languageParser.RULE_extendElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.setLocalToken( 'ELEMENT', 'ELEMENT', /^([:{@=}()]|WITH)$/i ); 
	        this.state = 1528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.ELEMENT) {
	            this.state = 1526;
	            this.match(languageParser.ELEMENT);
	             localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        }

	        this.state = 1530;
	        localctx.name = this.ident('ExtElement');
	         this.addDef( localctx.art, localctx.outer, 'elements', 'extend', localctx.name.id ); 
	        this.state = 1532;
	        this.extendWithOptElementsOrType( localctx.art, localctx.art );
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateArtifact(art, outer) {
	    let localctx = new AnnotateArtifactContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 78, languageParser.RULE_annotateArtifact);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        this.simplePath( localctx.name, 'Ext' );
	        this.state = 1607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__4:
	            this.state = 1535;
	            this.match(languageParser.T__4);
	            this.state = 1536;
	            this.simplePath( localctx.elemName, 'ExtElement');
	             this.addExtension( localctx.art, localctx.outer, 'annotate', localctx.name, localctx.elemName.path ); 
	            this.state = 1540;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.WITH) {
	                this.state = 1538;
	                this.match(languageParser.WITH);
	                 this.noSemicolonHere(); 
	            }

	             this.docComment( localctx.art ); 
	            this.state = 1546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1543;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1548;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1553;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__1:
	                this.state = 1549;
	                this.annotateArtifactElements( localctx.art );
	                this.state = 1550;
	                this.optionalSemi();
	                break;
	            case languageParser.T__0:
	            case languageParser.T__3:
	                this.state = 1552;
	                this.requiredSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__3:
	        case languageParser.T__5:
	        case languageParser.T__25:
	        case languageParser.WITH:
	        case languageParser.ACTIONS:
	        case languageParser.RETURNS:
	             this.addExtension( localctx.art, localctx.outer, 'annotate', localctx.name ); 
	            this.state = 1558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.WITH) {
	                this.state = 1556;
	                this.match(languageParser.WITH);
	                 this.noSemicolonHere(); 
	            }

	             this.docComment( localctx.art ); 
	            this.state = 1564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 1561;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1566;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1605;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__1:
	                this.state = 1567;
	                this.annotateArtifactElements( localctx.art );
	                this.state = 1569;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.ACTIONS) {
	                    this.state = 1568;
	                    this.annotateArtifactActions( localctx.art );
	                }

	                this.state = 1571;
	                this.optionalSemi();
	                break;
	            case languageParser.ACTIONS:
	                this.state = 1573;
	                this.annotateArtifactActions( localctx.art );
	                this.state = 1574;
	                this.optionalSemi();
	                break;
	            case languageParser.T__5:
	                this.state = 1576;
	                this.match(languageParser.T__5);
	                 localctx.art.params = this.createDict(); 
	                this.state = 1578;
	                this.annotateParam( localctx.art );
	                this.state = 1584;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 1579;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore(')')) break; 
	                    this.state = 1581;
	                    this.annotateParam( localctx.art );
	                    this.state = 1586;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1587;
	                this.match(languageParser.T__6);
	                 this.finalizeDictOrArray( localctx.art.params ); 
	                 this.checkExtensionDict( localctx.art.params ); 
	                this.state = 1601;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__1:
	                    this.state = 1590;
	                    this.annotateArtifactElements( localctx.art );
	                    this.state = 1592;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.ACTIONS) {
	                        this.state = 1591;
	                        this.annotateArtifactActions( localctx.art );
	                    }

	                    this.state = 1594;
	                    this.optionalSemi();
	                    break;
	                case languageParser.ACTIONS:
	                    this.state = 1596;
	                    this.annotateArtifactActions( localctx.art );
	                    this.state = 1597;
	                    this.optionalSemi();
	                    break;
	                case languageParser.RETURNS:
	                    this.state = 1599;
	                    this.annotateReturns( localctx.art );
	                    break;
	                case languageParser.T__0:
	                case languageParser.T__3:
	                    this.state = 1600;
	                    this.requiredSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case languageParser.RETURNS:
	                this.state = 1603;
	                this.annotateReturns( localctx.art );
	                break;
	            case languageParser.T__0:
	            case languageParser.T__3:
	                this.state = 1604;
	                this.requiredSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateArtifactActions(art) {
	    let localctx = new AnnotateArtifactActionsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 80, languageParser.RULE_annotateArtifactActions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        this.match(languageParser.ACTIONS);
	         localctx.art.actions = this.createDict(); 
	        this.state = 1611;
	        this.match(languageParser.T__1);
	        this.state = 1615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	            this.state = 1612;
	            this.annotateAction( localctx.art );
	            this.state = 1617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1618;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.actions ); 
	         this.checkExtensionDict( localctx.art.actions ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateArtifactElements(art) {
	    let localctx = new AnnotateArtifactElementsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 82, languageParser.RULE_annotateArtifactElements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1622;
	        this.match(languageParser.T__1);
	         localctx.art.elements = this.createDict(); 
	        this.state = 1627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	            this.state = 1624;
	            this.annotateElement( localctx.art );
	            this.state = 1629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1630;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); 
	         this.checkExtensionDict( localctx.art.elements ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateElement(outer) {
	    let localctx = new AnnotateElementContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 84, languageParser.RULE_annotateElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1635;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1641;
	        localctx.name = this.ident('ExtElement');
	         this.addDef( localctx.art, localctx.outer, 'elements', 'annotate', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 1646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1643;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1648;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1662;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.state = 1649;
	            this.match(languageParser.T__1);
	             localctx.art.elements = this.createDict(); 
	            this.state = 1654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                this.state = 1651;
	                this.annotateElement( localctx.art );
	                this.state = 1656;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1657;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.elements ); 
	             this.checkExtensionDict( localctx.art.elements ); 
	            this.state = 1660;
	            this.optionalSemi();
	            break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 1661;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateAction(outer) {
	    let localctx = new AnnotateActionContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 86, languageParser.RULE_annotateAction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1665;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1670;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1671;
	        localctx.name = this.ident('ExtBoundAction');
	         this.addDef( localctx.art, localctx.outer, 'actions', 'annotate', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 1676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1673;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__5) {
	            this.state = 1679;
	            this.match(languageParser.T__5);
	             localctx.art.params = this.createDict(); 
	            this.state = 1681;
	            this.annotateParam( localctx.art );
	            this.state = 1687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 1682;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 1684;
	                this.annotateParam( localctx.art );
	                this.state = 1689;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1690;
	            this.match(languageParser.T__6);
	             this.finalizeDictOrArray( localctx.art.params ); 
	             this.checkExtensionDict( localctx.art.params ); 
	        }

	        this.state = 1698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.RETURNS:
	            this.state = 1696;
	            this.annotateReturns( localctx.art );
	            break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 1697;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateReturns(art) {
	    let localctx = new AnnotateReturnsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 88, languageParser.RULE_annotateReturns);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        localctx.ret = this.match(languageParser.RETURNS);
	         localctx.art.returns = { location: this.tokenLocation( localctx.ret ), kind: 'annotate' };
	                          localctx.art.returns.location.tokenIndex = localctx.ret.tokenIndex; 
	         this.docComment( localctx.art.returns ); 
	        this.state = 1706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1703;
	            this.annotationAssignment_ll1( localctx.art.returns );
	            this.state = 1708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1722;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.state = 1709;
	            this.match(languageParser.T__1);
	             localctx.art.returns.elements = this.createDict(); 
	            this.state = 1714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                this.state = 1711;
	                this.annotateElement( localctx.art.returns );
	                this.state = 1716;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1717;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.returns.elements ); 
	             this.checkExtensionDict( localctx.art.returns.elements ); 
	            this.state = 1720;
	            this.optionalSemi();
	            break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	            this.state = 1721;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art.returns ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateParam(outer) {
	    let localctx = new AnnotateParamContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 90, languageParser.RULE_annotateParam);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1725;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1731;
	        localctx.param = this.ident('ExtParam');
	         this.addDef( localctx.art, localctx.outer, 'params', 'annotate', localctx.param.id );
	              this.docComment( localctx.art ); 
	        this.state = 1736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1733;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includeRef(art) {
	    let localctx = new IncludeRefContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 92, languageParser.RULE_includeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1739;
	        this.simplePath( localctx.incl, 'artref' );
	         localctx.art.includes ??= []; localctx.art.includes.push(localctx.incl); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpec(art) {
	    let localctx = new TypeSpecContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 94, languageParser.RULE_typeSpec);
	    try {
	        this.state = 1745;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1742;
	            this.typeStruct( localctx.art );
	            break;
	        case languageParser.T__4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1743;
	            this.match(languageParser.T__4);
	            this.state = 1744;
	            this.typeSpecCont( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnTypeSpec(art) {
	    let localctx = new ReturnTypeSpecContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 96, languageParser.RULE_returnTypeSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1747;
	        localctx.ret = this.match(languageParser.RETURNS);
	         localctx.art.returns = { location: this.tokenLocation( localctx.ret ), kind: 'param' };
	              localctx.art.returns.location.tokenIndex = localctx.ret.tokenIndex; 
	         this.docComment( localctx.art.returns ); 
	        this.state = 1753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 1750;
	            this.annotationAssignment_ll1( localctx.art.returns );
	            this.state = 1755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1756;
	        this.typeSpecCont( localctx.art.returns );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecCont(art) {
	    let localctx = new TypeSpecContContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 98, languageParser.RULE_typeSpecCont);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1758;
	            this.typeStruct( localctx.art );
	            this.state = 1760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 1759;
	                this.nullability( localctx.art );
	            }

	            break;

	        case 2:
	            this.state = 1762;
	            this.typeArray( localctx.art );
	            break;

	        case 3:
	            this.state = 1763;
	            this.typeTypeOf( localctx.art );
	            this.state = 1765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 1764;
	                this.nullability( localctx.art );
	            }

	            this.state = 1781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ENUM) {
	                this.state = 1767;
	                this.match(languageParser.ENUM);
	                this.state = 1768;
	                this.match(languageParser.T__1);
	                 localctx.art.enum = this.createDict(); 
	                this.state = 1773;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                    this.state = 1770;
	                    this.enumSymbolDef( localctx.art );
	                    this.state = 1775;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1776;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	                this.state = 1779;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                    this.state = 1778;
	                    this.nullability( localctx.art );
	                }

	            }

	            break;

	        case 4:
	            this.state = 1783;
	            this.typeRefOptArgs( localctx.art );
	            this.state = 1785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 1784;
	                this.nullability( localctx.art );
	            }

	            this.state = 1801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ENUM) {
	                this.state = 1787;
	                this.match(languageParser.ENUM);
	                this.state = 1788;
	                this.match(languageParser.T__1);
	                 localctx.art.enum = this.createDict(); 
	                this.state = 1793;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                    this.state = 1790;
	                    this.enumSymbolDef( localctx.art );
	                    this.state = 1795;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1796;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	                this.state = 1799;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                    this.state = 1798;
	                    this.nullability( localctx.art );
	                }

	            }

	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecSemi(art) {
	    let localctx = new TypeSpecSemiContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 100, languageParser.RULE_typeSpecSemi);
	    var _la = 0; // Token type
	    try {
	        this.state = 1976;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1805;
	            this.typeStruct( localctx.art );
	            this.state = 1810;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.NOT:
	            case languageParser.NULL:
	                this.state = 1806;
	                this.nullability( localctx.art );
	                this.state = 1807;
	                this.requiredSemi();
	                break;
	            case languageParser.EOF:
	            case languageParser.T__0:
	            case languageParser.T__3:
	            case languageParser.T__25:
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ASPECT:
	            case languageParser.CONTEXT:
	            case languageParser.DEFINE:
	            case languageParser.ENTITY:
	            case languageParser.EVENT:
	            case languageParser.EXTEND:
	            case languageParser.FUNCTION:
	            case languageParser.SERVICE:
	            case languageParser.TYPE:
	            case languageParser.USING:
	            case languageParser.VIEW:
	            case languageParser.HideAlternatives:
	                this.state = 1809;
	                this.optionalSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.T__4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1812;
	            this.match(languageParser.T__4);
	             this.setLocalToken( 'MANY', 'HelperToken1', /^[^\{]/ ); 
	            this.state = 1974;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1814;
	                this.typeStruct( localctx.art );
	                this.state = 1819;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.NOT:
	                case languageParser.NULL:
	                    this.state = 1815;
	                    this.nullability( localctx.art );
	                    this.state = 1816;
	                    this.requiredSemi();
	                    break;
	                case languageParser.EOF:
	                case languageParser.T__0:
	                case languageParser.T__3:
	                case languageParser.T__25:
	                case languageParser.ABSTRACT:
	                case languageParser.ACTION:
	                case languageParser.ANNOTATE:
	                case languageParser.ANNOTATION:
	                case languageParser.ASPECT:
	                case languageParser.CONTEXT:
	                case languageParser.DEFINE:
	                case languageParser.ENTITY:
	                case languageParser.EVENT:
	                case languageParser.EXTEND:
	                case languageParser.FUNCTION:
	                case languageParser.SERVICE:
	                case languageParser.TYPE:
	                case languageParser.USING:
	                case languageParser.VIEW:
	                case languageParser.HideAlternatives:
	                    this.state = 1818;
	                    this.optionalSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 1821;
	                this.typeAssociationBase( localctx.art, false );
	                this.state = 1827;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1822;
	                    this.typeToMany( localctx.art );
	                    break;

	                case 2:
	                    this.state = 1823;
	                    this.typeToOne( localctx.art );
	                    break;

	                case 3:
	                    this.state = 1824;
	                    this.simplePath( localctx.art.target, 'artref' );
	                     if (this.getCurrentToken().text === '{' && localctx.art.type.path[0]?.id === 'cds.Composition') this.reportPathNamedManyOrOne( localctx.art.target ); 
	                    break;

	                }
	                this.state = 1830;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.T__1 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.ON - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	                    this.state = 1829;
	                    this.typeAssociationCont( localctx.art );
	                }

	                this.state = 1832;
	                this.requiredSemi();
	                break;

	            case 3:
	                this.state = 1834;
	                localctx.many = this.match(languageParser.HelperToken1);
	                 localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	                this.state = 1836;
	                this.typeStruct( localctx.art.items );
	                this.state = 1841;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.NOT:
	                case languageParser.NULL:
	                    this.state = 1837;
	                    this.nullability( localctx.art.items );
	                    this.state = 1838;
	                    this.requiredSemi();
	                    break;
	                case languageParser.EOF:
	                case languageParser.T__0:
	                case languageParser.T__3:
	                case languageParser.T__25:
	                case languageParser.ABSTRACT:
	                case languageParser.ACTION:
	                case languageParser.ANNOTATE:
	                case languageParser.ANNOTATION:
	                case languageParser.ASPECT:
	                case languageParser.CONTEXT:
	                case languageParser.DEFINE:
	                case languageParser.ENTITY:
	                case languageParser.EVENT:
	                case languageParser.EXTEND:
	                case languageParser.FUNCTION:
	                case languageParser.SERVICE:
	                case languageParser.TYPE:
	                case languageParser.USING:
	                case languageParser.VIEW:
	                case languageParser.HideAlternatives:
	                    this.state = 1840;
	                    this.optionalSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 4:
	                this.state = 1848;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.ARRAY:
	                    this.state = 1843;
	                    localctx.array = this.match(languageParser.ARRAY);
	                    this.state = 1844;
	                    localctx.of = this.match(languageParser.OF);
	                     localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
	                    break;
	                case languageParser.MANY:
	                    this.state = 1846;
	                    localctx.many = this.match(languageParser.MANY);
	                     localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 1890;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__1:
	                    this.state = 1850;
	                    this.typeStruct( localctx.art.items );
	                    this.state = 1855;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case languageParser.NOT:
	                    case languageParser.NULL:
	                        this.state = 1851;
	                        this.nullability( localctx.art.items );
	                        this.state = 1852;
	                        this.requiredSemi();
	                        break;
	                    case languageParser.EOF:
	                    case languageParser.T__0:
	                    case languageParser.T__3:
	                    case languageParser.T__25:
	                    case languageParser.ABSTRACT:
	                    case languageParser.ACTION:
	                    case languageParser.ANNOTATE:
	                    case languageParser.ANNOTATION:
	                    case languageParser.ASPECT:
	                    case languageParser.CONTEXT:
	                    case languageParser.DEFINE:
	                    case languageParser.ENTITY:
	                    case languageParser.EVENT:
	                    case languageParser.EXTEND:
	                    case languageParser.FUNCTION:
	                    case languageParser.SERVICE:
	                    case languageParser.TYPE:
	                    case languageParser.USING:
	                    case languageParser.VIEW:
	                    case languageParser.HideAlternatives:
	                        this.state = 1854;
	                        this.optionalSemi();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;
	                case languageParser.ABSTRACT:
	                case languageParser.ACTION:
	                case languageParser.ACTIONS:
	                case languageParser.AND:
	                case languageParser.ANNOTATE:
	                case languageParser.ANNOTATION:
	                case languageParser.ARRAY:
	                case languageParser.ASC:
	                case languageParser.ASPECT:
	                case languageParser.ASSOCIATION:
	                case languageParser.BETWEEN:
	                case languageParser.COLUMNS:
	                case languageParser.COMPOSITION:
	                case languageParser.CONTEXT:
	                case languageParser.CROSS:
	                case languageParser.CURRENT:
	                case languageParser.DEFAULT:
	                case languageParser.DEFINE:
	                case languageParser.DEFINITIONS:
	                case languageParser.DESC:
	                case languageParser.ELEMENTS:
	                case languageParser.ELSE:
	                case languageParser.END:
	                case languageParser.ENTITY:
	                case languageParser.ENUM:
	                case languageParser.EVENT:
	                case languageParser.ESCAPE:
	                case languageParser.EXACT:
	                case languageParser.EXCEPT:
	                case languageParser.EXCLUDING:
	                case languageParser.EXTEND:
	                case languageParser.FIRST:
	                case languageParser.FLOATING:
	                case languageParser.FOLLOWING:
	                case languageParser.FULL:
	                case languageParser.FUNCTION:
	                case languageParser.GROUP:
	                case languageParser.HAVING:
	                case languageParser.INNER:
	                case languageParser.INTERSECT:
	                case languageParser.INTO:
	                case languageParser.IS:
	                case languageParser.JOIN:
	                case languageParser.LAST:
	                case languageParser.LEFT:
	                case languageParser.LIKE:
	                case languageParser.LIMIT:
	                case languageParser.LOCALIZED:
	                case languageParser.MANY:
	                case languageParser.MINUS:
	                case languageParser.MIXIN:
	                case languageParser.NAMESPACE:
	                case languageParser.NULLS:
	                case languageParser.OFFSET:
	                case languageParser.ONE:
	                case languageParser.OR:
	                case languageParser.ORDER:
	                case languageParser.OUTER:
	                case languageParser.PARAMETERS:
	                case languageParser.PARTITION:
	                case languageParser.PRECEDING:
	                case languageParser.PROJECTION:
	                case languageParser.REDIRECTED:
	                case languageParser.RETURNS:
	                case languageParser.RIGHT:
	                case languageParser.ROW:
	                case languageParser.ROWS:
	                case languageParser.SERVICE:
	                case languageParser.STORED:
	                case languageParser.THEN:
	                case languageParser.TO:
	                case languageParser.TYPE:
	                case languageParser.UNION:
	                case languageParser.UNBOUNDED:
	                case languageParser.UP:
	                case languageParser.USING:
	                case languageParser.VARIABLE:
	                case languageParser.VIEW:
	                case languageParser.Identifier:
	                    this.state = 1859;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1857;
	                        this.typeTypeOf( localctx.art.items );
	                        break;

	                    case 2:
	                        this.state = 1858;
	                        this.typeRefOptArgs( localctx.art.items );
	                        break;

	                    }
	                    this.state = 1862;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                        this.state = 1861;
	                        this.nullability( localctx.art.items );
	                    }

	                     localctx.tokenAtAnnoPos =  this.getCurrentToken(); this.docComment( localctx.art ); 
	                    this.state = 1868;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__25) {
	                        this.state = 1865;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 1870;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1886;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.ENUM) {
	                         if (localctx.tokenAtAnnoPos !== this.getCurrentToken()) this.message( 'syntax-unexpected-after', this.getCurrentToken(), { keyword: this.getCurrentToken().text } ); 
	                        this.state = 1872;
	                        this.match(languageParser.ENUM);
	                        this.state = 1873;
	                        this.match(languageParser.T__1);
	                         localctx.art.items.enum = this.createDict(); 
	                        this.state = 1878;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                            this.state = 1875;
	                            this.enumSymbolDef( localctx.art.items );
	                            this.state = 1880;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1881;
	                        this.match(languageParser.T__3);
	                         this.finalizeDictOrArray( localctx.art.items.enum ); this.insertSemicolon(); 
	                        this.state = 1884;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                            this.state = 1883;
	                            this.nullability( localctx.art.items );
	                        }

	                    }

	                    this.state = 1888;
	                    this.requiredSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 5:
	                this.state = 1892;
	                this.typeTypeOf( localctx.art );
	                this.state = 1894;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	                    this.state = 1893;
	                    this.defaultAndNullability( localctx.art );
	                }

	                 this.docComment( localctx.art ); 
	                this.state = 1900;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25) {
	                    this.state = 1897;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 1902;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1903;
	                this.requiredSemi();
	                break;

	            case 6:
	                this.state = 1905;
	                localctx.l = this.match(languageParser.LOCALIZED);
	                 localctx.art.localized = this.valueWithTokenLocation( true, localctx.l ); 
	                this.state = 1907;
	                this.typeRefOptArgs( localctx.art );
	                this.state = 1909;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	                    this.state = 1908;
	                    this.defaultAndNullability( localctx.art );
	                }

	                 this.docComment( localctx.art ); 
	                this.state = 1915;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25) {
	                    this.state = 1912;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 1917;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1918;
	                this.requiredSemi();
	                break;

	            case 7:
	                 localctx.art.type = {}; 
	                this.state = 1921;
	                this.simplePath( localctx.art.type, 'artref' );
	                this.state = 1972;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__0:
	                case languageParser.T__3:
	                case languageParser.T__4:
	                case languageParser.T__5:
	                case languageParser.T__25:
	                case languageParser.NOT:
	                case languageParser.NULL:
	                case languageParser.DEFAULT:
	                case languageParser.ENUM:
	                case languageParser.HelperToken1:
	                case languageParser.HelperToken2:
	                    this.state = 1926;
	                    this._errHandler.sync(this);
	                    switch (this._input.LA(1)) {
	                    case languageParser.T__5:
	                    	this.state = 1922;
	                    	this.typeRefArgs( localctx.art );
	                    	break;
	                    case languageParser.T__4:
	                    	this.state = 1923;
	                    	this.match(languageParser.T__4);
	                    	 localctx.art.type.scope = localctx.art.type.path.length; 
	                    	this.state = 1925;
	                    	this.simplePath( localctx.art.type, 'ref');
	                    	break;
	                    case languageParser.T__0:
	                    case languageParser.T__3:
	                    case languageParser.T__25:
	                    case languageParser.NOT:
	                    case languageParser.NULL:
	                    case languageParser.DEFAULT:
	                    case languageParser.ENUM:
	                    case languageParser.HelperToken1:
	                    case languageParser.HelperToken2:
	                    	break;
	                    default:
	                    	break;
	                    }
	                    this.state = 1928;
	                    this.optInvisibleNullability( localctx.art );
	                     localctx.tokenAtAnnoPos =  this.getCurrentToken(); this.docComment( localctx.art ); 
	                    this.state = 1933;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__25) {
	                        this.state = 1930;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 1935;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1952;
	                    this._errHandler.sync(this);
	                    switch (this._input.LA(1)) {
	                    case languageParser.ENUM:
	                    	this.state = 1936;
	                    	this.match(languageParser.ENUM);
	                    	this.state = 1937;
	                    	this.match(languageParser.T__1);
	                    	 localctx.art.enum = this.createDict(); 
	                    	this.state = 1942;
	                    	this._errHandler.sync(this);
	                    	_la = this._input.LA(1);
	                    	while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                    	    this.state = 1939;
	                    	    this.enumSymbolDef( localctx.art );
	                    	    this.state = 1944;
	                    	    this._errHandler.sync(this);
	                    	    _la = this._input.LA(1);
	                    	}
	                    	this.state = 1945;
	                    	this.match(languageParser.T__3);
	                    	 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	                    	this.state = 1948;
	                    	this._errHandler.sync(this);
	                    	_la = this._input.LA(1);
	                    	if(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	                    	    this.state = 1947;
	                    	    this.defaultAndNullability( localctx.art );
	                    	}

	                    	break;
	                    case languageParser.NOT:
	                    case languageParser.NULL:
	                    case languageParser.DEFAULT:
	                    	 if (localctx.tokenAtAnnoPos !== this.getCurrentToken()) this.message( 'syntax-unexpected-after', this.getCurrentToken(), { keyword: this.getCurrentToken().text } ); 
	                    	this.state = 1951;
	                    	this.defaultAndNullability( localctx.art );
	                    	break;
	                    case languageParser.T__0:
	                    case languageParser.T__3:
	                    	break;
	                    default:
	                    	break;
	                    }
	                    this.state = 1954;
	                    this.requiredSemi();
	                    break;
	                case languageParser.T__1:
	                case languageParser.T__2:
	                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
	                    this.state = 1962;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__2) {
	                        this.state = 1957;
	                        this.match(languageParser.T__2);
	                         if (this.isStraightBefore('{')) break; 
	                        this.state = 1959;
	                        this.includeRef( localctx.art );
	                        this.state = 1964;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1965;
	                    this.typeStruct( localctx.art );
	                    this.state = 1970;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case languageParser.EOF:
	                    case languageParser.T__0:
	                    case languageParser.T__3:
	                    case languageParser.T__25:
	                    case languageParser.ABSTRACT:
	                    case languageParser.ACTION:
	                    case languageParser.ANNOTATE:
	                    case languageParser.ANNOTATION:
	                    case languageParser.ASPECT:
	                    case languageParser.CONTEXT:
	                    case languageParser.DEFINE:
	                    case languageParser.ENTITY:
	                    case languageParser.EVENT:
	                    case languageParser.EXTEND:
	                    case languageParser.FUNCTION:
	                    case languageParser.SERVICE:
	                    case languageParser.TYPE:
	                    case languageParser.USING:
	                    case languageParser.VIEW:
	                    case languageParser.HideAlternatives:
	                        this.state = 1966;
	                        this.optionalSemi();
	                        break;
	                    case languageParser.NOT:
	                    case languageParser.NULL:
	                        this.state = 1967;
	                        this.nullability( localctx.art );
	                        this.state = 1968;
	                        this.requiredSemi();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 3 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStruct(art, attachLoc) {
	    let localctx = new TypeStructContext(this, this._ctx, this.state, art, attachLoc);
	    this.enterRule(localctx, 102, languageParser.RULE_typeStruct);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1978;
	        this.match(languageParser.T__1);
	         localctx.art.elements = this.createDict(); 
	        this.state = 1983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	            this.state = 1980;
	            this.elementDef( localctx.art );
	            this.state = 1985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1986;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); 
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.attachLoc) this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeCompoStruct(art) {
	    let localctx = new TypeCompoStructContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 104, languageParser.RULE_typeCompoStruct);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1989;
	        this.match(languageParser.COMPOSITIONofBRACE);
	         localctx.art.elements = this.createDict(); 
	        this.state = 1994;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MINUS - 80)) | (1 << (languageParser.MIXIN - 80)) | (1 << (languageParser.NAMESPACE - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.STORED - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.ELEMENT - 112)) | (1 << (languageParser.MASKED - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
	            this.state = 1991;
	            this.elementDef( localctx.art );
	            this.state = 1996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1997;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArray(art) {
	    let localctx = new TypeArrayContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 106, languageParser.RULE_typeArray);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2005;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.ARRAY:
	            this.state = 2000;
	            localctx.array = this.match(languageParser.ARRAY);
	            this.state = 2001;
	            localctx.of = this.match(languageParser.OF);
	             localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
	            break;
	        case languageParser.MANY:
	            this.state = 2003;
	            localctx.many = this.match(languageParser.MANY);
	             localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2007;
	            this.typeStruct( localctx.art.items );
	            this.state = 2009;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 2008;
	                this.nullability( localctx.art.items );
	            }

	            break;

	        case 2:
	            this.state = 2011;
	            this.typeTypeOf( localctx.art.items );
	            this.state = 2013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 2012;
	                this.nullability( localctx.art.items );
	            }

	            this.state = 2029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ENUM) {
	                this.state = 2015;
	                this.match(languageParser.ENUM);
	                this.state = 2016;
	                this.match(languageParser.T__1);
	                 localctx.art.items.enum = this.createDict(); 
	                this.state = 2021;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                    this.state = 2018;
	                    this.enumSymbolDef( localctx.art.items );
	                    this.state = 2023;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2024;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.items.enum ); 
	                this.state = 2027;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                    this.state = 2026;
	                    this.nullability( localctx.art.items );
	                }

	            }

	            break;

	        case 3:
	            this.state = 2031;
	            this.typeRefOptArgs( localctx.art.items );
	            this.state = 2033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                this.state = 2032;
	                this.nullability( localctx.art.items );
	            }

	            this.state = 2049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ENUM) {
	                this.state = 2035;
	                this.match(languageParser.ENUM);
	                this.state = 2036;
	                this.match(languageParser.T__1);
	                 localctx.art.items.enum = this.createDict(); 
	                this.state = 2041;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                    this.state = 2038;
	                    this.enumSymbolDef( localctx.art.items );
	                    this.state = 2043;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2044;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.items.enum ); 
	                this.state = 2047;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.NOT || _la===languageParser.NULL) {
	                    this.state = 2046;
	                    this.nullability( localctx.art.items );
	                }

	            }

	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssociationBase(art, handleTypeCompo) {
	    let localctx = new TypeAssociationBaseContext(this, this._ctx, this.state, art, handleTypeCompo);
	    this.enterRule(localctx, 108, languageParser.RULE_typeAssociationBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2065;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.ASSOCIATION:
	            this.state = 2053;
	            localctx.assoc = this.match(languageParser.ASSOCIATION);
	            this.state = 2055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__10) {
	                this.state = 2054;
	                this.cardinality(localctx.art);
	            }

	            this.state = 2057;
	            this.match(languageParser.TO);
	            {
	                    let location = this.tokenLocation(localctx.assoc);
	                    localctx.art.type = { path: [{ id: 'cds.Association', location }], scope: 'global', location };
	                    this.handleComposition( localctx.art.cardinality, false );
	                  }
	            break;
	        case languageParser.COMPOSITION:
	            this.state = 2059;
	            localctx.compo = this.match(languageParser.COMPOSITION);
	            this.state = 2061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__10) {
	                this.state = 2060;
	                this.cardinality(localctx.art);
	            }

	            this.state = 2063;
	            this.match(languageParser.OF);
	            {
	                    let location = this.tokenLocation(localctx.compo);
	                    localctx.art.type = { path: [{ id: 'cds.Composition', location }], scope: 'global', location };
	                    this.handleComposition( localctx.art.cardinality, handleTypeCompo );
	                  }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	         localctx.art.target = {}; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssociationCont(art) {
	    let localctx = new TypeAssociationContContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 110, languageParser.RULE_typeAssociationCont);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2092;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.state = 2069;
	            this.match(languageParser.T__1);
	             localctx.art.foreignKeys = this.createDict(); 
	            this.state = 2080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                this.state = 2071;
	                this.foreignKey( localctx.art );
	                this.state = 2077;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 2072;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore("}")) break; 
	                    this.state = 2074;
	                    this.foreignKey( localctx.art );
	                    this.state = 2079;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 2082;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.foreignKeys ); 
	            this.state = 2085;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	                this.state = 2084;
	                this.defaultAndNullability( localctx.art );
	            }

	            break;
	        case languageParser.ON:
	            this.state = 2087;
	            this.match(languageParser.ON);
	            this.state = 2088;
	            localctx.cond = this.condition();
	             localctx.art.on=localctx.cond.expr; 
	            break;
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.DEFAULT:
	            this.state = 2091;
	            this.defaultAndNullability( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssociationElementCont(art) {
	    let localctx = new TypeAssociationElementContContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 112, languageParser.RULE_typeAssociationElementCont);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2117;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__1:
	        	this.state = 2094;
	        	this.match(languageParser.T__1);
	        	 localctx.art.foreignKeys = this.createDict(); 
	        	this.state = 2105;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===languageParser.T__25 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	        	    this.state = 2096;
	        	    this.foreignKey( localctx.art );
	        	    this.state = 2102;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===languageParser.T__2) {
	        	        this.state = 2097;
	        	        this.match(languageParser.T__2);
	        	         if (this.isStraightBefore("}")) break; 
	        	        this.state = 2099;
	        	        this.foreignKey( localctx.art );
	        	        this.state = 2104;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	}

	        	this.state = 2107;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.foreignKeys ); 
	        	this.state = 2110;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	        	    this.state = 2109;
	        	    this.defaultAndNullability( localctx.art );
	        	}

	        	break;
	        case languageParser.ON:
	        	this.state = 2112;
	        	this.match(languageParser.ON);
	        	this.state = 2113;
	        	localctx.cond = this.condition();
	        	 localctx.art.on=localctx.cond.expr; 
	        	break;
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.DEFAULT:
	        	this.state = 2116;
	        	this.defaultAndNullability( localctx.art );
	        	break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	        case languageParser.T__25:
	        	break;
	        default:
	        	break;
	        }
	         this.docComment( localctx.art ); 
	        this.state = 2123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 2120;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 2125;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2126;
	        this.requiredSemi();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeToOne(art) {
	    let localctx = new TypeToOneContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 114, languageParser.RULE_typeToOne);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2128;
	        localctx.one = this.match(languageParser.ONE);
	         this.setMaxCardinality( localctx.art, { literal: 'number', val: 1 }, localctx.one ); 
	        this.state = 2130;
	        this.simplePath( localctx.art.target, 'artref' );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeToMany(art) {
	    let localctx = new TypeToManyContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 116, languageParser.RULE_typeToMany);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2132;
	        localctx.many = this.match(languageParser.MANY);
	         this.setMaxCardinality( localctx.art, { literal: 'string', val: '*' }, localctx.many ); 
	        this.state = 2134;
	        this.simplePath( localctx.art.target, 'artref' );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinality(art) {
	    let localctx = new CardinalityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 118, languageParser.RULE_cardinality);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2136;
	        localctx.lbrack = this.match(languageParser.T__10);
	         localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	        this.state = 2158;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__11:
	        	this.state = 2138;
	        	this.match(languageParser.T__11);
	        	 localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	        	this.state = 2142;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===languageParser.T__2) {
	        	    this.state = 2140;
	        	    this.match(languageParser.T__2);
	        	    this.state = 2141;
	        	    this.targetCardinality( localctx.card );
	        	}

	        	break;
	        case languageParser.Number:
	        	this.state = 2144;
	        	this.match(languageParser.Number);
	        	 localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	        	this.state = 2156;
	        	this._errHandler.sync(this);
	        	switch (this._input.LA(1)) {
	        	case languageParser.T__2:
	        		this.state = 2146;
	        		this.match(languageParser.T__2);
	        		this.state = 2147;
	        		this.targetCardinality( localctx.card );
	        		break;
	        	case languageParser.T__12:
	        		this.state = 2148;
	        		this.match(languageParser.T__12);
	        		 localctx.card.targetMin = localctx.card.targetMax; 
	        		this.state = 2154;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case languageParser.T__11:
	        		    this.state = 2150;
	        		    this.match(languageParser.T__11);
	        		     localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	        		    break;
	        		case languageParser.Number:
	        		    this.state = 2152;
	        		    this.match(languageParser.Number);
	        		     localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	case languageParser.T__13:
	        		break;
	        	default:
	        		break;
	        	}
	        	break;
	        case languageParser.T__13:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2160;
	        this.match(languageParser.T__13);
	        this._ctx.stop = this._input.LT(-1);
	         localctx.art.cardinality = this.attachLocation(localctx.card); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	targetCardinality(card) {
	    let localctx = new TargetCardinalityContext(this, this._ctx, this.state, card);
	    this.enterRule(localctx, 120, languageParser.RULE_targetCardinality);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.card.sourceMax = localctx.card.targetMax; 
	        this.state = 2177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__11:
	            this.state = 2163;
	            this.match(languageParser.T__11);
	             localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	            break;
	        case languageParser.Number:
	            this.state = 2165;
	            this.match(languageParser.Number);
	             localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	            this.state = 2175;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__12) {
	                this.state = 2167;
	                this.match(languageParser.T__12);
	                 localctx.card.targetMin = localctx.card.targetMax; 
	                this.state = 2173;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__11:
	                    this.state = 2169;
	                    this.match(languageParser.T__11);
	                     localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	                    break;
	                case languageParser.Number:
	                    this.state = 2171;
	                    this.match(languageParser.Number);
	                     localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optInvisibleNullability(art) {
	    let localctx = new OptInvisibleNullabilityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 122, languageParser.RULE_optInvisibleNullability);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.setLocalTokenForId( 1, { 'NOT': 'HelperToken1', 'NULL': 'HelperToken2' } ); 
	        this.state = 2185;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.HelperToken1:
	        	this.state = 2180;
	        	localctx.n1 = this.match(languageParser.HelperToken1);
	        	this.state = 2181;
	        	localctx.n2 = this.match(languageParser.NULL);
	        	 this.setNullability( localctx.art, localctx.n1, localctx.n2 ); 
	        	break;
	        case languageParser.HelperToken2:
	        	this.state = 2183;
	        	localctx.n1 = this.match(languageParser.HelperToken2);
	        	 this.setNullability( localctx.art, localctx.n1, null ); 
	        	break;
	        case languageParser.T__0:
	        case languageParser.T__3:
	        case languageParser.T__7:
	        case languageParser.T__25:
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.DEFAULT:
	        case languageParser.ENUM:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullability(art) {
	    let localctx = new NullabilityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 124, languageParser.RULE_nullability);
	    try {
	        this.state = 2190;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.NOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2187;
	            localctx.n1 = this.match(languageParser.NOT);
	            this.state = 2188;
	            localctx.n2 = this.match(languageParser.NULL);
	            break;
	        case languageParser.NULL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2189;
	            localctx.n1 = this.match(languageParser.NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.setNullability( localctx.art, localctx.n1, localctx.n2 ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreignKey(outer) {
	    let localctx = new ForeignKeyContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 126, languageParser.RULE_foreignKey);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.docComment( localctx.art ); 
	        this.state = 2196;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 2193;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 2198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2199;
	        this.simplePath( localctx.elem, 'ref' );
	         localctx.art.targetElement = localctx.elem; 
	        this.state = 2203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.AS) {
	            this.state = 2201;
	            this.match(languageParser.AS);
	            this.state = 2202;
	            localctx.name = this.ident('Key');
	        }

	         if (!localctx.name) this.classifyImplicitName( 'KeyImplicit', localctx.art.targetElement ); 
	         this.addDef( localctx.art, localctx.outer, 'foreignKeys', 'key', (localctx.name) ? localctx.name.id : localctx.elem.path ); 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeTypeOf(art) {
	    let localctx = new TypeTypeOfContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 128, languageParser.RULE_typeTypeOf);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2208;
	        localctx.t = this.match(languageParser.TYPE);
	        this.state = 2209;
	        localctx.o = this.match(languageParser.OF);
	         localctx.art.type = { scope: 'typeOf' }; 
	        this.state = 2211;
	        this.simplePath( localctx.art.type, 'ref' );
	        this.state = 2215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__4) {
	            this.state = 2212;
	            this.match(languageParser.T__4);
	             localctx.art.type.scope = localctx.art.type.path.length; 
	            this.state = 2214;
	            this.simplePath( localctx.art.type, 'ref');
	        }

	         if (localctx.art.type.scope === 'typeOf')
	              // Better error locations and much simpler code if we consider it as a path breakout:
	              localctx.art.type.path.unshift( { id: 'type of', location: this.tokenLocation( localctx.t, localctx.o )} );
	            
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art.type); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeRefOptArgs(art) {
	    let localctx = new TypeRefOptArgsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 130, languageParser.RULE_typeRefOptArgs);
	     localctx.art.type = {}; 
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2219;
	        this.simplePath( localctx.art.type, 'artref' );
	        this.state = 2224;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__5:
	        	this.state = 2220;
	        	this.typeRefArgs( localctx.art );
	        	break;
	        case languageParser.T__4:
	        	this.state = 2221;
	        	this.match(languageParser.T__4);
	        	 localctx.art.type.scope = localctx.art.type.path.length; 
	        	this.state = 2223;
	        	this.simplePath( localctx.art.type, 'ref');
	        	break;
	        case languageParser.T__0:
	        case languageParser.T__2:
	        case languageParser.T__3:
	        case languageParser.T__6:
	        case languageParser.T__7:
	        case languageParser.T__25:
	        case languageParser.AS:
	        case languageParser.FROM:
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.DEFAULT:
	        case languageParser.ENUM:
	        case languageParser.HelperToken1:
	        case languageParser.HelperToken2:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeRefArgs(art) {
	    let localctx = new TypeRefArgsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 132, languageParser.RULE_typeRefArgs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2226;
	        localctx.paren = this.match(languageParser.T__5);
	         localctx.art['$'+'typeArgs'] = this.createArray(); 
	        this.state = 2254;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.Number:
	            this.state = 2228;
	            localctx.head = this.match(languageParser.Number);
	             localctx.art['$'+'typeArgs'].push( this.unsignedIntegerLiteral() ); 
	            this.state = 2242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 2230;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 2238;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.VARIABLE:
	                    this.state = 2232;
	                    localctx.v = this.match(languageParser.VARIABLE);
	                     localctx.art['$'+'typeArgs'].push(
	                                { literal: 'string', val: 'variable', location: this.tokenLocation(localctx.v) } );
	                              
	                    break;
	                case languageParser.FLOATING:
	                    this.state = 2234;
	                    localctx.f = this.match(languageParser.FLOATING);
	                     localctx.art['$'+'typeArgs'].push(
	                                { literal: 'string', val: 'floating', location: this.tokenLocation(localctx.f) } );
	                              
	                    break;
	                case languageParser.Number:
	                    this.state = 2236;
	                    localctx.tail = this.match(languageParser.Number);
	                     localctx.art['$'+'typeArgs'].push( this.unsignedIntegerLiteral() ); 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2244;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.state = 2245;
	            this.typeNamedArg( localctx.art );
	            this.state = 2251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 2246;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 2248;
	                this.typeNamedArg( localctx.art );
	                this.state = 2253;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2256;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.art['$'+'typeArgs']); 
	        this._ctx.stop = this._input.LT(-1);
	         this.checkTypeArgs(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNamedArgList(art) {
	    let localctx = new TypeNamedArgListContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 134, languageParser.RULE_typeNamedArgList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2259;
	        localctx.paren = this.match(languageParser.T__5);
	        this.state = 2260;
	        this.typeNamedArg( localctx.art );
	        this.state = 2266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 2261;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore(')')) break; 
	            this.state = 2263;
	            this.typeNamedArg( localctx.art );
	            this.state = 2268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2269;
	        this.match(languageParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNamedArg(art) {
	    let localctx = new TypeNamedArgContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 136, languageParser.RULE_typeNamedArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2271;
	        localctx.name = this.ident('typeparamname');
	        this.state = 2272;
	        this.match(languageParser.T__4);
	         if (localctx.name.id && this.checkTypeFacet( localctx.art, localctx.name.id ))
	                localctx.arg =  localctx.name.id.id
	            
	        this.state = 2280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.Number:
	            this.state = 2274;
	            this.match(languageParser.Number);
	             if (localctx.arg && localctx.art && localctx.name.id) {
	                      localctx.art[localctx.arg] = this.unsignedIntegerLiteral();
	                    }
	                  
	            break;
	        case languageParser.VARIABLE:
	            this.state = 2276;
	            localctx.v = this.match(languageParser.VARIABLE);
	             if (localctx.arg && localctx.art && localctx.name.id) {
	                      localctx.art[localctx.arg] = { literal: 'string', val: 'variable', location: this.tokenLocation(localctx.v) };
	                    }
	                  
	            break;
	        case languageParser.FLOATING:
	            this.state = 2278;
	            localctx.f = this.match(languageParser.FLOATING);
	             if (localctx.arg && localctx.art && localctx.name.id) {
	                      localctx.art[localctx.arg] = { literal: 'string', val: 'floating', location: this.tokenLocation(localctx.f) };
	                    }
	                  
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryEOF() {
	    let localctx = new QueryEOFContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, languageParser.RULE_queryEOF);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2282;
	        localctx.q = this.queryExpression();
	         localctx.query =  localctx.q.query 
	        this.state = 2285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__0) {
	            this.state = 2284;
	            this.match(languageParser.T__0);
	        }

	        this.state = 2287;
	        this.match(languageParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionSpec() {
	    let localctx = new ProjectionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, languageParser.RULE_projectionSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2289;
	        localctx.proj = this.match(languageParser.PROJECTION);
	        this.state = 2290;
	        this.match(languageParser.ON);

	              localctx.src =  { path: [] }
	              localctx.query =  { op: this.valueWithTokenLocation( 'SELECT', localctx.proj ), from: localctx.src, location: this.startLocation() }
	            
	        this.state = 2292;
	        this.fromPath( localctx.src, 'artref');
	        this.state = 2296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__4) {
	            this.state = 2293;
	            this.match(languageParser.T__4);
	             localctx.src.scope = localctx.src.path.length; 
	            this.state = 2295;
	            this.fromPath( localctx.src, 'ref');
	        }

	        this.state = 2302;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.AS) {
	            this.state = 2298;
	            this.match(languageParser.AS);
	            this.state = 2299;
	            localctx.aliasName = this.ident('FromAlias');
	             localctx.src.name = localctx.aliasName.id 
	        }

	         if (!localctx.src.name) this.classifyImplicitName( localctx.src.scope ? 'FromElemImplicit' : 'FromImplicit', localctx.src ); 
	        this.state = 2306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__1) {
	            this.state = 2305;
	            this.bracedSelectItemListDef( localctx.query, 'columns' );
	        }

	        this.state = 2309;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.EXCLUDING) {
	            this.state = 2308;
	            this.excludingClause( localctx.query );
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionClauses(query) {
	    let localctx = new ProjectionClausesContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 142, languageParser.RULE_projectionClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.WHERE) {
	            this.state = 2311;
	            this.match(languageParser.WHERE);
	            this.state = 2312;
	            localctx.cond = this.condition();
	             localctx.query.where = localctx.cond.expr; 
	        }

	        this.state = 2330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.GROUP) {
	            this.state = 2317;
	            this.match(languageParser.GROUP);
	            this.state = 2318;
	            this.match(languageParser.BY);
	            this.state = 2319;
	            localctx.e1 = this.expression();
	             localctx.query.groupBy = [ localctx.e1.expr ]; 
	            this.state = 2327;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 2321;
	                this.match(languageParser.T__2);
	                this.state = 2322;
	                localctx.en = this.expression();
	                 localctx.query.groupBy.push( localctx.en.expr ); 
	                this.state = 2329;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.HAVING) {
	            this.state = 2332;
	            this.match(languageParser.HAVING);
	            this.state = 2333;
	            localctx.having = this.condition();
	             localctx.query.having = localctx.having.expr; 
	        }

	        this.state = 2341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.ORDER) {
	            this.state = 2338;
	            localctx.ob = this.orderByClause( localctx.query );
	             localctx.query =  localctx.ob.query 
	        }

	        this.state = 2346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.LIMIT) {
	            this.state = 2343;
	            localctx.lc = this.limitClause( localctx.query );
	             localctx.query =  localctx.lc.query 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, languageParser.RULE_queryExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2348;
	        localctx.qt1 = this.queryPrimary();
	         localctx.query =  localctx.qt1.query 
	        this.state = 2353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXCEPT - 88)) | (1 << (languageParser.INTERSECT - 88)) | (1 << (languageParser.LIMIT - 88)) | (1 << (languageParser.MINUS - 88)) | (1 << (languageParser.ORDER - 88)))) !== 0) || _la===languageParser.UNION) {
	            this.state = 2350;
	            localctx.qec = this.queryExpressionCont( localctx.query );
	             if (localctx.qec.query) localctx.query =  localctx.qec.query 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionCont(inQuery) {
	    let localctx = new QueryExpressionContContext(this, this._ctx, this.state, inQuery);
	    this.enterRule(localctx, 146, languageParser.RULE_queryExpressionCont);
	     if (!localctx.inQuery) return localctx; 
	    var _la = 0; // Token type
	    try {
	        this.state = 2400;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.EXCEPT:
	        case languageParser.INTERSECT:
	        case languageParser.MINUS:
	        case languageParser.UNION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2376; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2371;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.UNION:
	                    this.state = 2355;
	                    localctx.op = this.match(languageParser.UNION);
	                    this.state = 2357;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
	                        this.state = 2356;
	                        localctx.quant = this._input.LT(1);
	                        _la = this._input.LA(1);
	                        if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
	                            localctx.quant = this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        }
	                    }

	                    break;
	                case languageParser.EXCEPT:
	                    this.state = 2359;
	                    localctx.op = this.match(languageParser.EXCEPT);
	                    this.state = 2361;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.DISTINCT) {
	                        this.state = 2360;
	                        localctx.quant = this.match(languageParser.DISTINCT);
	                    }

	                    break;
	                case languageParser.MINUS:
	                    this.state = 2363;
	                    localctx.op = this.match(languageParser.MINUS);
	                    this.state = 2365;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.DISTINCT) {
	                        this.state = 2364;
	                        localctx.quant = this.match(languageParser.DISTINCT);
	                    }

	                    break;
	                case languageParser.INTERSECT:
	                    this.state = 2367;
	                    localctx.op = this.match(languageParser.INTERSECT);
	                    this.state = 2369;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.DISTINCT) {
	                        this.state = 2368;
	                        localctx.quant = this.match(languageParser.DISTINCT);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2373;
	                localctx.qp = this.queryPrimary();
	                 localctx.query =  this.leftAssocBinaryOp( localctx.query, localctx.qp.query, localctx.op, localctx.quant, 'quantifier' )
	                        localctx.quant = null; 
	                this.state = 2378; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXCEPT - 88)) | (1 << (languageParser.INTERSECT - 88)) | (1 << (languageParser.MINUS - 88)))) !== 0) || _la===languageParser.UNION);
	            this.state = 2383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ORDER) {
	                this.state = 2380;
	                localctx.ob = this.orderByClause( localctx.query );
	                 localctx.query =  localctx.ob.query 
	            }

	            this.state = 2388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.LIMIT) {
	                this.state = 2385;
	                localctx.lc = this.limitClause( localctx.query );
	                 localctx.query =  localctx.lc.query 
	            }

	            break;
	        case languageParser.ORDER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2390;
	            localctx.ob = this.orderByClause( localctx.query );
	             localctx.query =  localctx.ob.query 
	            this.state = 2395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.LIMIT) {
	                this.state = 2392;
	                localctx.lc = this.limitClause( localctx.query );
	                 localctx.query =  localctx.lc.query 
	            }

	            break;
	        case languageParser.LIMIT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2397;
	            localctx.lc = this.limitClause( localctx.query );
	             localctx.query =  localctx.lc.query 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryPrimary() {
	    let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, languageParser.RULE_queryPrimary);
	    try {
	        this.state = 2410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2402;
	            localctx.open = this.match(languageParser.T__5);
	            this.state = 2403;
	            localctx.qe = this.queryExpression();
	            this.state = 2404;
	            localctx.close = this.match(languageParser.T__6);
	             localctx.query =  this.surroundByParens( localctx.qe.query, localctx.open, localctx.close ) 
	            break;
	        case languageParser.SELECT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2407;
	            localctx.qpnp = this.selectQuery();
	             localctx.query =  localctx.qpnp.query 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuery() {
	    let localctx = new SelectQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, languageParser.RULE_selectQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2412;
	        localctx.select = this.match(languageParser.SELECT);
	         localctx.query =  { op: this.valueWithTokenLocation( 'SELECT', localctx.select ), location: this.startLocation() } 
	        this.state = 2457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.FROM:
	            this.state = 2414;
	            this.match(languageParser.FROM);
	            this.state = 2415;
	            this.querySource( localctx.query );
	            this.state = 2428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.MIXIN) {
	                this.state = 2416;
	                localctx.mixin = this.match(languageParser.MIXIN);
	                this.state = 2417;
	                this.match(languageParser.T__1);
	                 localctx.query.mixin = this.createDict(); 
	                this.state = 2422;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
	                    this.state = 2419;
	                    this.mixinElementDef( localctx.query );
	                    this.state = 2424;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2425;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.query.mixin ); 
	                this.state = 2427;
	                this.match(languageParser.INTO);
	            }

	            this.state = 2432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
	                this.state = 2430;
	                localctx.ad = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
	                    localctx.ad = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 localctx.query.quantifier = this.valueWithTokenLocation( (localctx.ad===null ? null : localctx.ad.text).toLowerCase(), localctx.ad ); 
	            }

	            this.state = 2435;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__1) {
	                this.state = 2434;
	                this.bracedSelectItemListDef( localctx.query, 'columns' );
	            }

	            this.state = 2438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.EXCLUDING) {
	                this.state = 2437;
	                this.excludingClause( localctx.query );
	            }

	            break;
	        case languageParser.T__1:
	        case languageParser.T__4:
	        case languageParser.T__5:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__11:
	        case languageParser.T__15:
	        case languageParser.T__25:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.ALL:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.DISTINCT:
	        case languageParser.KEY:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	        case languageParser.VIRTUAL:
	            this.state = 2442;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
	                this.state = 2440;
	                localctx.ad = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
	                    localctx.ad = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 localctx.query.quantifier = this.valueWithTokenLocation( (localctx.ad===null ? null : localctx.ad.text).toLowerCase(), localctx.ad ); 
	            }

	             localctx.query.columns = []; 
	            this.state = 2445;
	            this.selectItemDef( localctx.query.columns );
	            this.state = 2451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 2446;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 2448;
	                this.selectItemDef( localctx.query.columns );
	                this.state = 2453;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2454;
	            this.match(languageParser.FROM);
	            this.state = 2455;
	            this.querySource( localctx.query );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.WHERE) {
	            this.state = 2459;
	            this.match(languageParser.WHERE);
	            this.state = 2460;
	            localctx.cond = this.condition();
	             localctx.query.where = localctx.cond.expr; 
	        }

	        this.state = 2478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.GROUP) {
	            this.state = 2465;
	            this.match(languageParser.GROUP);
	            this.state = 2466;
	            this.match(languageParser.BY);
	            this.state = 2467;
	            localctx.e1 = this.expression();
	             localctx.query.groupBy = [ localctx.e1.expr ]; 
	            this.state = 2475;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 2469;
	                this.match(languageParser.T__2);
	                this.state = 2470;
	                localctx.en = this.expression();
	                 localctx.query.groupBy.push( localctx.en.expr ); 
	                this.state = 2477;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.HAVING) {
	            this.state = 2480;
	            this.match(languageParser.HAVING);
	            this.state = 2481;
	            localctx.having = this.condition();
	             localctx.query.having = localctx.having.expr; 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySource(query) {
	    let localctx = new QuerySourceContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 152, languageParser.RULE_querySource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2486;
	        localctx.t1 = this.tableExpression();
	         localctx.query.from = localctx.t1.table; 
	        this.state = 2497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__2) {
	             const location = this.tokenLocation( this.getCurrentToken() );
	                    localctx.query.from = { op: { val: 'join', location },
	                                    join: { val: 'cross', location },
	                                    args: [localctx.t1.table] }; 
	            this.state = 2493; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2489;
	                this.match(languageParser.T__2);
	                this.state = 2490;
	                localctx.tn = this.tableExpression();
	                 this.pushItem(localctx.query.from.args, localctx.tn.table ); 
	                this.state = 2495; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===languageParser.T__2);
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query.from); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableExpression() {
	    let localctx = new TableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, languageParser.RULE_tableExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2499;
	        localctx.qt = this.tableTerm();
	         localctx.table =  localctx.qt.table 
	        this.state = 2504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (languageParser.CROSS - 74)) | (1 << (languageParser.FULL - 74)) | (1 << (languageParser.INNER - 74)) | (1 << (languageParser.JOIN - 74)) | (1 << (languageParser.LEFT - 74)))) !== 0) || _la===languageParser.RIGHT) {
	            this.state = 2501;
	            localctx.tec = this.tableExpressionCont( localctx.table );
	             if ( localctx.tec.table ) localctx.table =  localctx.tec.table 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.table); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableExpressionCont(inTable) {
	    let localctx = new TableExpressionContContext(this, this._ctx, this.state, inTable);
	    this.enterRule(localctx, 156, languageParser.RULE_tableExpressionCont);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2519; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2519;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.FULL:
	            case languageParser.INNER:
	            case languageParser.JOIN:
	            case languageParser.LEFT:
	            case languageParser.RIGHT:
	                this.state = 2506;
	                localctx.join = this.joinOp( localctx.table );
	                 localctx.table =  localctx.join.table 
	                this.state = 2508;
	                localctx.te = this.tableExpression();
	                 localctx.table ??= {}; this.pushItem(localctx.table.args, localctx.te.table ); 
	                this.state = 2510;
	                this.match(languageParser.ON);
	                this.state = 2511;
	                localctx.cond = this.condition();
	                 localctx.table.on = localctx.cond.expr; 
	                break;
	            case languageParser.CROSS:
	                this.state = 2514;
	                localctx.crj = this.match(languageParser.CROSS);
	                this.state = 2515;
	                localctx.jn = this.match(languageParser.JOIN);
	                this.state = 2516;
	                localctx.t = this.tableTerm();
	                 if (!localctx.table) { localctx.table =  {} } localctx.table =  this.leftAssocBinaryOp( localctx.table, localctx.t.table, localctx.jn, localctx.crj, 'join' ) 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2521; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (languageParser.CROSS - 74)) | (1 << (languageParser.FULL - 74)) | (1 << (languageParser.INNER - 74)) | (1 << (languageParser.JOIN - 74)) | (1 << (languageParser.LEFT - 74)))) !== 0) || _la===languageParser.RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableTerm() {
	    let localctx = new TableTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, languageParser.RULE_tableTerm);
	    try {
	        this.state = 2529;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2523;
	            localctx.ttnp = this.fromRefWithOptAlias();
	             localctx.table =  localctx.ttnp.table 
	            break;
	        case languageParser.T__5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2526;
	            localctx.ttp = this.tableOrQueryParenthesis();
	             localctx.table =  localctx.ttp.table 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.table); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromRefWithOptAlias() {
	    let localctx = new FromRefWithOptAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, languageParser.RULE_fromRefWithOptAlias);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.table =  { path: [] } 
	        this.state = 2532;
	        localctx.f = this.fromPath( localctx.table, 'artref');
	         if (localctx.f.dotAfterFilter)
	                this.warning( 'syntax-invalid-path-separator', localctx.f.dotAfterFilter,
	                              { '#': 'dot', code: '.', newcode: ':' } );
	            
	        this.state = 2537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__4) {
	             if (!localctx.table.scope)
	                      localctx.table.scope = localctx.table.path.length;
	                    else
	                      this.warning( 'syntax-invalid-path-separator', this.getCurrentToken(),
	                                  { '#': 'colon', code: ':', newcode: '.' } );
	                  
	            this.state = 2535;
	            this.match(languageParser.T__4);
	            this.state = 2536;
	            this.fromPath( localctx.table, 'ref');
	        }

	        this.state = 2546;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.AS:
	        	this.state = 2539;
	        	this.match(languageParser.AS);
	        	this.state = 2540;
	        	localctx.n1 = this.ident('FromAlias');
	        	 localctx.table.name = localctx.n1.id; 
	        	break;
	        case languageParser.Identifier:
	        	this.state = 2543;
	        	localctx.n2 = this.identNoKeyword('FromAlias');
	        	 localctx.table.name = this.fragileAlias( localctx.n2.id ); 
	        	break;
	        case languageParser.EOF:
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__2:
	        case languageParser.T__3:
	        case languageParser.T__6:
	        case languageParser.ALL:
	        case languageParser.DISTINCT:
	        case languageParser.ON:
	        case languageParser.WHERE:
	        case languageParser.ACTIONS:
	        case languageParser.CROSS:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.FULL:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.JOIN:
	        case languageParser.LEFT:
	        case languageParser.LIMIT:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.ORDER:
	        case languageParser.RIGHT:
	        case languageParser.UNION:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	         if (!localctx.table.name) this.classifyImplicitName( localctx.table.scope ? 'FromElemImplicit' : 'FromImplicit', localctx.table ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrQueryParenthesis() {
	    let localctx = new TableOrQueryParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, languageParser.RULE_tableOrQueryParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2550;
	        localctx.open = this.match(languageParser.T__5);
	        this.state = 2572;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__5:
	            this.state = 2551;
	            localctx.ttp = this.tableOrQueryParenthesis();
	             localctx.table =  localctx.ttp.table;  localctx.kind =  localctx.ttp.kind; 
	            this.state = 2556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (languageParser.CROSS - 74)) | (1 << (languageParser.EXCEPT - 74)) | (1 << (languageParser.FULL - 74)) | (1 << (languageParser.INNER - 74)) | (1 << (languageParser.INTERSECT - 74)) | (1 << (languageParser.JOIN - 74)) | (1 << (languageParser.LEFT - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (languageParser.LIMIT - 106)) | (1 << (languageParser.MINUS - 106)) | (1 << (languageParser.ORDER - 106)) | (1 << (languageParser.RIGHT - 106)) | (1 << (languageParser.UNION - 106)))) !== 0)) {
	                this.state = 2553;
	                localctx.qtec = this.tableOrQueryExpressionCont( localctx.table, localctx.kind );
	                 localctx.table =  localctx.qtec.table;  localctx.kind =  localctx.qtec.kind; 
	            }

	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.state = 2558;
	            localctx.ttnp = this.fromRefWithOptAlias();
	             localctx.table =  localctx.ttnp.table; localctx.kind =  'table-expr' 
	            this.state = 2563;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (languageParser.CROSS - 74)) | (1 << (languageParser.FULL - 74)) | (1 << (languageParser.INNER - 74)) | (1 << (languageParser.JOIN - 74)) | (1 << (languageParser.LEFT - 74)))) !== 0) || _la===languageParser.RIGHT) {
	                this.state = 2560;
	                localctx.tec = this.tableExpressionCont( localctx.table );
	                 if (localctx.tec.table) { localctx.table =  localctx.tec.table } 
	            }

	            break;
	        case languageParser.SELECT:
	            this.state = 2565;
	            localctx.qpnp = this.selectQuery();
	             localctx.table =  localctx.qpnp.query; localctx.kind =  'query-expr' 
	            this.state = 2570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXCEPT - 88)) | (1 << (languageParser.INTERSECT - 88)) | (1 << (languageParser.LIMIT - 88)) | (1 << (languageParser.MINUS - 88)) | (1 << (languageParser.ORDER - 88)))) !== 0) || _la===languageParser.UNION) {
	                this.state = 2567;
	                localctx.qec = this.queryExpressionCont( localctx.table );
	                 if (localctx.qec.query) { localctx.table =  localctx.qec.query } 
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2574;
	        localctx.close = this.match(languageParser.T__6);
	         const asQuery = localctx.kind === 'query-expr';
	              localctx.table =  this.surroundByParens( localctx.table.query || localctx.table, localctx.open, localctx.close, asQuery )
	              // alias only for sub-queries; avoids `AS` in code completion
	              if (!asQuery) { return localctx; }
	            
	        this.state = 2585;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.AS:
	        	this.state = 2576;
	        	this.match(languageParser.AS);
	        	this.state = 2577;
	        	localctx.a1 = this.ident('FromAlias');
	        	 localctx.table.name = localctx.a1.id 
	        	 localctx.kind =  'table-expr' 
	        	break;
	        case languageParser.Identifier:
	        	this.state = 2581;
	        	localctx.a2 = this.identNoKeyword('FromAlias');
	        	 localctx.table.name = this.fragileAlias( localctx.a2.id, true ); 
	        	 localctx.kind =  'table-expr' 
	        	break;
	        case languageParser.EOF:
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__2:
	        case languageParser.T__3:
	        case languageParser.T__6:
	        case languageParser.ALL:
	        case languageParser.DISTINCT:
	        case languageParser.ON:
	        case languageParser.WHERE:
	        case languageParser.ACTIONS:
	        case languageParser.CROSS:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.FULL:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.JOIN:
	        case languageParser.LEFT:
	        case languageParser.LIMIT:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.ORDER:
	        case languageParser.RIGHT:
	        case languageParser.UNION:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrQueryExpressionCont(inTable, inKind) {
	    let localctx = new TableOrQueryExpressionContContext(this, this._ctx, this.state, inTable, inKind);
	    this.enterRule(localctx, 164, languageParser.RULE_tableOrQueryExpressionCont);
	    try {
	        this.state = 2594;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.EXCEPT:
	        case languageParser.INTERSECT:
	        case languageParser.LIMIT:
	        case languageParser.MINUS:
	        case languageParser.ORDER:
	        case languageParser.UNION:
	            this.enterOuterAlt(localctx, 1);
	             if (localctx.inKind !== 'query-expr') { return localctx; }
	                  localctx.table =  localctx.table.query || localctx.table 
	            this.state = 2588;
	            localctx.qec = this.queryExpressionCont( localctx.table );
	             localctx.table =  localctx.qec.query; localctx.kind =  'query-expr'; 
	            break;
	        case languageParser.CROSS:
	        case languageParser.FULL:
	        case languageParser.INNER:
	        case languageParser.JOIN:
	        case languageParser.LEFT:
	        case languageParser.RIGHT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2591;
	            localctx.tec = this.tableExpressionCont( localctx.table );
	             localctx.table =  localctx.tec.table; localctx.kind =  'table-expr'; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromPath(qp, idkind) {
	    let localctx = new FromPathContext(this, this._ctx, this.state, qp, idkind);
	    this.enterRule(localctx, 166, languageParser.RULE_fromPath);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2596;
	        localctx.id = this.ident(localctx.idkind);
	         this.pushIdent( localctx.qp.path, localctx.id.id ); 
	        this.state = 2607;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__5:
	        	this.state = 2598;
	        	this.fromArguments( localctx.id.id );
	        	this.state = 2600;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===languageParser.T__10) {
	        	    this.state = 2599;
	        	    this.cardinalityAndFilter( localctx.id.id );
	        	}

	        	 localctx.dotAfterFilter =  false 
	        	break;
	        case languageParser.T__10:
	        	this.state = 2604;
	        	this.cardinalityAndFilter( localctx.id.id );
	        	 localctx.dotAfterFilter =  false 
	        	break;
	        case languageParser.EOF:
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__2:
	        case languageParser.T__3:
	        case languageParser.T__4:
	        case languageParser.T__6:
	        case languageParser.T__14:
	        case languageParser.T__25:
	        case languageParser.ALL:
	        case languageParser.AS:
	        case languageParser.DISTINCT:
	        case languageParser.ON:
	        case languageParser.WHERE:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ASPECT:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.DEFINE:
	        case languageParser.ENTITY:
	        case languageParser.EVENT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.JOIN:
	        case languageParser.LEFT:
	        case languageParser.LIMIT:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.ORDER:
	        case languageParser.RIGHT:
	        case languageParser.SERVICE:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.USING:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	        case languageParser.HideAlternatives:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__14) {
	             if (localctx.dotAfterFilter === false) {
	                    localctx.dotAfterFilter =  this.getCurrentToken()
	                    if (!localctx.qp.scope) localctx.qp.scope = localctx.qp.path.length;
	                  } 
	            this.state = 2610;
	            this.match(languageParser.T__14);
	            this.state = 2611;
	            localctx.id = this.ident(localctx.idkind);
	             this.pushIdent( localctx.qp.path, localctx.id.id ); 
	            this.state = 2622;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case languageParser.T__5:
	            	this.state = 2613;
	            	this.fromArguments( localctx.id.id );
	            	this.state = 2615;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===languageParser.T__10) {
	            	    this.state = 2614;
	            	    this.cardinalityAndFilter( localctx.id.id );
	            	}

	            	 if (!localctx.dotAfterFilter) localctx.dotAfterFilter =  false 
	            	break;
	            case languageParser.T__10:
	            	this.state = 2619;
	            	this.cardinalityAndFilter( localctx.id.id );
	            	 if (!localctx.dotAfterFilter) localctx.dotAfterFilter =  false 
	            	break;
	            case languageParser.EOF:
	            case languageParser.T__0:
	            case languageParser.T__1:
	            case languageParser.T__2:
	            case languageParser.T__3:
	            case languageParser.T__4:
	            case languageParser.T__6:
	            case languageParser.T__14:
	            case languageParser.T__25:
	            case languageParser.ALL:
	            case languageParser.AS:
	            case languageParser.DISTINCT:
	            case languageParser.ON:
	            case languageParser.WHERE:
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ASPECT:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.DEFINE:
	            case languageParser.ENTITY:
	            case languageParser.EVENT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.JOIN:
	            case languageParser.LEFT:
	            case languageParser.LIMIT:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.ORDER:
	            case languageParser.RIGHT:
	            case languageParser.SERVICE:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.USING:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	            case languageParser.HideAlternatives:
	            case languageParser.SemicolonTopLevel:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 2628;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.qp); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromArguments(pathStep) {
	    let localctx = new FromArgumentsContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 168, languageParser.RULE_fromArguments);
	     if (!localctx.pathStep) localctx.pathStep =  {} 
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2629;
	        this.match(languageParser.T__5);
	         localctx.pathStep.args = this.createDict(); localctx.pathStep['$'+'syntax'] = ':'; 
	        this.state = 2631;
	        localctx.name = this.ident('paramname');
	        this.state = 2632;
	        this.match(languageParser.T__4);
	        this.state = 2633;
	        this.namedExpression( localctx.pathStep, localctx.name.id );
	        this.state = 2642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 2634;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore(')')) break; 
	            this.state = 2636;
	            localctx.name = this.ident('paramname');
	            this.state = 2637;
	            this.match(languageParser.T__4);
	            this.state = 2638;
	            this.namedExpression( localctx.pathStep, localctx.name.id );
	            this.state = 2644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2645;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.pathStep.args ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	excludingClause(query) {
	    let localctx = new ExcludingClauseContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 170, languageParser.RULE_excludingClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2648;
	        this.match(languageParser.EXCLUDING);
	        this.state = 2649;
	        this.match(languageParser.T__1);
	         localctx.query.excludingDict = this.createDict(); 
	        this.state = 2651;
	        this.projectionExclusion( localctx.query );
	        this.state = 2657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 2652;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore("}")) break; 
	            this.state = 2654;
	            this.projectionExclusion( localctx.query );
	            this.state = 2659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2660;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.query.excludingDict ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionExclusion(outer) {
	    let localctx = new ProjectionExclusionContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 172, languageParser.RULE_projectionExclusion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2663;
	        localctx.name = this.ident('ref');
	         this.addDef( localctx.art, localctx.outer, 'excludingDict', '', localctx.name.id ); 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinElementDef(outer) {
	    let localctx = new MixinElementDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 174, languageParser.RULE_mixinElementDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        localctx.name = this.ident('Mixin');
	        this.state = 2667;
	        this.match(languageParser.T__4);
	        this.state = 2668;
	        this.typeAssociationBase( localctx.art, false );
	         if (localctx.art.type) this.addDef( localctx.art, localctx.outer, 'mixin', 'mixin', localctx.name.id ); 
	        this.state = 2673;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2670;
	            this.typeToMany( localctx.art );
	            break;

	        case 2:
	            this.state = 2671;
	            this.typeToOne( localctx.art );
	            break;

	        case 3:
	            this.state = 2672;
	            this.simplePath( localctx.art.target, 'artref' );
	            break;

	        }
	        this.state = 2676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__1 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.ON - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
	            this.state = 2675;
	            this.typeAssociationCont( localctx.art );
	        }

	        this.state = 2678;
	        this.requiredSemi();
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemDef(outer) {
	    let localctx = new SelectItemDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 176, languageParser.RULE_selectItemDef);
	    var _la = 0; // Token type
	    try {
	        this.state = 2699;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2680;
	            localctx.star = this.match(languageParser.T__11);
	             localctx.outer.push( this.valueWithTokenLocation( '*', localctx.star ) ); 
	            break;
	        case languageParser.T__1:
	        case languageParser.T__4:
	        case languageParser.T__5:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__25:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.KEY:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	        case languageParser.VIRTUAL:
	            this.enterOuterAlt(localctx, 2);
	             localctx.art =  new this.XsnArtifact(); this.docComment( localctx.art ); 
	            this.state = 2686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 2683;
	                this.annotationAssignment_atn( localctx.art );
	                this.state = 2688;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	             this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^([,.:\[@]|as)$/i ) ; 
	            this.state = 2692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.VIRTUAL) {
	                this.state = 2690;
	                localctx.virtual = this.match(languageParser.VIRTUAL);
	                 localctx.art.virtual = this.valueWithTokenLocation( true, localctx.virtual ); 
	            }

	            this.state = 2696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.KEY) {
	                this.state = 2694;
	                localctx.key = this.match(languageParser.KEY);
	                 localctx.art.key = this.valueWithTokenLocation( true, localctx.key ); 
	            }

	            this.state = 2698;
	            this.selectItemDefBody( localctx.art, localctx.outer );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.art) this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemDefBody(art, outer) {
	    let localctx = new SelectItemDefBodyContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 178, languageParser.RULE_selectItemDefBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.outer.push( localctx.art ); 
	        this.state = 2742;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__4:
	        case languageParser.T__5:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.state = 2702;
	            localctx.e = this.expression();
	             localctx.art.value = localctx.e.expr; 
	            this.state = 2712;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.AS:
	                this.state = 2704;
	                localctx.as = this.match(languageParser.AS);
	                this.state = 2705;
	                localctx.n1 = this.ident('ItemAlias');
	                 localctx.art.name = localctx.n1.id; 
	                break;
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	                this.state = 2708;
	                localctx.n2 = this.ident('ItemAlias');
	                 localctx.art.name = this.fragileAlias( localctx.n2.id, true ); 
	                break;
	            case languageParser.T__1:
	            case languageParser.T__2:
	            case languageParser.T__3:
	            case languageParser.T__4:
	            case languageParser.T__25:
	            case languageParser.FROM:
	            case languageParser.DOTbeforeBRACE:
	                 localctx.alias =  this.classifyImplicitName( 'ItemImplicit', localctx.e.expr ) 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	             if (localctx.art.value && !localctx.art.value.path) this.excludeExpected( ["'.'", "'{'"] );
	                    else if (localctx.art.name) this.excludeExpected( ["'.'"] );
	                  
	            this.state = 2732;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case languageParser.T__1:
	            	 this.reportExpandInline( localctx.art, false ); 
	            	this.state = 2716;
	            	this.selectItemInlineList( localctx.art, 'expand' );
	            	this.state = 2718;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===languageParser.EXCLUDING) {
	            	    this.state = 2717;
	            	    this.excludingClause( localctx.art );
	            	}

	            	break;
	            case languageParser.DOTbeforeBRACE:
	            	 if (localctx.alias) localctx.alias.token.isIdentifier = localctx.alias.previous; 
	            	 this.reportExpandInline( localctx.art, localctx.as || this._input.LT(-1) ); 
	            	this.state = 2722;
	            	localctx.dot = this.match(languageParser.DOTbeforeBRACE);
	            	 this.reportUnexpectedSpace( localctx.dot, undefined, true ); 
	            	this.state = 2730;
	            	this._errHandler.sync(this);
	            	switch(this._input.LA(1)) {
	            	case languageParser.T__1:
	            	    this.state = 2724;
	            	    this.selectItemInlineList( localctx.art, 'inline' );
	            	    this.state = 2726;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	    if(_la===languageParser.EXCLUDING) {
	            	        this.state = 2725;
	            	        this.excludingClause( localctx.art );
	            	    }

	            	    break;
	            	case languageParser.T__11:
	            	    this.state = 2728;
	            	    localctx.star = this.match(languageParser.T__11);
	            	     localctx.art.inline = [ this.valueWithTokenLocation( '*', localctx.star ) ]; 
	            	    break;
	            	default:
	            	    throw new antlr4.error.NoViableAltException(this);
	            	}
	            	break;
	            case languageParser.T__2:
	            case languageParser.T__3:
	            case languageParser.T__4:
	            case languageParser.T__25:
	            case languageParser.FROM:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case languageParser.T__1:
	            this.state = 2734;
	            this.selectItemInlineList( localctx.art, 'expand' );
	            this.state = 2736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.EXCLUDING) {
	                this.state = 2735;
	                this.excludingClause( localctx.art );
	            }

	            this.state = 2738;
	            this.match(languageParser.AS);
	            this.state = 2739;
	            localctx.n1 = this.ident('ItemAlias');
	             localctx.art.name = localctx.n1.id; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	         this.docComment( localctx.art ); 
	        this.state = 2748;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__25) {
	            this.state = 2745;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 2750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__4) {
	            this.state = 2751;
	            this.match(languageParser.T__4);
	            this.state = 2804;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2752;
	                localctx.re = this.match(languageParser.REDIRECTED);
	                this.state = 2753;
	                localctx.to = this.match(languageParser.TO);
	                 localctx.art.target = {}; 
	                this.state = 2755;
	                this.simplePath( localctx.art.target, 'artref' );
	                this.state = 2764;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__1:
	                case languageParser.NOT:
	                case languageParser.NULL:
	                case languageParser.ON:
	                case languageParser.DEFAULT:
	                    this.state = 2756;
	                    this.typeAssociationCont( localctx.art );
	                    break;
	                case languageParser.T__2:
	                case languageParser.T__3:
	                case languageParser.T__25:
	                case languageParser.FROM:
	                     this.docComment( localctx.art ); 
	                    this.state = 2761;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===languageParser.T__25) {
	                        this.state = 2758;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 2763;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 2766;
	                this.typeTypeOf( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 2771;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25) {
	                    this.state = 2768;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 2773;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 3:
	                this.state = 2774;
	                localctx.l = this.match(languageParser.LOCALIZED);
	                 localctx.art.localized = this.valueWithTokenLocation( true, localctx.l ); 
	                this.state = 2776;
	                this.typeRefOptArgs( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 2781;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25) {
	                    this.state = 2778;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 2783;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 4:
	                this.state = 2784;
	                this.typeRefOptArgs( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 2789;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__25) {
	                    this.state = 2786;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 2791;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 5:
	                 this.classifyImplicitName( 'ItemAssoc', localctx.art.value ); 
	                 localctx.assoc =  this.associationInSelectItem( localctx.art ) 
	                this.state = 2794;
	                this.typeAssociationBase( localctx.assoc, false );
	                this.state = 2798;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2795;
	                    this.typeToMany( localctx.assoc );
	                    break;

	                case 2:
	                    this.state = 2796;
	                    this.typeToOne( localctx.assoc );
	                    break;

	                case 3:
	                    this.state = 2797;
	                    this.simplePath( localctx.assoc.target, 'artref' );
	                    break;

	                }
	                this.state = 2800;
	                this.match(languageParser.ON);
	                this.state = 2801;
	                localctx.cond = this.condition();
	                 localctx.assoc.on = localctx.cond.expr; 
	                break;

	            }
	        }

	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 2 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracedSelectItemListDef(query) {
	    let localctx = new BracedSelectItemListDefContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 180, languageParser.RULE_bracedSelectItemListDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2808;
	        this.match(languageParser.T__1);
	         localctx.query.columns = this.createArray(); 
	        this.state = 2819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__15) | (1 << languageParser.T__25) | (1 << languageParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)) | (1 << (languageParser.SERVICE - 97)) | (1 << (languageParser.STORED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)))) !== 0)) {
	            this.state = 2810;
	            this.selectItemDef( localctx.query.columns );
	            this.state = 2816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 2811;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 2813;
	                this.selectItemDef( localctx.query.columns );
	                this.state = 2818;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2821;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.query.columns ); this.insertSemicolon(); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemInlineList(art, clause) {
	    let localctx = new SelectItemInlineListContext(this, this._ctx, this.state, art, clause);
	    this.enterRule(localctx, 182, languageParser.RULE_selectItemInlineList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2824;
	        this.match(languageParser.T__1);
	         localctx.art[localctx.clause] = this.createArray(); 
	        this.state = 2835;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__15) | (1 << languageParser.T__25) | (1 << languageParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)) | (1 << (languageParser.SERVICE - 97)) | (1 << (languageParser.STORED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
	            this.state = 2826;
	            this.selectItemInlineDef( localctx.art[localctx.clause] );
	            this.state = 2832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 2827;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 2829;
	                this.selectItemInlineDef( localctx.art[localctx.clause] );
	                this.state = 2834;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2837;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art[localctx.clause] ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemInlineDef(outer) {
	    let localctx = new SelectItemInlineDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 184, languageParser.RULE_selectItemInlineDef);
	    var _la = 0; // Token type
	    try {
	        this.state = 2851;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2840;
	            localctx.star = this.match(languageParser.T__11);
	             localctx.outer.push( this.valueWithTokenLocation( '*', localctx.star ) ); 
	            break;
	        case languageParser.T__1:
	        case languageParser.T__4:
	        case languageParser.T__5:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__25:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	             localctx.art =  new this.XsnArtifact(); this.docComment( localctx.art ); 
	            this.state = 2846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__25) {
	                this.state = 2843;
	                this.annotationAssignment_atn( localctx.art );
	                this.state = 2848;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	             if (this.getCurrentToken().text.toUpperCase() === 'VIRTUAL') this.reportVirtualAsRef(); 
	            this.state = 2850;
	            this.selectItemDefBody( localctx.art, localctx.outer );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.art) this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause(inQuery) {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state, inQuery);
	    this.enterRule(localctx, 186, languageParser.RULE_orderByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2853;
	        this.match(languageParser.ORDER);
	        this.state = 2854;
	        this.match(languageParser.BY);
	         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
	        this.state = 2856;
	        localctx.ob1 = this.orderBySpec();
	         if (localctx.query) localctx.query.orderBy = [ localctx.ob1.ob ]; 
	        this.state = 2864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 2858;
	            this.match(languageParser.T__2);
	            this.state = 2859;
	            localctx.obn = this.orderBySpec();
	             if (localctx.query) localctx.query.orderBy.push( localctx.obn.ob ); 
	            this.state = 2866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause(inQuery) {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state, inQuery);
	    this.enterRule(localctx, 188, languageParser.RULE_limitClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2867;
	        localctx.limkw = this.match(languageParser.LIMIT);
	         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
	        this.state = 2869;
	        localctx.lim = this.expression();
	         if (localctx.query) localctx.query.limit = { rows: localctx.lim.expr }; 
	        this.state = 2875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.OFFSET) {
	            this.state = 2871;
	            this.match(languageParser.OFFSET);
	            this.state = 2872;
	            localctx.off = this.expression();
	             if (localctx.query) localctx.query.limit.offset = localctx.off.expr; 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderBySpec() {
	    let localctx = new OrderBySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, languageParser.RULE_orderBySpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2877;
	        localctx.e = this.expression();
	         localctx.ob =  localctx.e.expr 
	        this.state = 2883;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.ASC:
	        	this.state = 2879;
	        	localctx.asc = this.match(languageParser.ASC);
	        	 localctx.ob.sort = this.valueWithTokenLocation( 'asc', localctx.asc ); 
	        	break;
	        case languageParser.DESC:
	        	this.state = 2881;
	        	localctx.desc = this.match(languageParser.DESC);
	        	 localctx.ob.sort = this.valueWithTokenLocation( 'desc', localctx.desc ); 
	        	break;
	        case languageParser.EOF:
	        case languageParser.T__0:
	        case languageParser.T__2:
	        case languageParser.T__3:
	        case languageParser.T__6:
	        case languageParser.T__13:
	        case languageParser.T__25:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ASPECT:
	        case languageParser.CONTEXT:
	        case languageParser.DEFINE:
	        case languageParser.ENTITY:
	        case languageParser.EVENT:
	        case languageParser.EXTEND:
	        case languageParser.FUNCTION:
	        case languageParser.LIMIT:
	        case languageParser.NULLS:
	        case languageParser.SERVICE:
	        case languageParser.TYPE:
	        case languageParser.USING:
	        case languageParser.VIEW:
	        case languageParser.HideAlternatives:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2888;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.NULLS) {
	            this.state = 2885;
	            localctx.nb = this.match(languageParser.NULLS);
	            this.state = 2886;
	            localctx.ne = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===languageParser.FIRST || _la===languageParser.LAST)) {
	                localctx.ne = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             localctx.ob.nulls = this.valueWithTokenLocation( (localctx.ne===null ? null : localctx.ne.text).toLowerCase(), localctx.nb, localctx.ne ); 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinOp(left) {
	    let localctx = new JoinOpContext(this, this._ctx, this.state, left);
	    this.enterRule(localctx, 192, languageParser.RULE_joinOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2925;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.JOIN:
	            this.state = 2890;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join =  'inner' 
	            break;
	        case languageParser.INNER:
	            this.state = 2892;
	            localctx.t1 = this.match(languageParser.INNER);
	            this.state = 2894;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
	                this.state = 2893;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2896;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'inner' 
	            break;
	        case languageParser.LEFT:
	            this.state = 2898;
	            localctx.t1 = this.match(languageParser.LEFT);
	            this.state = 2900;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.OUTER) {
	                this.state = 2899;
	                localctx.t2 = this.match(languageParser.OUTER);
	            }

	            this.state = 2903;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
	                this.state = 2902;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2905;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'left' 
	            break;
	        case languageParser.RIGHT:
	            this.state = 2907;
	            localctx.t1 = this.match(languageParser.RIGHT);
	            this.state = 2909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.OUTER) {
	                this.state = 2908;
	                localctx.t2 = this.match(languageParser.OUTER);
	            }

	            this.state = 2912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
	                this.state = 2911;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2914;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'right' 
	            break;
	        case languageParser.FULL:
	            this.state = 2916;
	            localctx.t1 = this.match(languageParser.FULL);
	            this.state = 2918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.OUTER) {
	                this.state = 2917;
	                localctx.t2 = this.match(languageParser.OUTER);
	            }

	            this.state = 2921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (languageParser.EXACT - 87)) | (1 << (languageParser.MANY - 87)) | (1 << (languageParser.ONE - 87)))) !== 0)) {
	                this.state = 2920;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2923;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'full' 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	         localctx.table =  { op: this.valueWithTokenLocation( 'join', localctx.op ),
	                         join: this.valueWithTokenLocation( localctx.join, localctx.t1 || localctx.op, localctx.t2 ),
	                         args: (localctx.left ? [localctx.left] : []),
	                         location: localctx.left && localctx.left.location }
	              if (localctx.c) localctx.table.cardinality = localctx.c.joinCard; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCardinality() {
	    let localctx = new JoinCardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, languageParser.RULE_joinCardinality);
	     localctx.joinCard =  {} 
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2936;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.EXACT:
	        case languageParser.ONE:
	            this.state = 2930;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.EXACT) {
	                this.state = 2929;
	                localctx.srcExact = this.match(languageParser.EXACT);
	            }

	            this.state = 2932;
	            localctx.srcMaxOne = this.match(languageParser.ONE);
	             if(localctx.srcExact)
	                      localctx.joinCard.sourceMin = { literal: 'number', val: 1,
	                                              location: this.tokenLocation(localctx.srcExact) };
	                    localctx.joinCard.sourceMax = { literal: 'number', val: 1,
	                                              location: this.tokenLocation(localctx.srcMaxOne) }; 
	            break;
	        case languageParser.MANY:
	            this.state = 2934;
	            localctx.srcMaxMany = this.match(languageParser.MANY);
	             localctx.joinCard.sourceMax = { literal: 'string', val: '*',
	                                               location: this.tokenLocation(localctx.srcMaxMany) }; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2938;
	        this.match(languageParser.TO);
	        this.state = 2946;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.EXACT:
	        case languageParser.ONE:
	            this.state = 2940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.EXACT) {
	                this.state = 2939;
	                localctx.tgtExact = this.match(languageParser.EXACT);
	            }

	            this.state = 2942;
	            localctx.tgtMaxOne = this.match(languageParser.ONE);
	             if(localctx.tgtExact)
	                      localctx.joinCard.targetMin = { literal: 'number', val: 1,
	                                              location: this.tokenLocation(localctx.tgtExact) };
	                    localctx.joinCard.targetMax = { literal: 'number', val: 1,
	                                          location: this.tokenLocation(localctx.tgtMaxOne) }; 
	            break;
	        case languageParser.MANY:
	            this.state = 2944;
	            localctx.tgtMaxMany = this.match(languageParser.MANY);
	             localctx.joinCard.targetMax = { literal: 'string', val: '*',
	                                            location: this.tokenLocation(localctx.tgtMaxMany) }; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.joinCard); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionEOF() {
	    let localctx = new ConditionEOFContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, languageParser.RULE_conditionEOF);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2948;
	        localctx.c = this.condition();
	         localctx.cond =  localctx.c.expr 
	        this.state = 2950;
	        this.match(languageParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, languageParser.RULE_condition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2952;
	        localctx.c1 = this.conditionTerm();
	        this.state = 2954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__15 || _la===languageParser.AND || _la===languageParser.OR) {
	            this.state = 2953;
	            localctx.cc = this.conditionCont( [localctx.c1.expr] );
	        }

	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  (localctx.cc || localctx.c1)?.expr 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionCont(args) {
	    let localctx = new ConditionContContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 200, languageParser.RULE_conditionCont);
	    var _la = 0; // Token type
	    try {
	        this.state = 2989;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.AND:
	        case languageParser.OR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2965; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2960;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.OR:
	                    this.state = 2956;
	                    this.match(languageParser.OR);
	                     localctx.right =  this.pushOpToken( localctx.args, 2 ) 
	                    break;
	                case languageParser.AND:
	                    this.state = 2958;
	                    this.match(languageParser.AND);
	                     localctx.right =  this.pushOpToken( localctx.args, 4 ) 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2962;
	                localctx.c1 = this.conditionTerm();
	                 localctx.right.push(localctx.c1.expr); 
	                this.state = 2967; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===languageParser.AND || _la===languageParser.OR);
	            this.state = 2978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__15) {
	                this.state = 2969;
	                this.match(languageParser.T__15);
	                 this.pushOpToken( localctx.args, 0 ); 
	                this.state = 2971;
	                localctx.e2 = this.expression();
	                 localctx.args.push(localctx.e2.expr); 
	                this.state = 2973;
	                localctx.colon = this.match(languageParser.T__4);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 2975;
	                localctx.e3 = this.expression();
	                 localctx.args.push(localctx.e3.expr); 
	            }

	            break;
	        case languageParser.T__15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2980;
	            localctx.q = this.match(languageParser.T__15);
	             localctx.args.nary = '?:';; this.pushOpToken( localctx.args, 0 ); 
	            this.state = 2982;
	            localctx.e2 = this.expression();
	             localctx.args.push(localctx.e2.expr); 
	            this.state = 2984;
	            localctx.colon = this.match(languageParser.T__4);
	             this.pushXprToken( localctx.args ); 
	            this.state = 2986;
	            localctx.e3 = this.expression();
	             localctx.args.push(localctx.e3.expr); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, localctx.args['$'+'opPrecedence'] !== 0 || '?:' ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionTerm() {
	    let localctx = new ConditionTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, languageParser.RULE_conditionTerm);
	    var _la = 0; // Token type
	    try {
	        this.state = 3001;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__4:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.EXISTS:
	        case languageParser.NEW:
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2991;
	            localctx.c1 = this.conditionPrimary();
	             localctx.args.push(localctx.c1.expr); 
	            break;
	        case languageParser.T__5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2994;
	            localctx.e1 = this.conditionOrQueryParenthesis();
	            this.state = 2996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__22) | (1 << languageParser.T__23))) !== 0)) {
	                this.state = 2995;
	                localctx.ec = this.expressionCont([localctx.e1.expr]);
	            }

	            this.state = 2999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__7) | (1 << languageParser.T__16) | (1 << languageParser.T__17) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (languageParser.IN - 47)) | (1 << (languageParser.NOT - 47)) | (1 << (languageParser.BETWEEN - 47)))) !== 0) || _la===languageParser.IS || _la===languageParser.LIKE) {
	                this.state = 2998;
	                localctx.cc = this.comparisonCont([ (localctx.ec || localctx.e1)?.expr ]);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  (localctx.c1 || localctx.cc || localctx.ec || localctx.e1)?.expr 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionPrimary() {
	    let localctx = new ConditionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, languageParser.RULE_conditionPrimary);
	    var _la = 0; // Token type
	    try {
	        this.state = 3032;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.NOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3003;
	            this.match(languageParser.NOT);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3005;
	            localctx.c1 = this.conditionTerm();
	             localctx.args.push(localctx.c1.expr); 
	            break;
	        case languageParser.EXISTS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3008;
	            this.match(languageParser.EXISTS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3021;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__5:
	                this.state = 3010;
	                localctx.open = this.match(languageParser.T__5);
	                this.state = 3011;
	                localctx.qe = this.queryExpression();
	                this.state = 3012;
	                localctx.close = this.match(languageParser.T__6);
	                 localctx.args.push( this.surroundByParens( localctx.qe.query, localctx.open, localctx.close, true ) ); 
	                break;
	            case languageParser.T__15:
	            case languageParser.HideAlternatives:
	                this.state = 3015;
	                localctx.qm = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===languageParser.T__15 || _la===languageParser.HideAlternatives)) {
	                    localctx.qm = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 localctx.args.push( { param: this.valueWithTokenLocation( '?', localctx.qm ), scope: 'param' } );
	                        this.csnParseOnly( 'syntax-unsupported-param', [ localctx.qm ], { '#': 'dynamic', code: '?' } );
	                      
	                break;
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	                this.state = 3017;
	                localctx.ep = this.valuePath( 'ref' );
	                 localctx.args.push( localctx.ep.qp ); 
	                 localctx.ep.qp['$'+'expected'] = 'exists'; 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.T__4:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3023;
	            localctx.e1 = this.expressionPrimary();
	            this.state = 3025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__22) | (1 << languageParser.T__23))) !== 0)) {
	                this.state = 3024;
	                localctx.ec = this.expressionCont([localctx.e1.expr]);
	            }

	            this.state = 3028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__7) | (1 << languageParser.T__16) | (1 << languageParser.T__17) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (languageParser.IN - 47)) | (1 << (languageParser.NOT - 47)) | (1 << (languageParser.BETWEEN - 47)))) !== 0) || _la===languageParser.IS || _la===languageParser.LIKE) {
	                this.state = 3027;
	                localctx.cc = this.comparisonCont([ (localctx.ec || localctx.e1)?.expr ]);
	            }

	             localctx.expr =  (localctx.cc || localctx.ec || localctx.e1)?.expr 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr ??= this.argsExpression( localctx.args, false ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonCont(args) {
	    let localctx = new ComparisonContContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 206, languageParser.RULE_comparisonCont);
	    var _la = 0; // Token type
	    try {
	        this.state = 3082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__7:
	        case languageParser.T__16:
	        case languageParser.T__17:
	        case languageParser.T__18:
	        case languageParser.T__19:
	        case languageParser.T__20:
	        case languageParser.T__21:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3034;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__7) | (1 << languageParser.T__16) | (1 << languageParser.T__17) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            this.state = 3038;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (languageParser.ALL - 38)) | (1 << (languageParser.ANY - 38)) | (1 << (languageParser.SOME - 38)))) !== 0)) {
	                this.state = 3036;
	                _la = this._input.LA(1);
	                if(!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (languageParser.ALL - 38)) | (1 << (languageParser.ANY - 38)) | (1 << (languageParser.SOME - 38)))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 this.pushXprToken( localctx.args ); 
	            }

	            this.state = 3040;
	            localctx.e2 = this.expression();
	             this.pushItem( localctx.args, localctx.e2.expr ); 
	            break;
	        case languageParser.IS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3043;
	            this.match(languageParser.IS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT) {
	                this.state = 3045;
	                this.match(languageParser.NOT);
	                 this.pushXprToken( localctx.args ); 
	            }

	            this.state = 3049;
	            this.match(languageParser.NULL);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case languageParser.IN:
	        case languageParser.NOT:
	        case languageParser.BETWEEN:
	        case languageParser.LIKE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.NOT) {
	                this.state = 3051;
	                this.match(languageParser.NOT);
	                 this.pushXprToken( localctx.args ); 
	            }

	            this.state = 3080;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.IN:
	                this.state = 3055;
	                this.match(languageParser.IN);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3057;
	                localctx.e1 = this.expression();
	                 localctx.args.push( this.secureParens( localctx.e1.expr ) ); 
	                break;
	            case languageParser.BETWEEN:
	                this.state = 3060;
	                this.match(languageParser.BETWEEN);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3062;
	                localctx.e2 = this.expression();
	                 localctx.args.push( localctx.e2.expr ); 
	                this.state = 3064;
	                this.match(languageParser.AND);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3066;
	                localctx.e3 = this.expression();
	                 localctx.args.push( localctx.e3.expr ); 
	                break;
	            case languageParser.LIKE:
	                this.state = 3069;
	                this.match(languageParser.LIKE);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3071;
	                localctx.e4 = this.expression();
	                 localctx.args.push( localctx.e4.expr ); 
	                this.state = 3078;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.ESCAPE) {
	                    this.state = 3073;
	                    this.match(languageParser.ESCAPE);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3075;
	                    localctx.e5 = this.expression();
	                     localctx.args.push( localctx.e5.expr ); 
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, languageParser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3090;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__4:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.state = 3084;
	            localctx.e1 = this.expressionPrimary();
	             localctx.expr =  localctx.e1.expr 
	            break;
	        case languageParser.T__5:
	            this.state = 3087;
	            localctx.eq = this.conditionOrQueryParenthesis();
	             localctx.expr =  localctx.eq.expr 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__22) | (1 << languageParser.T__23))) !== 0)) {
	            this.state = 3092;
	            localctx.ec = this.expressionCont( [localctx.expr] );
	             localctx.expr =  localctx.ec.expr 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionCont(args) {
	    let localctx = new ExpressionContContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 210, languageParser.RULE_expressionCont);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3117; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3107;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__22:
	                this.state = 3097;
	                this.match(languageParser.T__22);
	                 localctx.right =  this.pushOpToken( localctx.args, 20 ) 
	                break;
	            case languageParser.T__8:
	                this.state = 3099;
	                this.match(languageParser.T__8);
	                 localctx.right =  this.pushOpToken( localctx.args, 22 ) 
	                break;
	            case languageParser.T__9:
	                this.state = 3101;
	                this.match(languageParser.T__9);
	                 localctx.right =  this.pushOpToken( localctx.args, 22 ) 
	                break;
	            case languageParser.T__11:
	                this.state = 3103;
	                this.match(languageParser.T__11);
	                 localctx.right =  this.pushOpToken( localctx.args, 24 ) 
	                break;
	            case languageParser.T__23:
	                this.state = 3105;
	                this.match(languageParser.T__23);
	                 localctx.right =  this.pushOpToken( localctx.args, 24 ) 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3115;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__4:
	            case languageParser.T__8:
	            case languageParser.T__9:
	            case languageParser.T__15:
	            case languageParser.T__26:
	            case languageParser.String:
	            case languageParser.QuotedLiteral:
	            case languageParser.Boolean:
	            case languageParser.CASE:
	            case languageParser.CAST:
	            case languageParser.NEW:
	            case languageParser.NULL:
	            case languageParser.Number:
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	                this.state = 3109;
	                localctx.e1 = this.expressionPrimary();
	                 localctx.right.push( localctx.e1.expr ); 
	                break;
	            case languageParser.T__5:
	                this.state = 3112;
	                localctx.eq = this.conditionOrQueryParenthesis();
	                 localctx.right.push( localctx.eq.expr ); 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3119; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__22) | (1 << languageParser.T__23))) !== 0));
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, true ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionPrimary() {
	    let localctx = new ExpressionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, languageParser.RULE_expressionPrimary);
	    var _la = 0; // Token type
	    try {
	        this.state = 3210;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__8:
	        case languageParser.T__9:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3121;
	            _la = this._input.LA(1);
	            if(!(_la===languageParser.T__8 || _la===languageParser.T__9)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            this.state = 3129;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__4:
	            case languageParser.T__8:
	            case languageParser.T__9:
	            case languageParser.T__15:
	            case languageParser.T__26:
	            case languageParser.String:
	            case languageParser.QuotedLiteral:
	            case languageParser.Boolean:
	            case languageParser.CASE:
	            case languageParser.CAST:
	            case languageParser.NEW:
	            case languageParser.NULL:
	            case languageParser.Number:
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	                this.state = 3123;
	                localctx.e1 = this.expressionPrimary();
	                 this.signedExpression( localctx.args, localctx.e1.expr ); 
	                break;
	            case languageParser.T__5:
	                this.state = 3126;
	                localctx.eq = this.conditionOrQueryParenthesis();
	                 this.signedExpression( localctx.args, localctx.eq.expr ); 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.NULL:
	        case languageParser.Number:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3131;
	            localctx.val = this.literalValue();
	             localctx.args.push( localctx.val.val ); 
	            break;
	        case languageParser.CAST:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3134;
	            localctx.sf = this.specialFunction();
	             localctx.args.push( localctx.sf.ret ); 
	            break;
	        case languageParser.CASE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3137;
	            this.match(languageParser.CASE);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3167;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__4:
	            case languageParser.T__5:
	            case languageParser.T__8:
	            case languageParser.T__9:
	            case languageParser.T__15:
	            case languageParser.T__26:
	            case languageParser.String:
	            case languageParser.QuotedLiteral:
	            case languageParser.Boolean:
	            case languageParser.CASE:
	            case languageParser.CAST:
	            case languageParser.NEW:
	            case languageParser.NULL:
	            case languageParser.Number:
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	                this.state = 3139;
	                localctx.e2 = this.expression();
	                 localctx.args.push( localctx.e2.expr ); 
	                this.state = 3150; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 3141;
	                    this.match(languageParser.WHEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3143;
	                    localctx.ew = this.expression();
	                     localctx.args.push( localctx.ew.expr ); 
	                    this.state = 3145;
	                    this.match(languageParser.THEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3147;
	                    localctx.e3 = this.expression();
	                     localctx.args.push( localctx.e3.expr ); 
	                    this.state = 3152; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===languageParser.WHEN);
	                break;
	            case languageParser.WHEN:
	                this.state = 3163; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 3154;
	                    this.match(languageParser.WHEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3156;
	                    localctx.c = this.condition();
	                     localctx.args.push( localctx.c.expr ); 
	                    this.state = 3158;
	                    this.match(languageParser.THEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3160;
	                    localctx.e3 = this.expression();
	                     localctx.args.push( localctx.e3.expr ); 
	                    this.state = 3165; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===languageParser.WHEN);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3174;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ELSE) {
	                this.state = 3169;
	                this.match(languageParser.ELSE);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3171;
	                localctx.e4 = this.expression();
	                 localctx.args.push( localctx.e4.expr ); 
	            }

	            this.state = 3176;
	            this.match(languageParser.END);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case languageParser.NEW:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3179;
	            localctx.ne = this.match(languageParser.NEW);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3181;
	            localctx.nqp = this.valuePath( 'ref', null );
	             localctx.args.push( this.valuePathAst( localctx.nqp.qp ) ); 
	             this.fixNewKeywordPlacement( localctx.args ); 
	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3185;
	            localctx.vp = this.valuePath( 'ref', null );
	             localctx.args.push( this.valuePathAst( localctx.vp.qp ) ); 
	             this.setLocalTokenIfBefore( 'OVER', 'OVER', /^\($/i ); 
	            this.state = 3196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.OVER) {
	                 localctx.args[0].suffix = []; 
	                this.state = 3189;
	                this.match(languageParser.OVER);
	                 this.pushXprToken( localctx.args[0].suffix ); 
	                this.state = 3191;
	                localctx.open = this.match(languageParser.T__5);
	                this.state = 3192;
	                localctx.over = this.overClause();
	                this.state = 3193;
	                localctx.close = this.match(languageParser.T__6);
	                 localctx.args[0].suffix.push( this.surroundByParens( localctx.over.over, localctx.open, localctx.close ) ); 
	            }

	            break;
	        case languageParser.T__4:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3198;
	            localctx.colon = this.match(languageParser.T__4);
	             this.reportUnexpectedSpace( localctx.colon ); 
	             this.meltKeywordToIdentifier(); 
	            this.state = 3206;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	                this.state = 3201;
	                localctx.vp = this.valuePath( 'paramref', this.startLocation() );
	                { const par = localctx.vp.qp;; par.scope = 'param';; localctx.args.push( par ); }
	                break;
	            case languageParser.Number:
	                this.state = 3204;
	                localctx.pp = this.match(languageParser.Number);
	                 localctx.args.push( { param: this.unsignedIntegerLiteral(), scope: 'param' } );
	                        this.csnParseOnly( 'syntax-unsupported-param', [ localctx.pp ], { '#': 'positional', code: ':' + (localctx.pp===null ? null : localctx.pp.text) } );
	                      
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case languageParser.T__15:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3208;
	            localctx.qm = this.match(languageParser.T__15);
	             localctx.args.push( { param: this.valueWithTokenLocation( '?', localctx.qm ), scope: 'param' } );
	                  this.csnParseOnly( 'syntax-unsupported-param', [ localctx.qm ], { '#': 'dynamic', code: '?' } );
	                
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionOrQueryParenthesis() {
	    let localctx = new ConditionOrQueryParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, languageParser.RULE_conditionOrQueryParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3212;
	        localctx.open = this.match(languageParser.T__5);
	        this.state = 3261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.SELECT:
	            this.state = 3213;
	            localctx.q1 = this.selectQuery();
	            this.state = 3215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXCEPT - 88)) | (1 << (languageParser.INTERSECT - 88)) | (1 << (languageParser.LIMIT - 88)) | (1 << (languageParser.MINUS - 88)) | (1 << (languageParser.ORDER - 88)))) !== 0) || _la===languageParser.UNION) {
	                this.state = 3214;
	                localctx.qr = this.queryExpressionCont( localctx.q1.query );
	            }

	             localctx.args.push( localctx.qr ? localctx.qr.query : localctx.q1.query ); 
	            break;
	        case languageParser.T__4:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.EXISTS:
	        case languageParser.NEW:
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.state = 3219;
	            localctx.c1 = this.conditionPrimary();
	            this.state = 3221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__15 || _la===languageParser.AND || _la===languageParser.OR) {
	                this.state = 3220;
	                localctx.cc = this.conditionCont( [localctx.c1.expr] );
	            }

	             this.pushItem( localctx.args, localctx.cc?.expr || localctx.c1.expr ); 
	            this.state = 3231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 3224;
	                this.match(languageParser.T__2);
	                 if (localctx.args.length > 1 && this.isStraightBefore(')')) break; 
	                this.state = 3226;
	                localctx.cn = this.condition();
	                 this.pushItem(localctx.args, localctx.cn.expr); 
	                this.state = 3233;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case languageParser.T__5:
	            this.state = 3234;
	            localctx.rec = this.conditionOrQueryParenthesis();
	             localctx.args.push( localctx.rec.expr ); 
	            this.state = 3259;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.EXCEPT:
	            case languageParser.INTERSECT:
	            case languageParser.LIMIT:
	            case languageParser.MINUS:
	            case languageParser.ORDER:
	            case languageParser.UNION:
	                this.state = 3236;
	                localctx.qc = this.queryExpressionCont(localctx.rec.expr.query);
	                 if (localctx.qc.query) localctx.args[0] = { query: localctx.qc.query, location: localctx.qc.query.location }; 
	                break;
	            case languageParser.T__2:
	            case languageParser.T__6:
	            case languageParser.T__7:
	            case languageParser.T__8:
	            case languageParser.T__9:
	            case languageParser.T__11:
	            case languageParser.T__15:
	            case languageParser.T__16:
	            case languageParser.T__17:
	            case languageParser.T__18:
	            case languageParser.T__19:
	            case languageParser.T__20:
	            case languageParser.T__21:
	            case languageParser.T__22:
	            case languageParser.T__23:
	            case languageParser.IN:
	            case languageParser.NOT:
	            case languageParser.AND:
	            case languageParser.BETWEEN:
	            case languageParser.IS:
	            case languageParser.LIKE:
	            case languageParser.OR:
	                this.state = 3240;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__11) | (1 << languageParser.T__22) | (1 << languageParser.T__23))) !== 0)) {
	                    this.state = 3239;
	                    localctx.ec = this.expressionCont([localctx.rec.expr]);
	                }

	                this.state = 3243;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__7) | (1 << languageParser.T__16) | (1 << languageParser.T__17) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (languageParser.IN - 47)) | (1 << (languageParser.NOT - 47)) | (1 << (languageParser.BETWEEN - 47)))) !== 0) || _la===languageParser.IS || _la===languageParser.LIKE) {
	                    this.state = 3242;
	                    localctx.cm = this.comparisonCont([(localctx.ec || localctx.rec).expr]);
	                }

	                this.state = 3246;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===languageParser.T__15 || _la===languageParser.AND || _la===languageParser.OR) {
	                    this.state = 3245;
	                    localctx.cc = this.conditionCont([(localctx.cm || localctx.ec || localctx.rec).expr]);
	                }

	                 localctx.args[0] = (localctx.cc || localctx.cm || localctx.ec || localctx.rec)?.expr || localctx.args[0]; 
	                this.state = 3256;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 3249;
	                    this.match(languageParser.T__2);
	                     if (localctx.args.length > 1 && this.isStraightBefore(')')) break; 
	                    this.state = 3251;
	                    localctx.cn = this.condition();
	                     this.pushItem(localctx.args, localctx.cn.expr); 
	                    this.state = 3258;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3263;
	        localctx.close = this.match(languageParser.T__6);

	              if (localctx.args.length > 1)
	                localctx.expr =  { op: this.valueWithTokenLocation( 'list', localctx.open ), args: localctx.args,
	                          location: this.tokenLocation( localctx.open, localctx.close ) }
	              else if (localctx.args[0]) // can be `null` if condition failed to parse
	                localctx.expr =  this.surroundByParens( localctx.args[0], localctx.open, localctx.close, !!localctx.q1 )
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialFunction() {
	    let localctx = new SpecialFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, languageParser.RULE_specialFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3266;
	        localctx.ca = this.match(languageParser.CAST);
	        this.state = 3267;
	        this.match(languageParser.T__5);

	              localctx.ret =  {
	                op: this.valueWithTokenLocation( 'cast', localctx.ca ),
	                args: this.createArray(),
	                location: this.tokenLocation( localctx.ca )
	              }
	            
	        this.state = 3269;
	        localctx.e = this.expression();
	        this.state = 3270;
	        this.match(languageParser.AS);
	        this.state = 3271;
	        this.typeRefOptArgs( localctx.ret );

	              localctx.ret.args.push( localctx.e.expr );
	            
	        this.state = 3273;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.ret.args ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplePath(art, category) {
	    let localctx = new SimplePathContext(this, this._ctx, this.state, art, category);
	    this.enterRule(localctx, 218, languageParser.RULE_simplePath);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3276;
	        localctx.head = this.ident( localctx.category );
	         localctx.art.path ??= []; this.pushIdent( localctx.art.path, localctx.head.id ); 
	        this.state = 3284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__14) {
	            this.state = 3278;
	            this.match(languageParser.T__14);
	            this.state = 3279;
	            localctx.tail = this.ident( localctx.category );
	             this.pushIdent( localctx.art.path, localctx.tail.id ); 
	            this.state = 3286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuePath(category, location) {
	    let localctx = new ValuePathContext(this, this._ctx, this.state, category, location);
	    this.enterRule(localctx, 220, languageParser.RULE_valuePath);
	     localctx.qp.location = location || this.startLocation(); 
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3287;
	        localctx.id = this.ident( localctx.category );
	         this.pushIdent( localctx.qp.path, localctx.id.id ); 
	        this.state = 3294;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.T__5:
	        	this.state = 3289;
	        	this.pathArguments( localctx.id.id, localctx.id.id );
	        	this.state = 3291;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===languageParser.T__10) {
	        	    this.state = 3290;
	        	    this.cardinalityAndFilter( localctx.id.id );
	        	}

	        	break;
	        case languageParser.T__10:
	        	this.state = 3293;
	        	this.cardinalityAndFilter( localctx.id.id );
	        	break;
	        case languageParser.EOF:
	        case languageParser.T__0:
	        case languageParser.T__1:
	        case languageParser.T__2:
	        case languageParser.T__3:
	        case languageParser.T__4:
	        case languageParser.T__6:
	        case languageParser.T__7:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__11:
	        case languageParser.T__13:
	        case languageParser.T__14:
	        case languageParser.T__15:
	        case languageParser.T__16:
	        case languageParser.T__17:
	        case languageParser.T__18:
	        case languageParser.T__19:
	        case languageParser.T__20:
	        case languageParser.T__21:
	        case languageParser.T__22:
	        case languageParser.T__23:
	        case languageParser.T__25:
	        case languageParser.ALL:
	        case languageParser.AS:
	        case languageParser.DISTINCT:
	        case languageParser.FROM:
	        case languageParser.IN:
	        case languageParser.NOT:
	        case languageParser.NULL:
	        case languageParser.ON:
	        case languageParser.WHEN:
	        case languageParser.WHERE:
	        case languageParser.WITH:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	        case languageParser.OVER:
	        case languageParser.HideAlternatives:
	        case languageParser.GenericSeparator:
	        case languageParser.DOTbeforeBRACE:
	        case languageParser.SemicolonTopLevel:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 3308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__14) {
	            this.state = 3296;
	            this.match(languageParser.T__14);
	            this.state = 3297;
	            localctx.id = this.ident('ref');
	             this.pushIdent( localctx.qp.path, localctx.id.id ); 
	            this.state = 3304;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case languageParser.T__5:
	            	this.state = 3299;
	            	this.pathArguments( localctx.id.id );
	            	this.state = 3301;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===languageParser.T__10) {
	            	    this.state = 3300;
	            	    this.cardinalityAndFilter( localctx.id.id );
	            	}

	            	break;
	            case languageParser.T__10:
	            	this.state = 3303;
	            	this.cardinalityAndFilter( localctx.id.id );
	            	break;
	            case languageParser.EOF:
	            case languageParser.T__0:
	            case languageParser.T__1:
	            case languageParser.T__2:
	            case languageParser.T__3:
	            case languageParser.T__4:
	            case languageParser.T__6:
	            case languageParser.T__7:
	            case languageParser.T__8:
	            case languageParser.T__9:
	            case languageParser.T__11:
	            case languageParser.T__13:
	            case languageParser.T__14:
	            case languageParser.T__15:
	            case languageParser.T__16:
	            case languageParser.T__17:
	            case languageParser.T__18:
	            case languageParser.T__19:
	            case languageParser.T__20:
	            case languageParser.T__21:
	            case languageParser.T__22:
	            case languageParser.T__23:
	            case languageParser.T__25:
	            case languageParser.ALL:
	            case languageParser.AS:
	            case languageParser.DISTINCT:
	            case languageParser.FROM:
	            case languageParser.IN:
	            case languageParser.NOT:
	            case languageParser.NULL:
	            case languageParser.ON:
	            case languageParser.WHEN:
	            case languageParser.WHERE:
	            case languageParser.WITH:
	            case languageParser.ABSTRACT:
	            case languageParser.ACTION:
	            case languageParser.ACTIONS:
	            case languageParser.AND:
	            case languageParser.ANNOTATE:
	            case languageParser.ANNOTATION:
	            case languageParser.ARRAY:
	            case languageParser.ASC:
	            case languageParser.ASPECT:
	            case languageParser.ASSOCIATION:
	            case languageParser.BETWEEN:
	            case languageParser.COLUMNS:
	            case languageParser.COMPOSITION:
	            case languageParser.CONTEXT:
	            case languageParser.CROSS:
	            case languageParser.CURRENT:
	            case languageParser.DEFAULT:
	            case languageParser.DEFINE:
	            case languageParser.DEFINITIONS:
	            case languageParser.DESC:
	            case languageParser.ELEMENTS:
	            case languageParser.ELSE:
	            case languageParser.END:
	            case languageParser.ENTITY:
	            case languageParser.ENUM:
	            case languageParser.EVENT:
	            case languageParser.ESCAPE:
	            case languageParser.EXACT:
	            case languageParser.EXCEPT:
	            case languageParser.EXCLUDING:
	            case languageParser.EXTEND:
	            case languageParser.FIRST:
	            case languageParser.FLOATING:
	            case languageParser.FOLLOWING:
	            case languageParser.FULL:
	            case languageParser.FUNCTION:
	            case languageParser.GROUP:
	            case languageParser.HAVING:
	            case languageParser.INNER:
	            case languageParser.INTERSECT:
	            case languageParser.INTO:
	            case languageParser.IS:
	            case languageParser.JOIN:
	            case languageParser.LAST:
	            case languageParser.LEFT:
	            case languageParser.LIKE:
	            case languageParser.LIMIT:
	            case languageParser.LOCALIZED:
	            case languageParser.MANY:
	            case languageParser.MINUS:
	            case languageParser.MIXIN:
	            case languageParser.NAMESPACE:
	            case languageParser.NULLS:
	            case languageParser.OFFSET:
	            case languageParser.ONE:
	            case languageParser.OR:
	            case languageParser.ORDER:
	            case languageParser.OUTER:
	            case languageParser.PARAMETERS:
	            case languageParser.PARTITION:
	            case languageParser.PRECEDING:
	            case languageParser.PROJECTION:
	            case languageParser.REDIRECTED:
	            case languageParser.RETURNS:
	            case languageParser.RIGHT:
	            case languageParser.ROW:
	            case languageParser.ROWS:
	            case languageParser.SERVICE:
	            case languageParser.STORED:
	            case languageParser.THEN:
	            case languageParser.TO:
	            case languageParser.TYPE:
	            case languageParser.UNION:
	            case languageParser.UNBOUNDED:
	            case languageParser.UP:
	            case languageParser.USING:
	            case languageParser.VARIABLE:
	            case languageParser.VIEW:
	            case languageParser.Identifier:
	            case languageParser.OVER:
	            case languageParser.HideAlternatives:
	            case languageParser.GenericSeparator:
	            case languageParser.DOTbeforeBRACE:
	            case languageParser.SemicolonTopLevel:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 3310;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.qp); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathArguments(pathStep, considerSpecial) {
	    let localctx = new PathArgumentsContext(this, this._ctx, this.state, pathStep, considerSpecial);
	    this.enterRule(localctx, 222, languageParser.RULE_pathArguments);

	      if (!localctx.pathStep) localctx.pathStep =  {} // grammar robustness, see test/negative/parser/NamedExpression.cds
	      this.genericFunctionsStack.push( this['$'+'genericKeywords'] );

	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.excludeExpected([ 'ORDER' ]); 
	        this.state = 3312;
	        this.match(languageParser.T__5);
	         if (!this.setLocalTokenForId( 2, { ':': 'HelperToken1', '=>': 'HelperToken2' } ))
	                this.prepareGenericKeywords( localctx.considerSpecial ); 
	        this.state = 3360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.HelperToken1:
	             localctx.pathStep.args = this.createDict(); localctx.pathStep['$'+'syntax'] = ':'; 
	            this.state = 3315;
	            localctx.id = this.match(languageParser.HelperToken1);
	            this.state = 3316;
	            this.match(languageParser.T__4);
	            this.state = 3317;
	            this.namedExpression( localctx.pathStep, this.identAst( localctx.id, 'paramname', true ) );
	            this.state = 3326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 3318;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 3320;
	                localctx.name = this.ident('paramname');
	                this.state = 3321;
	                this.match(languageParser.T__4);
	                this.state = 3322;
	                this.namedExpression( localctx.pathStep, localctx.name.id );
	                this.state = 3328;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case languageParser.HelperToken2:
	             localctx.pathStep.args = this.createDict(); 
	            this.state = 3330;
	            localctx.id = this.match(languageParser.HelperToken2);
	            this.state = 3331;
	            this.match(languageParser.T__24);
	            this.state = 3332;
	            this.namedExpression( localctx.pathStep, this.identAst( localctx.id, 'paramname', true ) );
	            this.state = 3341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 3333;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 3335;
	                localctx.name = this.ident('paramname');
	                this.state = 3336;
	                this.match(languageParser.T__24);
	                this.state = 3337;
	                this.namedExpression( localctx.pathStep, localctx.name.id );
	                this.state = 3343;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case languageParser.T__4:
	        case languageParser.T__5:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__11:
	        case languageParser.T__15:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.ALL:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.DISTINCT:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	        case languageParser.HideAlternatives:
	        case languageParser.GenericExpr:
	        case languageParser.GenericIntro:
	             localctx.pathStep.args = this.createArray(); 
	            this.state = 3345;
	            this.funcExpression( localctx.pathStep, localctx.considerSpecial );
	            this.state = 3351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 3346;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 3348;
	                this.funcExpression( localctx.pathStep, localctx.considerSpecial );
	                this.state = 3353;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.ORDER) {
	                this.state = 3354;
	                localctx.ob = this.funcOrderByClause( [ localctx.pathStep.args[localctx.pathStep.args.length - 1] ] );
	                 localctx.pathStep.args[localctx.pathStep.args.length - 1] = localctx.ob.expr; 
	            }

	            break;
	        case languageParser.T__6:
	             localctx.pathStep.args = this.createArray(); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3362;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.pathStep.args ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	                             // see @init
	            if (!localctx.pathStep.args) localctx.pathStep.args = [];
	            this['$'+'genericKeywords'] = this.genericFunctionsStack.pop();
	          
	        this.exitRule();
	    }
	    return localctx;
	}



	namedExpression(pathStep, id) {
	    let localctx = new NamedExpressionContext(this, this._ctx, this.state, pathStep, id);
	    this.enterRule(localctx, 224, languageParser.RULE_namedExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3365;
	        localctx.elem = this.expression();
	         if (localctx.pathStep && localctx.id) {
	              this.addDef( (localctx.elem && localctx.elem.expr) ? localctx.elem.expr : { location: localctx.id.location },
	                           localctx.pathStep, 'args', 0, localctx.id );
	              }
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcExpression(pathStep, considerSpecial) {
	    let localctx = new FuncExpressionContext(this, this._ctx, this.state, pathStep, considerSpecial);
	    this.enterRule(localctx, 226, languageParser.RULE_funcExpression);
	     this.prepareGenericKeywords( localctx.considerSpecial ); 
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3381;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__4:
	        case languageParser.T__5:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__15:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.CASE:
	        case languageParser.CAST:
	        case languageParser.NEW:
	        case languageParser.NULL:
	        case languageParser.Number:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.state = 3368;
	            localctx.expr = this.expression();
	             localctx.args.push( localctx.expr.expr ); 
	            break;
	        case languageParser.GenericExpr:
	            this.state = 3371;
	            this.match(languageParser.GenericExpr);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case languageParser.GenericIntro:
	            this.state = 3373;
	            this.match(languageParser.GenericIntro);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3375;
	            localctx.expr = this.expression();
	             localctx.args.push( localctx.expr.expr ); 
	            break;
	        case languageParser.T__11:
	        case languageParser.ALL:
	        case languageParser.DISTINCT:
	        case languageParser.HideAlternatives:
	             this.reportErrorForGenericKeyword(); 
	            this.state = 3379;
	            _la = this._input.LA(1);
	            if(!(_la===languageParser.T__11 || _la===languageParser.ALL || _la===languageParser.DISTINCT || _la===languageParser.HideAlternatives)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (languageParser.FROM - 46)) | (1 << (languageParser.IN - 46)) | (1 << (languageParser.WITH - 46)))) !== 0) || _la===languageParser.GROUP || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (languageParser.Identifier - 138)) | (1 << (languageParser.HideAlternatives - 138)) | (1 << (languageParser.GenericSeparator - 138)))) !== 0)) {
	            this.state = 3400; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                 this.prepareGenericKeywords( localctx.considerSpecial, 'separator' ); 
	                this.state = 3387;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.GenericSeparator:
	                    this.state = 3384;
	                    this.match(languageParser.GenericSeparator);
	                    break;
	                case languageParser.FROM:
	                case languageParser.IN:
	                case languageParser.WITH:
	                case languageParser.GROUP:
	                case languageParser.Identifier:
	                case languageParser.HideAlternatives:
	                     this.reportErrorForGenericKeyword(); 
	                    this.state = 3386;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (languageParser.FROM - 46)) | (1 << (languageParser.IN - 46)) | (1 << (languageParser.WITH - 46)))) !== 0) || _la===languageParser.GROUP || _la===languageParser.Identifier || _la===languageParser.HideAlternatives)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                 this.pushXprToken( localctx.args );
	                          this.prepareGenericKeywords( localctx.considerSpecial, 'expr' ); 
	                this.state = 3398;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__4:
	                case languageParser.T__5:
	                case languageParser.T__8:
	                case languageParser.T__9:
	                case languageParser.T__15:
	                case languageParser.T__26:
	                case languageParser.String:
	                case languageParser.QuotedLiteral:
	                case languageParser.Boolean:
	                case languageParser.CASE:
	                case languageParser.CAST:
	                case languageParser.NEW:
	                case languageParser.NULL:
	                case languageParser.Number:
	                case languageParser.ABSTRACT:
	                case languageParser.ACTION:
	                case languageParser.ACTIONS:
	                case languageParser.AND:
	                case languageParser.ANNOTATE:
	                case languageParser.ANNOTATION:
	                case languageParser.ARRAY:
	                case languageParser.ASC:
	                case languageParser.ASPECT:
	                case languageParser.ASSOCIATION:
	                case languageParser.BETWEEN:
	                case languageParser.COLUMNS:
	                case languageParser.COMPOSITION:
	                case languageParser.CONTEXT:
	                case languageParser.CROSS:
	                case languageParser.CURRENT:
	                case languageParser.DEFAULT:
	                case languageParser.DEFINE:
	                case languageParser.DEFINITIONS:
	                case languageParser.DESC:
	                case languageParser.ELEMENTS:
	                case languageParser.ELSE:
	                case languageParser.END:
	                case languageParser.ENTITY:
	                case languageParser.ENUM:
	                case languageParser.EVENT:
	                case languageParser.ESCAPE:
	                case languageParser.EXACT:
	                case languageParser.EXCEPT:
	                case languageParser.EXCLUDING:
	                case languageParser.EXTEND:
	                case languageParser.FIRST:
	                case languageParser.FLOATING:
	                case languageParser.FOLLOWING:
	                case languageParser.FULL:
	                case languageParser.FUNCTION:
	                case languageParser.GROUP:
	                case languageParser.HAVING:
	                case languageParser.INNER:
	                case languageParser.INTERSECT:
	                case languageParser.INTO:
	                case languageParser.IS:
	                case languageParser.JOIN:
	                case languageParser.LAST:
	                case languageParser.LEFT:
	                case languageParser.LIKE:
	                case languageParser.LIMIT:
	                case languageParser.LOCALIZED:
	                case languageParser.MANY:
	                case languageParser.MINUS:
	                case languageParser.MIXIN:
	                case languageParser.NAMESPACE:
	                case languageParser.NULLS:
	                case languageParser.OFFSET:
	                case languageParser.ONE:
	                case languageParser.OR:
	                case languageParser.ORDER:
	                case languageParser.OUTER:
	                case languageParser.PARAMETERS:
	                case languageParser.PARTITION:
	                case languageParser.PRECEDING:
	                case languageParser.PROJECTION:
	                case languageParser.REDIRECTED:
	                case languageParser.RETURNS:
	                case languageParser.RIGHT:
	                case languageParser.ROW:
	                case languageParser.ROWS:
	                case languageParser.SERVICE:
	                case languageParser.STORED:
	                case languageParser.THEN:
	                case languageParser.TO:
	                case languageParser.TYPE:
	                case languageParser.UNION:
	                case languageParser.UNBOUNDED:
	                case languageParser.UP:
	                case languageParser.USING:
	                case languageParser.VARIABLE:
	                case languageParser.VIEW:
	                case languageParser.Identifier:
	                    this.state = 3390;
	                    localctx.expr = this.expression();
	                     localctx.args.push( localctx.expr.expr ); 
	                    break;
	                case languageParser.GenericExpr:
	                    this.state = 3393;
	                    this.match(languageParser.GenericExpr);
	                     this.pushXprToken( localctx.args ); 
	                    break;
	                case languageParser.ALL:
	                case languageParser.HideAlternatives:
	                     this.reportErrorForGenericKeyword(); 
	                    this.state = 3396;
	                    _la = this._input.LA(1);
	                    if(!(_la===languageParser.ALL || _la===languageParser.HideAlternatives)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                     this.pushXprToken( localctx.args ); 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 3402; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (languageParser.FROM - 46)) | (1 << (languageParser.IN - 46)) | (1 << (languageParser.WITH - 46)))) !== 0) || _la===languageParser.GROUP || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (languageParser.Identifier - 138)) | (1 << (languageParser.HideAlternatives - 138)) | (1 << (languageParser.GenericSeparator - 138)))) !== 0));
	        }

	        this._ctx.stop = this._input.LT(-1);
	         localctx.pathStep.args.push( this.argsExpression( localctx.args, false ) ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overClause() {
	    let localctx = new OverClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, languageParser.RULE_overClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.PARTITION) {
	            this.state = 3406;
	            this.match(languageParser.PARTITION);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3408;
	            this.match(languageParser.BY);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3410;
	            localctx.pb = this.partitionByClause();
	             localctx.args.push( localctx.pb.expr ); 
	        }

	        this.state = 3422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.ORDER) {
	            this.state = 3415;
	            this.match(languageParser.ORDER);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3417;
	            this.match(languageParser.BY);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3419;
	            localctx.ob = this.exprOrderByClause();
	             localctx.args.push( localctx.ob.expr ); 
	        }

	        this.state = 3429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.ROWS) {
	            this.state = 3424;
	            this.match(languageParser.ROWS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3426;
	            localctx.wf = this.windowFrameClause();
	             localctx.args.push( localctx.wf.wf ); 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         localctx.over =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionByClause() {
	    let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, languageParser.RULE_partitionByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3431;
	        localctx.e1 = this.expression();
	         localctx.args.push( localctx.e1.expr ); 
	        this.state = 3440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 3433;
	            this.match(languageParser.T__2);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3435;
	            localctx.en = this.expression();
	             localctx.args.push( localctx.en.expr ); 
	            this.state = 3442;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcOrderByClause(args) {
	    let localctx = new FuncOrderByClauseContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 232, languageParser.RULE_funcOrderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3443;
	        this.match(languageParser.ORDER);
	         this.pushXprToken( localctx.args ); 
	        this.state = 3445;
	        this.match(languageParser.BY);
	         this.pushXprToken( localctx.args ); 
	        this.state = 3447;
	        localctx.ob = this.exprOrderByClause();
	         localctx.args.push( localctx.ob.expr ); 
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprOrderByClause() {
	    let localctx = new ExprOrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, languageParser.RULE_exprOrderByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3450;
	        this.orderBySpecInExpr( localctx.args );
	        this.state = 3456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 3451;
	            this.match(languageParser.T__2);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3453;
	            this.orderBySpecInExpr( localctx.args );
	            this.state = 3458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderBySpecInExpr(args) {
	    let localctx = new OrderBySpecInExprContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 236, languageParser.RULE_orderBySpecInExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3459;
	        localctx.e = this.expression();
	         localctx.args.push( localctx.e.expr ); 
	        this.state = 3465;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case languageParser.ASC:
	        	this.state = 3461;
	        	this.match(languageParser.ASC);
	        	 this.pushXprToken( localctx.args ); 
	        	break;
	        case languageParser.DESC:
	        	this.state = 3463;
	        	this.match(languageParser.DESC);
	        	 this.pushXprToken( localctx.args ); 
	        	break;
	        case languageParser.T__2:
	        case languageParser.T__6:
	        case languageParser.NULLS:
	        case languageParser.ROWS:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 3471;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.NULLS) {
	            this.state = 3467;
	            this.match(languageParser.NULLS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3469;
	            _la = this._input.LA(1);
	            if(!(_la===languageParser.FIRST || _la===languageParser.LAST)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameClause() {
	    let localctx = new WindowFrameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, languageParser.RULE_windowFrameClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.Number:
	        case languageParser.CURRENT:
	        case languageParser.UNBOUNDED:
	            this.state = 3473;
	            this.windowFrameStartSpec( localctx.args );
	            break;
	        case languageParser.BETWEEN:
	            this.state = 3474;
	            this.match(languageParser.BETWEEN);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3476;
	            this.windowFrameBoundSpec( localctx.args );
	            this.state = 3477;
	            this.match(languageParser.AND);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3479;
	            this.windowFrameBoundSpec( localctx.args );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.wf =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameBoundSpec(args) {
	    let localctx = new WindowFrameBoundSpecContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 240, languageParser.RULE_windowFrameBoundSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 3495;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.UNBOUNDED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3483;
	            this.match(languageParser.UNBOUNDED);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3485;
	            _la = this._input.LA(1);
	            if(!(_la===languageParser.FOLLOWING || _la===languageParser.PRECEDING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            break;
	        case languageParser.Number:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3487;
	            this.match(languageParser.Number);
	             localctx.args.push( this.unsignedIntegerLiteral() ); 
	            this.state = 3489;
	            _la = this._input.LA(1);
	            if(!(_la===languageParser.FOLLOWING || _la===languageParser.PRECEDING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            break;
	        case languageParser.CURRENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3491;
	            this.match(languageParser.CURRENT);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3493;
	            this.match(languageParser.ROW);
	             this.pushXprToken( localctx.args ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameStartSpec(args) {
	    let localctx = new WindowFrameStartSpecContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 242, languageParser.RULE_windowFrameStartSpec);
	    try {
	        this.state = 3509;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.UNBOUNDED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3497;
	            this.match(languageParser.UNBOUNDED);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3499;
	            this.match(languageParser.PRECEDING);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case languageParser.Number:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3501;
	            this.match(languageParser.Number);
	             localctx.args.push( this.unsignedIntegerLiteral() ); 
	            this.state = 3503;
	            this.match(languageParser.PRECEDING);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case languageParser.CURRENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3505;
	            this.match(languageParser.CURRENT);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3507;
	            this.match(languageParser.ROW);
	             this.pushXprToken( localctx.args ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinalityAndFilter(pathStep) {
	    let localctx = new CardinalityAndFilterContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 244, languageParser.RULE_cardinalityAndFilter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	         if (!localctx.pathStep) localctx.pathStep =  {} 
	        this.state = 3512;
	        localctx.openFilter = this.match(languageParser.T__10);
	        this.state = 3514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.Number) {
	            this.state = 3513;
	            this.optionalCardinality( pathStep );
	        }

	        this.state = 3516;
	        this.filterWhereClause( localctx.pathStep );
	        this.state = 3532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.GROUP) {
	            this.state = 3517;
	            localctx.group = this.match(languageParser.GROUP);
	            this.state = 3518;
	            localctx.by = this.match(languageParser.BY);
	            this.state = 3519;
	            localctx.e1 = this.expression();
	             localctx.pathStep.groupBy = [ localctx.e1.expr ]; 
	            this.state = 3527;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 3521;
	                this.match(languageParser.T__2);
	                this.state = 3522;
	                localctx.en = this.expression();
	                 localctx.pathStep.groupBy.push( localctx.en.expr ); 
	                this.state = 3529;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ localctx.group, localctx.by ], { keyword: 'GROUP BY' }); 
	        }

	        this.state = 3539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.HAVING) {
	            this.state = 3534;
	            localctx.hv = this.match(languageParser.HAVING);
	            this.state = 3535;
	            localctx.having = this.condition();
	             localctx.pathStep.having = localctx.having.expr; 
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ localctx.hv ], { keyword: 'HAVING' }); 
	        }

	        this.state = 3546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.ORDER) {
	             const orderKw = this._input.LT(1); const byKw = this._input.LT(2); 
	            this.state = 3542;
	            localctx.ob = this.orderByClause( localctx.pathStep );
	             localctx.pathStep =  localctx.ob.query; 
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ orderKw, byKw ], { keyword: 'ORDER BY' }); 
	        }

	        this.state = 3553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.LIMIT) {
	             const limit = this._input.LT(1); 
	            this.state = 3549;
	            localctx.lc = this.limitClause( localctx.pathStep );
	             localctx.pathStep =  localctx.lc.query; 
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ limit ], { keyword: 'LIMIT' }); 
	        }

	        this.state = 3555;
	        localctx.closeFilter = this.match(languageParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalCardinality(pathStep) {
	    let localctx = new OptionalCardinalityContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 246, languageParser.RULE_optionalCardinality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         if (this._input.LT(2).text !== ':') return localctx; 

	        this.state = 3558;
	        this.match(languageParser.Number);
	         if (localctx.pathStep) localctx.pathStep.cardinality = { targetMax: this.unsignedIntegerLiteral(), location: this.startLocation() }; 
	        this.state = 3560;
	        this.match(languageParser.T__4);
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.pathStep && localctx.pathStep.cardinality) this.attachLocation(localctx.pathStep.cardinality); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterWhereClause(pathStep) {
	    let localctx = new FilterWhereClauseContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 248, languageParser.RULE_filterWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);

	              const tok = this.getCurrentToken();
	              if (tok.type === languageParser.GROUP
	                 || tok.type === languageParser.ORDER
	                 || tok.type === languageParser.LIMIT
	                 || tok.type === languageParser.HAVING)
	                return localctx;
	            
	        this.state = 3563;
	        this.optionalWhereForFilter();
	        this.state = 3564;
	        localctx.cond = this.condition();
	         if (localctx.pathStep) localctx.pathStep.where = localctx.cond.expr; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalWhereForFilter() {
	    let localctx = new OptionalWhereForFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, languageParser.RULE_optionalWhereForFilter);
	    try {
	        this.enterOuterAlt(localctx, 1);

	              if (this.getCurrentToken().type !== languageParser.WHERE)
	                return localctx; // TODO: should we somehow add those keywords to $(EXPECTED)?
	            
	        this.state = 3568;
	        this.match(languageParser.WHERE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_fix(art) {
	    let localctx = new AnnotationAssignment_fixContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 252, languageParser.RULE_annotationAssignment_fix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3570;
	        localctx.at = this.match(languageParser.T__25);
	         this.reportUnexpectedSpace( localctx.at ); 
	        this.state = 3581;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__5:
	            this.state = 3572;
	            this.annotationAssignment_paren( localctx.art );
	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	             localctx.assignment =  { name: new this.XsnName() } 
	            this.state = 3574;
	            this.annotationPath( localctx.assignment.name, 'anno' );
	            this.state = 3577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__26) {
	                this.state = 3575;
	                this.match(languageParser.T__26);
	                this.state = 3576;
	                this.annotationPathVariant( localctx.assignment.name );
	            }

	             this.warnIfColonFollows( localctx.assignment ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);

	          if (localctx.assignment) {
	            this.assignAnnotation( localctx.art, localctx.assignment );
	            this.docComment( localctx.art );
	          }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_ll1(art) {
	    let localctx = new AnnotationAssignment_ll1Context(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 254, languageParser.RULE_annotationAssignment_ll1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3583;
	        localctx.at = this.match(languageParser.T__25);
	         this.reportUnexpectedSpace( localctx.at ); 
	        this.state = 3597;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__5:
	            this.state = 3585;
	            this.annotationAssignment_paren( localctx.art );
	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	             localctx.assignment =  { name: new this.XsnName() } 
	            this.state = 3587;
	            this.annotationPath( localctx.assignment.name, 'anno' );
	            this.state = 3590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__26) {
	                this.state = 3588;
	                this.match(languageParser.T__26);
	                this.state = 3589;
	                this.annotationPathVariant( localctx.assignment.name );
	            }

	            this.state = 3595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__4) {
	                this.state = 3592;
	                this.match(languageParser.T__4);
	                 this.meltKeywordToIdentifier(true); 
	                this.state = 3594;
	                localctx.val = this.annoValue( localctx.assignment );
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);

	          if (localctx.assignment) {
	            this.assignAnnotation( localctx.art, localctx.assignment );
	            this.docComment( localctx.art );
	          }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_atn(art) {
	    let localctx = new AnnotationAssignment_atnContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 256, languageParser.RULE_annotationAssignment_atn);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3599;
	        localctx.at = this.match(languageParser.T__25);
	         this.reportUnexpectedSpace( localctx.at ); 
	        this.state = 3627;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__5:
	            this.state = 3601;
	            this.annotationAssignment_paren( localctx.art );
	            break;
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	             localctx.assignment =  { name: new this.XsnName() } 
	            this.state = 3603;
	            this.annotationPath( localctx.assignment.name, 'anno' );
	             this.setLocalToken( '#', 'HelperToken1', null, true ); 
	            this.state = 3607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.HelperToken1) {
	                this.state = 3605;
	                localctx.hash = this.match(languageParser.HelperToken1);
	                this.state = 3606;
	                this.annotationPathVariant( localctx.assignment.name );
	            }

	             this.setLocalToken( ':', 'HelperToken2', null, true ); 
	            this.state = 3625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.HelperToken2) {
	                this.state = 3610;
	                this.match(languageParser.HelperToken2);
	                 this.meltKeywordToIdentifier(true); 
	                this.state = 3623;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__1:
	                case languageParser.T__5:
	                case languageParser.T__8:
	                case languageParser.T__9:
	                case languageParser.T__10:
	                case languageParser.T__26:
	                case languageParser.String:
	                case languageParser.QuotedLiteral:
	                case languageParser.Boolean:
	                case languageParser.NULL:
	                case languageParser.Number:
	                    this.state = 3612;
	                    localctx.val = this.annoValueBase( localctx.assignment );
	                    break;
	                case languageParser.T__25:
	                case languageParser.ABSTRACT:
	                case languageParser.ACTION:
	                case languageParser.ACTIONS:
	                case languageParser.AND:
	                case languageParser.ANNOTATE:
	                case languageParser.ANNOTATION:
	                case languageParser.ARRAY:
	                case languageParser.ASC:
	                case languageParser.ASPECT:
	                case languageParser.ASSOCIATION:
	                case languageParser.BETWEEN:
	                case languageParser.COLUMNS:
	                case languageParser.COMPOSITION:
	                case languageParser.CONTEXT:
	                case languageParser.CROSS:
	                case languageParser.CURRENT:
	                case languageParser.DEFAULT:
	                case languageParser.DEFINE:
	                case languageParser.DEFINITIONS:
	                case languageParser.DESC:
	                case languageParser.ELEMENTS:
	                case languageParser.ELSE:
	                case languageParser.END:
	                case languageParser.ENTITY:
	                case languageParser.ENUM:
	                case languageParser.EVENT:
	                case languageParser.ESCAPE:
	                case languageParser.EXACT:
	                case languageParser.EXCEPT:
	                case languageParser.EXCLUDING:
	                case languageParser.EXTEND:
	                case languageParser.FIRST:
	                case languageParser.FLOATING:
	                case languageParser.FOLLOWING:
	                case languageParser.FULL:
	                case languageParser.FUNCTION:
	                case languageParser.GROUP:
	                case languageParser.HAVING:
	                case languageParser.INNER:
	                case languageParser.INTERSECT:
	                case languageParser.INTO:
	                case languageParser.IS:
	                case languageParser.JOIN:
	                case languageParser.LAST:
	                case languageParser.LEFT:
	                case languageParser.LIKE:
	                case languageParser.LIMIT:
	                case languageParser.LOCALIZED:
	                case languageParser.MANY:
	                case languageParser.MINUS:
	                case languageParser.MIXIN:
	                case languageParser.NAMESPACE:
	                case languageParser.NULLS:
	                case languageParser.OFFSET:
	                case languageParser.ONE:
	                case languageParser.OR:
	                case languageParser.ORDER:
	                case languageParser.OUTER:
	                case languageParser.PARAMETERS:
	                case languageParser.PARTITION:
	                case languageParser.PRECEDING:
	                case languageParser.PROJECTION:
	                case languageParser.REDIRECTED:
	                case languageParser.RETURNS:
	                case languageParser.RIGHT:
	                case languageParser.ROW:
	                case languageParser.ROWS:
	                case languageParser.SERVICE:
	                case languageParser.STORED:
	                case languageParser.THEN:
	                case languageParser.TO:
	                case languageParser.TYPE:
	                case languageParser.UNION:
	                case languageParser.UNBOUNDED:
	                case languageParser.UP:
	                case languageParser.USING:
	                case languageParser.VARIABLE:
	                case languageParser.VIEW:
	                case languageParser.Identifier:
	                    this.state = 3616;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case languageParser.T__25:
	                        this.state = 3613;
	                        localctx.atv = this.match(languageParser.T__25);
	                        this.state = 3614;
	                        this.annotationPath( localctx.assignment, 'uncheckedAnno', localctx.atv );
	                        break;
	                    case languageParser.ABSTRACT:
	                    case languageParser.ACTION:
	                    case languageParser.ACTIONS:
	                    case languageParser.AND:
	                    case languageParser.ANNOTATE:
	                    case languageParser.ANNOTATION:
	                    case languageParser.ARRAY:
	                    case languageParser.ASC:
	                    case languageParser.ASPECT:
	                    case languageParser.ASSOCIATION:
	                    case languageParser.BETWEEN:
	                    case languageParser.COLUMNS:
	                    case languageParser.COMPOSITION:
	                    case languageParser.CONTEXT:
	                    case languageParser.CROSS:
	                    case languageParser.CURRENT:
	                    case languageParser.DEFAULT:
	                    case languageParser.DEFINE:
	                    case languageParser.DEFINITIONS:
	                    case languageParser.DESC:
	                    case languageParser.ELEMENTS:
	                    case languageParser.ELSE:
	                    case languageParser.END:
	                    case languageParser.ENTITY:
	                    case languageParser.ENUM:
	                    case languageParser.EVENT:
	                    case languageParser.ESCAPE:
	                    case languageParser.EXACT:
	                    case languageParser.EXCEPT:
	                    case languageParser.EXCLUDING:
	                    case languageParser.EXTEND:
	                    case languageParser.FIRST:
	                    case languageParser.FLOATING:
	                    case languageParser.FOLLOWING:
	                    case languageParser.FULL:
	                    case languageParser.FUNCTION:
	                    case languageParser.GROUP:
	                    case languageParser.HAVING:
	                    case languageParser.INNER:
	                    case languageParser.INTERSECT:
	                    case languageParser.INTO:
	                    case languageParser.IS:
	                    case languageParser.JOIN:
	                    case languageParser.LAST:
	                    case languageParser.LEFT:
	                    case languageParser.LIKE:
	                    case languageParser.LIMIT:
	                    case languageParser.LOCALIZED:
	                    case languageParser.MANY:
	                    case languageParser.MINUS:
	                    case languageParser.MIXIN:
	                    case languageParser.NAMESPACE:
	                    case languageParser.NULLS:
	                    case languageParser.OFFSET:
	                    case languageParser.ONE:
	                    case languageParser.OR:
	                    case languageParser.ORDER:
	                    case languageParser.OUTER:
	                    case languageParser.PARAMETERS:
	                    case languageParser.PARTITION:
	                    case languageParser.PRECEDING:
	                    case languageParser.PROJECTION:
	                    case languageParser.REDIRECTED:
	                    case languageParser.RETURNS:
	                    case languageParser.RIGHT:
	                    case languageParser.ROW:
	                    case languageParser.ROWS:
	                    case languageParser.SERVICE:
	                    case languageParser.STORED:
	                    case languageParser.THEN:
	                    case languageParser.TO:
	                    case languageParser.TYPE:
	                    case languageParser.UNION:
	                    case languageParser.UNBOUNDED:
	                    case languageParser.UP:
	                    case languageParser.USING:
	                    case languageParser.VARIABLE:
	                    case languageParser.VIEW:
	                    case languageParser.Identifier:
	                        this.state = 3615;
	                        this.annotationPath( localctx.assignment, 'uncheckedRef', localctx.atv );
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                     this.setLocalToken( '#', 'HelperToken1', null, true ); 
	                    this.state = 3621;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.HelperToken1) {
	                        this.state = 3619;
	                        localctx.hash = this.match(languageParser.HelperToken1);
	                        this.state = 3620;
	                        this.annotationPathVariant( localctx.assignment );
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);

	          if (localctx.assignment) {
	            this.assignAnnotation( localctx.art, localctx.assignment );
	            this.docComment( localctx.art );
	          }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_paren(art) {
	    let localctx = new AnnotationAssignment_parenContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 258, languageParser.RULE_annotationAssignment_paren);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3629;
	        this.match(languageParser.T__5);

	              if (this.isStraightBefore(')')) {
	                this.matchWildcard();   // we know it is the ')' - we do not reach the final match
	                return localctx;
	              }
	              this.meltKeywordToIdentifier();
	            
	        this.state = 3631;
	        this.annotationAssignment_1( localctx.art );
	        this.state = 3637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__2) {
	            this.state = 3632;
	            this.match(languageParser.T__2);

	                    this.meltKeywordToIdentifier();
	                    if (this.isStraightBefore(')')) break; // allow ',' before ')'
	                  
	            this.state = 3634;
	            this.annotationAssignment_1( localctx.art );
	            this.state = 3639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3640;
	        this.match(languageParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_1(art) {
	    let localctx = new AnnotationAssignment_1Context(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 260, languageParser.RULE_annotationAssignment_1);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3642;
	        this.annotationPath( localctx.assignment.name, 'anno' );
	        this.state = 3645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__26) {
	            this.state = 3643;
	            this.match(languageParser.T__26);
	            this.state = 3644;
	            this.annotationPathVariant( localctx.assignment.name );
	        }

	        this.state = 3650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__4) {
	            this.state = 3647;
	            this.match(languageParser.T__4);
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3649;
	            localctx.val = this.annoValue( localctx.assignment );
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.assignAnnotation( localctx.art, localctx.assignment ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationPath(art, category, headat) {
	    let localctx = new AnnotationPathContext(this, this._ctx, this.state, art, category, headat);
	    this.enterRule(localctx, 262, languageParser.RULE_annotationPath);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3652;
	        localctx.head = this.ident( localctx.category );
	         localctx.art.path = []; this.pushIdent( localctx.art.path, localctx.head.id, localctx.headat ); 
	        this.state = 3663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===languageParser.T__14) {
	            this.state = 3654;
	            this.match(languageParser.T__14);
	            this.state = 3656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__25) {
	                this.state = 3655;
	                localctx.at = this.match(languageParser.T__25);
	            }

	            this.state = 3658;
	            localctx.tail = this.ident( localctx.category );

	                  if (localctx.at) { localctx.category =  'uncheckedAnno' }
	                  this.pushIdent( localctx.art.path, localctx.tail.id, localctx.at );
	                    // Otherwise, localctx.at may continue to be set after one `.@anno` segment.
	                    localctx.at = null;
	                  
	            this.state = 3665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationPathVariant(art) {
	    let localctx = new AnnotationPathVariantContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 264, languageParser.RULE_annotationPathVariant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.reportUnexpectedSpace();; this.meltKeywordToIdentifier(); 
	        this.state = 3667;
	        this.simplePath( localctx.variant, 'variant' );
	         localctx.art.variant = localctx.variant; 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annoValue(assignment) {
	    let localctx = new AnnoValueContext(this, this._ctx, this.state, assignment);
	    this.enterRule(localctx, 266, languageParser.RULE_annoValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 3679;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	        case languageParser.T__5:
	        case languageParser.T__8:
	        case languageParser.T__9:
	        case languageParser.T__10:
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.NULL:
	        case languageParser.Number:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3670;
	            localctx.base = this.annoValueBase( localctx.assignment );
	            break;
	        case languageParser.T__25:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__25) {
	                this.state = 3671;
	                localctx.at = this.match(languageParser.T__25);
	            }

	            this.state = 3674;
	            this.annotationPath( localctx.assignment, 'annoref', localctx.at );
	            this.state = 3677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__26) {
	                this.state = 3675;
	                this.match(languageParser.T__26);
	                this.state = 3676;
	                this.annotationPathVariant( localctx.assignment );
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annoValueBase(assignment) {
	    let localctx = new AnnoValueBaseContext(this, this._ctx, this.state, assignment);
	    this.enterRule(localctx, 268, languageParser.RULE_annoValueBase);
	    var _la = 0; // Token type
	    try {
	        this.state = 3748;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3681;
	            this.match(languageParser.T__1);
	             localctx.assignment['$'+'flatten'] = []; this.meltKeywordToIdentifier(); 
	            this.state = 3683;
	            this.flattenedValue( localctx.assignment );
	            this.state = 3689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 3684;
	                this.match(languageParser.T__2);

	                        this.meltKeywordToIdentifier();
	                        if (this.isStraightBefore("}")) break; // allow ',' before ')'
	                      
	                this.state = 3686;
	                this.flattenedValue( localctx.assignment );
	                this.state = 3691;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3692;
	            this.match(languageParser.T__3);
	            break;
	        case languageParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3694;
	            this.match(languageParser.T__10);
	             localctx.assignment.val = []; localctx.assignment.literal = 'array'; 
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__5) | (1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__25) | (1 << languageParser.T__26) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)) | (1 << (languageParser.SERVICE - 97)) | (1 << (languageParser.STORED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
	                this.state = 3707;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case languageParser.T__1:
	                case languageParser.T__5:
	                case languageParser.T__8:
	                case languageParser.T__9:
	                case languageParser.T__10:
	                case languageParser.T__25:
	                case languageParser.T__26:
	                case languageParser.String:
	                case languageParser.QuotedLiteral:
	                case languageParser.Boolean:
	                case languageParser.NULL:
	                case languageParser.Number:
	                case languageParser.ABSTRACT:
	                case languageParser.ACTION:
	                case languageParser.ACTIONS:
	                case languageParser.AND:
	                case languageParser.ANNOTATE:
	                case languageParser.ANNOTATION:
	                case languageParser.ARRAY:
	                case languageParser.ASC:
	                case languageParser.ASPECT:
	                case languageParser.ASSOCIATION:
	                case languageParser.BETWEEN:
	                case languageParser.COLUMNS:
	                case languageParser.COMPOSITION:
	                case languageParser.CONTEXT:
	                case languageParser.CROSS:
	                case languageParser.CURRENT:
	                case languageParser.DEFAULT:
	                case languageParser.DEFINE:
	                case languageParser.DEFINITIONS:
	                case languageParser.DESC:
	                case languageParser.ELEMENTS:
	                case languageParser.ELSE:
	                case languageParser.END:
	                case languageParser.ENTITY:
	                case languageParser.ENUM:
	                case languageParser.EVENT:
	                case languageParser.ESCAPE:
	                case languageParser.EXACT:
	                case languageParser.EXCEPT:
	                case languageParser.EXCLUDING:
	                case languageParser.EXTEND:
	                case languageParser.FIRST:
	                case languageParser.FLOATING:
	                case languageParser.FOLLOWING:
	                case languageParser.FULL:
	                case languageParser.FUNCTION:
	                case languageParser.GROUP:
	                case languageParser.HAVING:
	                case languageParser.INNER:
	                case languageParser.INTERSECT:
	                case languageParser.INTO:
	                case languageParser.IS:
	                case languageParser.JOIN:
	                case languageParser.LAST:
	                case languageParser.LEFT:
	                case languageParser.LIKE:
	                case languageParser.LIMIT:
	                case languageParser.LOCALIZED:
	                case languageParser.MANY:
	                case languageParser.MINUS:
	                case languageParser.MIXIN:
	                case languageParser.NAMESPACE:
	                case languageParser.NULLS:
	                case languageParser.OFFSET:
	                case languageParser.ONE:
	                case languageParser.OR:
	                case languageParser.ORDER:
	                case languageParser.OUTER:
	                case languageParser.PARAMETERS:
	                case languageParser.PARTITION:
	                case languageParser.PRECEDING:
	                case languageParser.PROJECTION:
	                case languageParser.REDIRECTED:
	                case languageParser.RETURNS:
	                case languageParser.RIGHT:
	                case languageParser.ROW:
	                case languageParser.ROWS:
	                case languageParser.SERVICE:
	                case languageParser.STORED:
	                case languageParser.THEN:
	                case languageParser.TO:
	                case languageParser.TYPE:
	                case languageParser.UNION:
	                case languageParser.UNBOUNDED:
	                case languageParser.UP:
	                case languageParser.USING:
	                case languageParser.VARIABLE:
	                case languageParser.VIEW:
	                case languageParser.Identifier:
	                    this.state = 3697;
	                    localctx.head = this.annoSubValue();
	                     localctx.assignment.val.push( localctx.head.val ); 
	                    break;
	                case languageParser.T__27:
	                    this.state = 3700;
	                    localctx.e = this.match(languageParser.T__27);
	                    this.state = 3704;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===languageParser.UP) {
	                        this.state = 3701;
	                        this.match(languageParser.UP);
	                        this.state = 3702;
	                        this.match(languageParser.TO);
	                        this.state = 3703;
	                        localctx.upTo = this.annoSubValue();
	                    }

	                    {
	                              const item = { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) };
	                              localctx.assignment.val.push( item );
	                              if (localctx.upTo) item.upTo = localctx.upTo.val;
	                              localctx.seenEllipsis =  !localctx.upTo || 'upTo'
	                            }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 3727;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 3709;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore(']')) break; 
	                     this.meltKeywordToIdentifier(true); 
	                    this.state = 3723;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case languageParser.T__1:
	                    case languageParser.T__5:
	                    case languageParser.T__8:
	                    case languageParser.T__9:
	                    case languageParser.T__10:
	                    case languageParser.T__25:
	                    case languageParser.T__26:
	                    case languageParser.String:
	                    case languageParser.QuotedLiteral:
	                    case languageParser.Boolean:
	                    case languageParser.NULL:
	                    case languageParser.Number:
	                    case languageParser.ABSTRACT:
	                    case languageParser.ACTION:
	                    case languageParser.ACTIONS:
	                    case languageParser.AND:
	                    case languageParser.ANNOTATE:
	                    case languageParser.ANNOTATION:
	                    case languageParser.ARRAY:
	                    case languageParser.ASC:
	                    case languageParser.ASPECT:
	                    case languageParser.ASSOCIATION:
	                    case languageParser.BETWEEN:
	                    case languageParser.COLUMNS:
	                    case languageParser.COMPOSITION:
	                    case languageParser.CONTEXT:
	                    case languageParser.CROSS:
	                    case languageParser.CURRENT:
	                    case languageParser.DEFAULT:
	                    case languageParser.DEFINE:
	                    case languageParser.DEFINITIONS:
	                    case languageParser.DESC:
	                    case languageParser.ELEMENTS:
	                    case languageParser.ELSE:
	                    case languageParser.END:
	                    case languageParser.ENTITY:
	                    case languageParser.ENUM:
	                    case languageParser.EVENT:
	                    case languageParser.ESCAPE:
	                    case languageParser.EXACT:
	                    case languageParser.EXCEPT:
	                    case languageParser.EXCLUDING:
	                    case languageParser.EXTEND:
	                    case languageParser.FIRST:
	                    case languageParser.FLOATING:
	                    case languageParser.FOLLOWING:
	                    case languageParser.FULL:
	                    case languageParser.FUNCTION:
	                    case languageParser.GROUP:
	                    case languageParser.HAVING:
	                    case languageParser.INNER:
	                    case languageParser.INTERSECT:
	                    case languageParser.INTO:
	                    case languageParser.IS:
	                    case languageParser.JOIN:
	                    case languageParser.LAST:
	                    case languageParser.LEFT:
	                    case languageParser.LIKE:
	                    case languageParser.LIMIT:
	                    case languageParser.LOCALIZED:
	                    case languageParser.MANY:
	                    case languageParser.MINUS:
	                    case languageParser.MIXIN:
	                    case languageParser.NAMESPACE:
	                    case languageParser.NULLS:
	                    case languageParser.OFFSET:
	                    case languageParser.ONE:
	                    case languageParser.OR:
	                    case languageParser.ORDER:
	                    case languageParser.OUTER:
	                    case languageParser.PARAMETERS:
	                    case languageParser.PARTITION:
	                    case languageParser.PRECEDING:
	                    case languageParser.PROJECTION:
	                    case languageParser.REDIRECTED:
	                    case languageParser.RETURNS:
	                    case languageParser.RIGHT:
	                    case languageParser.ROW:
	                    case languageParser.ROWS:
	                    case languageParser.SERVICE:
	                    case languageParser.STORED:
	                    case languageParser.THEN:
	                    case languageParser.TO:
	                    case languageParser.TYPE:
	                    case languageParser.UNION:
	                    case languageParser.UNBOUNDED:
	                    case languageParser.UP:
	                    case languageParser.USING:
	                    case languageParser.VARIABLE:
	                    case languageParser.VIEW:
	                    case languageParser.Identifier:
	                        this.state = 3712;
	                        localctx.tail = this.annoSubValue();
	                         localctx.assignment.val.push( localctx.tail.val ); 
	                        break;
	                    case languageParser.T__27:
	                         localctx.upTo = null; 
	                        this.state = 3716;
	                        localctx.e = this.match(languageParser.T__27);
	                        this.state = 3720;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===languageParser.UP) {
	                            this.state = 3717;
	                            this.match(languageParser.UP);
	                            this.state = 3718;
	                            this.match(languageParser.TO);
	                            this.state = 3719;
	                            localctx.upTo = this.annoSubValue();
	                        }

	                        {
	                                    const item = { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) };
	                                    if (localctx.upTo) item.upTo = localctx.upTo.val;
	                                    localctx.assignment.val.push( item );
	                                    if (localctx.seenEllipsis === true)
	                                      this.error( 'syntax-unexpected-ellipsis', localctx.e,
	                                                  { '#': 'duplicate', code: '...', keyword: 'up to' } );
	                                    else
	                                      localctx.seenEllipsis =  !localctx.upTo || 'upTo'
	                                  }
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    this.state = 3729;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 3732;
	            localctx.cb = this.match(languageParser.T__13);

	                  if (localctx.seenEllipsis === 'upTo')
	                    this.error( 'syntax-missing-ellipsis', localctx.cb, // at closing bracket
	                                { code: '... up to', newcode: '...' } );
	                
	            break;
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.NULL:
	        case languageParser.Number:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3734;
	            localctx.v1 = this.literalValue();
	             this.assignAnnotationValue( localctx.assignment, localctx.v1.val ); 
	            break;
	        case languageParser.T__8:
	        case languageParser.T__9:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3739;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__8:
	                this.state = 3737;
	                localctx.plus = this.match(languageParser.T__8);
	                break;
	            case languageParser.T__9:
	                this.state = 3738;
	                localctx.min = this.match(languageParser.T__9);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3741;
	            localctx.num = this.match(languageParser.Number);
	              this.assignAnnotationValue( localctx.assignment, this.numberLiteral( localctx.plus||localctx.min ) ); 
	            break;
	        case languageParser.T__5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3743;
	            this.match(languageParser.T__5);
	            this.state = 3744;
	            localctx.cond = this.condition();
	             this.expressionAsAnnotationValue( localctx.assignment, localctx.cond.expr, (localctx.cond===null ? null : localctx.cond.start), (localctx.cond===null ? null : localctx.cond.stop) ); 
	            this.state = 3746;
	            this.match(languageParser.T__6);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.assignment ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flattenedValue(assignment) {
	    let localctx = new FlattenedValueContext(this, this._ctx, this.state, assignment);
	    this.enterRule(localctx, 270, languageParser.RULE_flattenedValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3751;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__25) {
	            this.state = 3750;
	            localctx.at = this.match(languageParser.T__25);
	        }

	        this.state = 3753;
	        this.annotationPath( localctx.val.name, 'name', localctx.at );
	        this.state = 3756;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__26) {
	            this.state = 3754;
	            this.match(languageParser.T__26);
	            this.state = 3755;
	            this.annotationPathVariant( localctx.val.name );
	        }

	        this.state = 3761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__4) {
	            this.state = 3758;
	            this.match(languageParser.T__4);
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3760;
	            this.annoValue( localctx.val );
	        }

	         localctx.assignment['$'+'flatten'].push( localctx.val ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedValue(struct) {
	    let localctx = new NamedValueContext(this, this._ctx, this.state, struct);
	    this.enterRule(localctx, 272, languageParser.RULE_namedValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__25) {
	            this.state = 3765;
	            localctx.at = this.match(languageParser.T__25);
	        }

	        this.state = 3768;
	        this.annotationPath( localctx.val.name, 'name', localctx.at );
	        this.state = 3774;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===languageParser.T__4) {
	            this.state = 3769;
	            this.match(languageParser.T__4);
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3771;
	            localctx.sub = this.annoSubValue();
	             this.assignAnnotationValue( localctx.val, localctx.sub.val ); 
	        }


	              if (!localctx.val.location) localctx.val.location = localctx.val.name.location;
	              this.addDef( localctx.val, localctx.struct, 'struct', null, localctx.val.name ); // TODO: re-check name
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annoSubValue() {
	    let localctx = new AnnoSubValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, languageParser.RULE_annoSubValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 3833;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3778;
	            this.match(languageParser.T__1);
	             localctx.val.struct = Object.create(null); localctx.val.literal = 'struct'; 
	             this.meltKeywordToIdentifier(); 
	            this.state = 3781;
	            this.namedValue( localctx.val );
	            this.state = 3787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===languageParser.T__2) {
	                this.state = 3782;
	                this.match(languageParser.T__2);

	                        this.meltKeywordToIdentifier();
	                        if (this.isStraightBefore("}")) break; // allow ',' before '}'
	                      
	                this.state = 3784;
	                this.namedValue( localctx.val );
	                this.state = 3789;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3790;
	            this.match(languageParser.T__3);
	            break;
	        case languageParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3792;
	            this.match(languageParser.T__10);
	             localctx.val.val = []; localctx.val.literal = 'array'; 
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__5) | (1 << languageParser.T__8) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__25) | (1 << languageParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)) | (1 << (languageParser.SERVICE - 97)) | (1 << (languageParser.STORED - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
	                this.state = 3795;
	                localctx.head = this.annoSubValue();
	                 localctx.val.val.push( localctx.head.val ); 
	                this.state = 3805;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===languageParser.T__2) {
	                    this.state = 3797;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore(']')) break; 
	                     this.meltKeywordToIdentifier(true); 
	                    this.state = 3800;
	                    localctx.tail = this.annoSubValue();
	                     localctx.val.val.push( localctx.tail.val ); 
	                    this.state = 3807;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 3810;
	            this.match(languageParser.T__13);
	            break;
	        case languageParser.T__26:
	        case languageParser.String:
	        case languageParser.QuotedLiteral:
	        case languageParser.Boolean:
	        case languageParser.NULL:
	        case languageParser.Number:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3811;
	            localctx.v1 = this.literalValue();
	             this.assignAnnotationValue( localctx.val, localctx.v1.val ); 
	            break;
	        case languageParser.T__8:
	        case languageParser.T__9:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3816;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case languageParser.T__8:
	                this.state = 3814;
	                localctx.plus = this.match(languageParser.T__8);
	                break;
	            case languageParser.T__9:
	                this.state = 3815;
	                localctx.min = this.match(languageParser.T__9);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3818;
	            localctx.num = this.match(languageParser.Number);
	             this.assignAnnotationValue( localctx.val, this.numberLiteral( localctx.plus||localctx.min ) ); 
	            break;
	        case languageParser.T__25:
	        case languageParser.ABSTRACT:
	        case languageParser.ACTION:
	        case languageParser.ACTIONS:
	        case languageParser.AND:
	        case languageParser.ANNOTATE:
	        case languageParser.ANNOTATION:
	        case languageParser.ARRAY:
	        case languageParser.ASC:
	        case languageParser.ASPECT:
	        case languageParser.ASSOCIATION:
	        case languageParser.BETWEEN:
	        case languageParser.COLUMNS:
	        case languageParser.COMPOSITION:
	        case languageParser.CONTEXT:
	        case languageParser.CROSS:
	        case languageParser.CURRENT:
	        case languageParser.DEFAULT:
	        case languageParser.DEFINE:
	        case languageParser.DEFINITIONS:
	        case languageParser.DESC:
	        case languageParser.ELEMENTS:
	        case languageParser.ELSE:
	        case languageParser.END:
	        case languageParser.ENTITY:
	        case languageParser.ENUM:
	        case languageParser.EVENT:
	        case languageParser.ESCAPE:
	        case languageParser.EXACT:
	        case languageParser.EXCEPT:
	        case languageParser.EXCLUDING:
	        case languageParser.EXTEND:
	        case languageParser.FIRST:
	        case languageParser.FLOATING:
	        case languageParser.FOLLOWING:
	        case languageParser.FULL:
	        case languageParser.FUNCTION:
	        case languageParser.GROUP:
	        case languageParser.HAVING:
	        case languageParser.INNER:
	        case languageParser.INTERSECT:
	        case languageParser.INTO:
	        case languageParser.IS:
	        case languageParser.JOIN:
	        case languageParser.LAST:
	        case languageParser.LEFT:
	        case languageParser.LIKE:
	        case languageParser.LIMIT:
	        case languageParser.LOCALIZED:
	        case languageParser.MANY:
	        case languageParser.MINUS:
	        case languageParser.MIXIN:
	        case languageParser.NAMESPACE:
	        case languageParser.NULLS:
	        case languageParser.OFFSET:
	        case languageParser.ONE:
	        case languageParser.OR:
	        case languageParser.ORDER:
	        case languageParser.OUTER:
	        case languageParser.PARAMETERS:
	        case languageParser.PARTITION:
	        case languageParser.PRECEDING:
	        case languageParser.PROJECTION:
	        case languageParser.REDIRECTED:
	        case languageParser.RETURNS:
	        case languageParser.RIGHT:
	        case languageParser.ROW:
	        case languageParser.ROWS:
	        case languageParser.SERVICE:
	        case languageParser.STORED:
	        case languageParser.THEN:
	        case languageParser.TO:
	        case languageParser.TYPE:
	        case languageParser.UNION:
	        case languageParser.UNBOUNDED:
	        case languageParser.UP:
	        case languageParser.USING:
	        case languageParser.VARIABLE:
	        case languageParser.VIEW:
	        case languageParser.Identifier:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__25) {
	                this.state = 3820;
	                localctx.at = this.match(languageParser.T__25);
	            }

	            this.state = 3823;
	            this.annotationPath( localctx.val, 'annoref', localctx.at );
	            this.state = 3826;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===languageParser.T__26) {
	                this.state = 3824;
	                this.match(languageParser.T__26);
	                this.state = 3825;
	                this.annotationPathVariant( localctx.val );
	            }

	            break;
	        case languageParser.T__5:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3828;
	            this.match(languageParser.T__5);
	            this.state = 3829;
	            localctx.cond = this.condition();
	             this.expressionAsAnnotationValue( localctx.val, localctx.cond.expr, (localctx.cond===null ? null : localctx.cond.start), (localctx.cond===null ? null : localctx.cond.stop) ); 
	            this.state = 3831;
	            this.match(languageParser.T__6);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.val); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalValue() {
	    let localctx = new LiteralValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, languageParser.RULE_literalValue);
	     localctx.tok =  this.getCurrentToken() 
	    try {
	        this.state = 3850;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case languageParser.T__26:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3835;
	            localctx.hash = this.match(languageParser.T__26);
	             this.reportUnexpectedSpace( localctx.hash );; this.meltKeywordToIdentifier(); 
	            this.state = 3837;
	            localctx.name = this.ident('enumref');
	             localctx.val = { literal: 'enum', sym: localctx.name.id } 
	            break;
	        case languageParser.NULL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3840;
	            this.match(languageParser.NULL);
	             localctx.val =  { literal: 'null', val: null } 
	            break;
	        case languageParser.Boolean:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3842;
	            this.match(languageParser.Boolean);
	             localctx.val =  { literal: 'boolean', val: localctx.tok.text.toLowerCase() != 'false' } 
	            break;
	        case languageParser.Number:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3844;
	            this.match(languageParser.Number);
	             localctx.val =  this.numberLiteral( '' ) 
	            break;
	        case languageParser.String:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3846;
	            this.match(languageParser.String);
	             localctx.val =  this.quotedLiteral( localctx.tok, 'string' ) 
	            break;
	        case languageParser.QuotedLiteral:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3848;
	            this.match(languageParser.QuotedLiteral);
	             localctx.val =  this.quotedLiteral( localctx.tok ) 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.val); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identNoKeyword(category) {
	    let localctx = new IdentNoKeywordContext(this, this._ctx, this.state, category);
	    this.enterRule(localctx, 278, languageParser.RULE_identNoKeyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3852;
	        this.match(languageParser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	         localctx.id =  this.identAst( null, localctx.category ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ident(category) {
	    let localctx = new IdentContext(this, this._ctx, this.state, category);
	    this.enterRule(localctx, 280, languageParser.RULE_ident);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3854;
	        _la = this._input.LA(1);
	        if(!(((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)) | (1 << (languageParser.FIRST - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)) | (1 << (languageParser.REDIRECTED - 92)) | (1 << (languageParser.RETURNS - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.STORED - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.id =  this.identAst( null, localctx.category ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

languageParser.EOF = antlr4.Token.EOF;
languageParser.T__0 = 1;
languageParser.T__1 = 2;
languageParser.T__2 = 3;
languageParser.T__3 = 4;
languageParser.T__4 = 5;
languageParser.T__5 = 6;
languageParser.T__6 = 7;
languageParser.T__7 = 8;
languageParser.T__8 = 9;
languageParser.T__9 = 10;
languageParser.T__10 = 11;
languageParser.T__11 = 12;
languageParser.T__12 = 13;
languageParser.T__13 = 14;
languageParser.T__14 = 15;
languageParser.T__15 = 16;
languageParser.T__16 = 17;
languageParser.T__17 = 18;
languageParser.T__18 = 19;
languageParser.T__19 = 20;
languageParser.T__20 = 21;
languageParser.T__21 = 22;
languageParser.T__22 = 23;
languageParser.T__23 = 24;
languageParser.T__24 = 25;
languageParser.T__25 = 26;
languageParser.T__26 = 27;
languageParser.T__27 = 28;
languageParser.WhiteSpace = 29;
languageParser.DocComment = 30;
languageParser.Comment = 31;
languageParser.LineComment = 32;
languageParser.String = 33;
languageParser.QuotedLiteral = 34;
languageParser.UnterminatedLiteral = 35;
languageParser.UnterminatedDelimitedIdentifier = 36;
languageParser.Boolean = 37;
languageParser.ALL = 38;
languageParser.ANY = 39;
languageParser.AS = 40;
languageParser.BY = 41;
languageParser.CASE = 42;
languageParser.CAST = 43;
languageParser.DISTINCT = 44;
languageParser.EXISTS = 45;
languageParser.FROM = 46;
languageParser.IN = 47;
languageParser.KEY = 48;
languageParser.NEW = 49;
languageParser.NOT = 50;
languageParser.NULL = 51;
languageParser.OF = 52;
languageParser.ON = 53;
languageParser.SELECT = 54;
languageParser.SOME = 55;
languageParser.WHEN = 56;
languageParser.WHERE = 57;
languageParser.WITH = 58;
languageParser.Number = 59;
languageParser.ABSTRACT = 60;
languageParser.ACTION = 61;
languageParser.ACTIONS = 62;
languageParser.AND = 63;
languageParser.ANNOTATE = 64;
languageParser.ANNOTATION = 65;
languageParser.ARRAY = 66;
languageParser.ASC = 67;
languageParser.ASPECT = 68;
languageParser.ASSOCIATION = 69;
languageParser.BETWEEN = 70;
languageParser.COLUMNS = 71;
languageParser.COMPOSITION = 72;
languageParser.CONTEXT = 73;
languageParser.CROSS = 74;
languageParser.CURRENT = 75;
languageParser.DEFAULT = 76;
languageParser.DEFINE = 77;
languageParser.DEFINITIONS = 78;
languageParser.DESC = 79;
languageParser.ELEMENTS = 80;
languageParser.ELSE = 81;
languageParser.END = 82;
languageParser.ENTITY = 83;
languageParser.ENUM = 84;
languageParser.EVENT = 85;
languageParser.ESCAPE = 86;
languageParser.EXACT = 87;
languageParser.EXCEPT = 88;
languageParser.EXCLUDING = 89;
languageParser.EXTEND = 90;
languageParser.FIRST = 91;
languageParser.FLOATING = 92;
languageParser.FOLLOWING = 93;
languageParser.FULL = 94;
languageParser.FUNCTION = 95;
languageParser.GROUP = 96;
languageParser.HAVING = 97;
languageParser.INNER = 98;
languageParser.INTERSECT = 99;
languageParser.INTO = 100;
languageParser.IS = 101;
languageParser.JOIN = 102;
languageParser.LAST = 103;
languageParser.LEFT = 104;
languageParser.LIKE = 105;
languageParser.LIMIT = 106;
languageParser.LOCALIZED = 107;
languageParser.MANY = 108;
languageParser.MINUS = 109;
languageParser.MIXIN = 110;
languageParser.NAMESPACE = 111;
languageParser.NULLS = 112;
languageParser.OFFSET = 113;
languageParser.ONE = 114;
languageParser.OR = 115;
languageParser.ORDER = 116;
languageParser.OUTER = 117;
languageParser.PARAMETERS = 118;
languageParser.PARTITION = 119;
languageParser.PRECEDING = 120;
languageParser.PROJECTION = 121;
languageParser.REDIRECTED = 122;
languageParser.RETURNS = 123;
languageParser.RIGHT = 124;
languageParser.ROW = 125;
languageParser.ROWS = 126;
languageParser.SERVICE = 127;
languageParser.STORED = 128;
languageParser.THEN = 129;
languageParser.TO = 130;
languageParser.TYPE = 131;
languageParser.UNION = 132;
languageParser.UNBOUNDED = 133;
languageParser.UP = 134;
languageParser.USING = 135;
languageParser.VARIABLE = 136;
languageParser.VIEW = 137;
languageParser.Identifier = 138;
languageParser.IllegalToken = 139;
languageParser.ELEMENT = 140;
languageParser.MASKED = 141;
languageParser.VIRTUAL = 142;
languageParser.OVER = 143;
languageParser.HelperToken1 = 144;
languageParser.HelperToken2 = 145;
languageParser.HideAlternatives = 146;
languageParser.GenericExpr = 147;
languageParser.GenericSeparator = 148;
languageParser.GenericIntro = 149;
languageParser.DOTbeforeBRACE = 150;
languageParser.COMPOSITIONofBRACE = 151;
languageParser.SemicolonTopLevel = 152;

languageParser.RULE_start = 0;
languageParser.RULE_namespaceDeclaration = 1;
languageParser.RULE_usingDeclaration = 2;
languageParser.RULE_usingProxy = 3;
languageParser.RULE_artifactDefOrExtend = 4;
languageParser.RULE_optArtifactsBlock = 5;
languageParser.RULE_requiredSemi = 6;
languageParser.RULE_optionalSemi = 7;
languageParser.RULE_annotationDef = 8;
languageParser.RULE_serviceDef = 9;
languageParser.RULE_contextDef = 10;
languageParser.RULE_eventDef = 11;
languageParser.RULE_viewDef = 12;
languageParser.RULE_entityDef = 13;
languageParser.RULE_aspectDef = 14;
languageParser.RULE_elementsAndOptActions = 15;
languageParser.RULE_typeDef = 16;
languageParser.RULE_actionFunctionMainDef = 17;
languageParser.RULE_actionFunctionDef = 18;
languageParser.RULE_parameterDef = 19;
languageParser.RULE_parameterListDef = 20;
languageParser.RULE_enumSymbolDef = 21;
languageParser.RULE_elementDef = 22;
languageParser.RULE_elementDefInner = 23;
languageParser.RULE_elementType = 24;
languageParser.RULE_elementProperties = 25;
languageParser.RULE_defaultAndNullability = 26;
languageParser.RULE_defaultValue = 27;
languageParser.RULE_extendArtifact = 28;
languageParser.RULE_extendService = 29;
languageParser.RULE_extendContext = 30;
languageParser.RULE_extendEntityOrAspect = 31;
languageParser.RULE_extendForEntity = 32;
languageParser.RULE_extendProjection = 33;
languageParser.RULE_extendType = 34;
languageParser.RULE_extendWithOptElementsOrType = 35;
languageParser.RULE_extendWithOptElementsNoWith = 36;
languageParser.RULE_elementDefOrExtend = 37;
languageParser.RULE_extendElement = 38;
languageParser.RULE_annotateArtifact = 39;
languageParser.RULE_annotateArtifactActions = 40;
languageParser.RULE_annotateArtifactElements = 41;
languageParser.RULE_annotateElement = 42;
languageParser.RULE_annotateAction = 43;
languageParser.RULE_annotateReturns = 44;
languageParser.RULE_annotateParam = 45;
languageParser.RULE_includeRef = 46;
languageParser.RULE_typeSpec = 47;
languageParser.RULE_returnTypeSpec = 48;
languageParser.RULE_typeSpecCont = 49;
languageParser.RULE_typeSpecSemi = 50;
languageParser.RULE_typeStruct = 51;
languageParser.RULE_typeCompoStruct = 52;
languageParser.RULE_typeArray = 53;
languageParser.RULE_typeAssociationBase = 54;
languageParser.RULE_typeAssociationCont = 55;
languageParser.RULE_typeAssociationElementCont = 56;
languageParser.RULE_typeToOne = 57;
languageParser.RULE_typeToMany = 58;
languageParser.RULE_cardinality = 59;
languageParser.RULE_targetCardinality = 60;
languageParser.RULE_optInvisibleNullability = 61;
languageParser.RULE_nullability = 62;
languageParser.RULE_foreignKey = 63;
languageParser.RULE_typeTypeOf = 64;
languageParser.RULE_typeRefOptArgs = 65;
languageParser.RULE_typeRefArgs = 66;
languageParser.RULE_typeNamedArgList = 67;
languageParser.RULE_typeNamedArg = 68;
languageParser.RULE_queryEOF = 69;
languageParser.RULE_projectionSpec = 70;
languageParser.RULE_projectionClauses = 71;
languageParser.RULE_queryExpression = 72;
languageParser.RULE_queryExpressionCont = 73;
languageParser.RULE_queryPrimary = 74;
languageParser.RULE_selectQuery = 75;
languageParser.RULE_querySource = 76;
languageParser.RULE_tableExpression = 77;
languageParser.RULE_tableExpressionCont = 78;
languageParser.RULE_tableTerm = 79;
languageParser.RULE_fromRefWithOptAlias = 80;
languageParser.RULE_tableOrQueryParenthesis = 81;
languageParser.RULE_tableOrQueryExpressionCont = 82;
languageParser.RULE_fromPath = 83;
languageParser.RULE_fromArguments = 84;
languageParser.RULE_excludingClause = 85;
languageParser.RULE_projectionExclusion = 86;
languageParser.RULE_mixinElementDef = 87;
languageParser.RULE_selectItemDef = 88;
languageParser.RULE_selectItemDefBody = 89;
languageParser.RULE_bracedSelectItemListDef = 90;
languageParser.RULE_selectItemInlineList = 91;
languageParser.RULE_selectItemInlineDef = 92;
languageParser.RULE_orderByClause = 93;
languageParser.RULE_limitClause = 94;
languageParser.RULE_orderBySpec = 95;
languageParser.RULE_joinOp = 96;
languageParser.RULE_joinCardinality = 97;
languageParser.RULE_conditionEOF = 98;
languageParser.RULE_condition = 99;
languageParser.RULE_conditionCont = 100;
languageParser.RULE_conditionTerm = 101;
languageParser.RULE_conditionPrimary = 102;
languageParser.RULE_comparisonCont = 103;
languageParser.RULE_expression = 104;
languageParser.RULE_expressionCont = 105;
languageParser.RULE_expressionPrimary = 106;
languageParser.RULE_conditionOrQueryParenthesis = 107;
languageParser.RULE_specialFunction = 108;
languageParser.RULE_simplePath = 109;
languageParser.RULE_valuePath = 110;
languageParser.RULE_pathArguments = 111;
languageParser.RULE_namedExpression = 112;
languageParser.RULE_funcExpression = 113;
languageParser.RULE_overClause = 114;
languageParser.RULE_partitionByClause = 115;
languageParser.RULE_funcOrderByClause = 116;
languageParser.RULE_exprOrderByClause = 117;
languageParser.RULE_orderBySpecInExpr = 118;
languageParser.RULE_windowFrameClause = 119;
languageParser.RULE_windowFrameBoundSpec = 120;
languageParser.RULE_windowFrameStartSpec = 121;
languageParser.RULE_cardinalityAndFilter = 122;
languageParser.RULE_optionalCardinality = 123;
languageParser.RULE_filterWhereClause = 124;
languageParser.RULE_optionalWhereForFilter = 125;
languageParser.RULE_annotationAssignment_fix = 126;
languageParser.RULE_annotationAssignment_ll1 = 127;
languageParser.RULE_annotationAssignment_atn = 128;
languageParser.RULE_annotationAssignment_paren = 129;
languageParser.RULE_annotationAssignment_1 = 130;
languageParser.RULE_annotationPath = 131;
languageParser.RULE_annotationPathVariant = 132;
languageParser.RULE_annoValue = 133;
languageParser.RULE_annoValueBase = 134;
languageParser.RULE_flattenedValue = 135;
languageParser.RULE_namedValue = 136;
languageParser.RULE_annoSubValue = 137;
languageParser.RULE_literalValue = 138;
languageParser.RULE_identNoKeyword = 139;
languageParser.RULE_ident = 140;

class StartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_start;
        this.source = null
        this._sync = 'recover'
    }

	EOF() {
	    return this.getToken(languageParser.EOF, 0);
	};

	usingDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UsingDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(UsingDeclarationContext,i);
	    }
	};

	namespaceDeclaration() {
	    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
	};

	artifactDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArtifactDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ArtifactDefOrExtendContext,i);
	    }
	};


}



class NamespaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, source) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namespaceDeclaration;
        this.source = null
        this.decl = {}
        this.source = source || null;
    }

	NAMESPACE() {
	    return this.getToken(languageParser.NAMESPACE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};


}



class UsingDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, source) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_usingDeclaration;
        this.source = null
        this.decl = {}
        this.str = null; // Token
        this.source = source || null;
    }

	USING() {
	    return this.getToken(languageParser.USING, 0);
	};

	FROM() {
	    return this.getToken(languageParser.FROM, 0);
	};

	usingProxy = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UsingProxyContext);
	    } else {
	        return this.getTypedRuleContext(UsingProxyContext,i);
	    }
	};

	String() {
	    return this.getToken(languageParser.String, 0);
	};


}



class UsingProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer, proxy) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_usingProxy;
        this.outer = null
        this.proxy = null
        this.name = null; // IdentContext
        this.outer = outer || null;
        this.proxy = proxy || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};


}



class ArtifactDefOrExtendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_artifactDefOrExtend;
        this.outer = null
        this.defOnly = false
        this.art = new parser.XsnArtifact()
        this.extend = null; // Token
        this.annotate = null; // Token
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }

	annotateArtifact() {
	    return this.getTypedRuleContext(AnnotateArtifactContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	EXTEND() {
	    return this.getToken(languageParser.EXTEND, 0);
	};

	ANNOTATE() {
	    return this.getToken(languageParser.ANNOTATE, 0);
	};

	serviceDef() {
	    return this.getTypedRuleContext(ServiceDefContext,0);
	};

	contextDef() {
	    return this.getTypedRuleContext(ContextDefContext,0);
	};

	entityDef() {
	    return this.getTypedRuleContext(EntityDefContext,0);
	};

	typeDef() {
	    return this.getTypedRuleContext(TypeDefContext,0);
	};

	aspectDef() {
	    return this.getTypedRuleContext(AspectDefContext,0);
	};

	annotationDef() {
	    return this.getTypedRuleContext(AnnotationDefContext,0);
	};

	viewDef() {
	    return this.getTypedRuleContext(ViewDefContext,0);
	};

	eventDef() {
	    return this.getTypedRuleContext(EventDefContext,0);
	};

	actionFunctionMainDef() {
	    return this.getTypedRuleContext(ActionFunctionMainDefContext,0);
	};

	extendService() {
	    return this.getTypedRuleContext(ExtendServiceContext,0);
	};

	extendContext() {
	    return this.getTypedRuleContext(ExtendContextContext,0);
	};

	extendEntityOrAspect() {
	    return this.getTypedRuleContext(ExtendEntityOrAspectContext,0);
	};

	extendProjection() {
	    return this.getTypedRuleContext(ExtendProjectionContext,0);
	};

	extendType() {
	    return this.getTypedRuleContext(ExtendTypeContext,0);
	};

	extendArtifact() {
	    return this.getTypedRuleContext(ExtendArtifactContext,0);
	};

	DEFINE() {
	    return this.getToken(languageParser.DEFINE, 0);
	};


}



class OptArtifactsBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optArtifactsBlock;
        this.art = null
        this.defOnly = false
        this.art = art || null;
        this.defOnly = defOnly || null;
    }

	artifactDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArtifactDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ArtifactDefOrExtendContext,i);
	    }
	};


}



class RequiredSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_requiredSemi;
    }



}



class OptionalSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalSemi;
    }



}



class AnnotationDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.annotation = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeSpecSemi() {
	    return this.getTypedRuleContext(TypeSpecSemiContext,0);
	};

	ANNOTATION() {
	    return this.getToken(languageParser.ANNOTATION, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class ServiceDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_serviceDef;
        this.art = null
        this.outer = null
        this.defOnly = false
        this.name = new parser.XsnName();
        this.art = art || null;
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }

	SERVICE() {
	    return this.getToken(languageParser.SERVICE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class ContextDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_contextDef;
        this.art = null
        this.outer = null
        this.defOnly = false
        this.name = new parser.XsnName();
        this.art = art || null;
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }

	CONTEXT() {
	    return this.getToken(languageParser.CONTEXT, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class EventDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_eventDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName();
        this.qp = null; // ProjectionSpecContext
        this.art = art || null;
        this.outer = outer || null;
    }

	EVENT() {
	    return this.getToken(languageParser.EVENT, 0);
	};

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	projectionSpec() {
	    return this.getTypedRuleContext(ProjectionSpecContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class ViewDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_viewDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName();
        this.v = null; // Token
        this.qe = null; // QueryExpressionContext
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	VIEW() {
	    return this.getToken(languageParser.VIEW, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	PARAMETERS() {
	    return this.getToken(languageParser.PARAMETERS, 0);
	};

	parameterDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDefContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDefContext,i);
	    }
	};

	HideAlternatives() {
	    return this.getToken(languageParser.HideAlternatives, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};


}



class EntityDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_entityDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.qe = null; // QueryExpressionContext
        this.qp = null; // ProjectionSpecContext
        this.art = art || null;
        this.outer = outer || null;
    }

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	projectionClauses() {
	    return this.getTypedRuleContext(ProjectionClausesContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	projectionSpec() {
	    return this.getTypedRuleContext(ProjectionSpecContext,0);
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};


}



class AspectDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_aspectDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.abs = null; // Token
        this.ent = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ASPECT() {
	    return this.getToken(languageParser.ASPECT, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	elementsAndOptActions() {
	    return this.getTypedRuleContext(ElementsAndOptActionsContext,0);
	};

	HideAlternatives() {
	    return this.getToken(languageParser.HideAlternatives, 0);
	};

	ABSTRACT() {
	    return this.getToken(languageParser.ABSTRACT, 0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};


}



class ElementsAndOptActionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementsAndOptActions;
        this.art = null
        this.art = art || null;
    }

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};


}



class TypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeSpecSemi() {
	    return this.getTypedRuleContext(TypeSpecSemiContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class ActionFunctionMainDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_actionFunctionMainDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	ACTION() {
	    return this.getToken(languageParser.ACTION, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	FUNCTION() {
	    return this.getToken(languageParser.FUNCTION, 0);
	};

	returnTypeSpec() {
	    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class ActionFunctionDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_actionFunctionDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null; // IdentContext
        this.outer = outer || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ACTION() {
	    return this.getToken(languageParser.ACTION, 0);
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	FUNCTION() {
	    return this.getToken(languageParser.FUNCTION, 0);
	};

	returnTypeSpec() {
	    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class ParameterDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_parameterDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null; // IdentContext
        this.outer = outer || null;
    }

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};


}



class ParameterListDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_parameterListDef;
        this.art = null
        this.art = art || null;
    }

	parameterDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDefContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDefContext,i);
	    }
	};


}



class EnumSymbolDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_enumSymbolDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null; // IdentContext
        this.val = null; // LiteralValueContext
        this.plus = null; // Token
        this.min = null; // Token
        this.outer = outer || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};


}



class ElementDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.outer = outer || null;
    }

	elementDefInner() {
	    return this.getTypedRuleContext(ElementDefInnerContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class ElementDefInnerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer, explicitElement) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDefInner;
        this.art = null
        this.outer = null
        this.explicitElement = false
        this.virtual = null; // Token
        this.key = null; // Token
        this.masked = null; // Token
        this.name = null; // IdentContext
        this.eq = null; // Token
        this.e = null; // ExpressionContext
        this.stored = null; // Token
        this.art = art || null;
        this.outer = outer || null;
        this.explicitElement = explicitElement || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ELEMENT() {
	    return this.getToken(languageParser.ELEMENT, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	VIRTUAL() {
	    return this.getToken(languageParser.VIRTUAL, 0);
	};

	KEY() {
	    return this.getToken(languageParser.KEY, 0);
	};

	MASKED() {
	    return this.getToken(languageParser.MASKED, 0);
	};

	nullability() {
	    return this.getTypedRuleContext(NullabilityContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	STORED() {
	    return this.getToken(languageParser.STORED, 0);
	};


}



class ElementTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementType;
        this.art = null
        this.tokenAtAnnoPos = null
        this.one = null; // Token
        this.many = null; // Token
        this.array = null; // Token
        this.of = null; // Token
        this.l = null; // Token
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	typeCompoStruct() {
	    return this.getTypedRuleContext(TypeCompoStructContext,0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeAssociationElementCont() {
	    return this.getTypedRuleContext(TypeAssociationElementContContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ONE() {
	    return this.getToken(languageParser.ONE, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	optInvisibleNullability() {
	    return this.getTypedRuleContext(OptInvisibleNullabilityContext,0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	elementProperties() {
	    return this.getTypedRuleContext(ElementPropertiesContext,0);
	};


}



class ElementPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, elem) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementProperties;
        this.elem = null
        this.e = null; // ExpressionContext
        this.stored = null; // Token
        this.elem = elem || null;
    }

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STORED() {
	    return this.getToken(languageParser.STORED, 0);
	};


}



class DefaultAndNullabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, elem) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_defaultAndNullability;
        this.elem = null
        this.elem = elem || null;
    }

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	nullability() {
	    return this.getTypedRuleContext(NullabilityContext,0);
	};


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_defaultValue;
        this.art = null
        this.elem = null
        this.elements = {}
        this.expr = null; // ExpressionContext
        this.art = art || null;
    }

	DEFAULT() {
	    return this.getToken(languageParser.DEFAULT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};


}



class ExtendArtifactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendArtifact;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.elemName = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	extendWithOptElementsOrType() {
	    return this.getTypedRuleContext(ExtendWithOptElementsOrTypeContext,0);
	};

	extendWithOptElementsNoWith() {
	    return this.getTypedRuleContext(ExtendWithOptElementsNoWithContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ELEMENTS() {
	    return this.getToken(languageParser.ELEMENTS, 0);
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	typeNamedArgList() {
	    return this.getTypedRuleContext(TypeNamedArgListContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	DEFINITIONS() {
	    return this.getToken(languageParser.DEFINITIONS, 0);
	};

	COLUMNS() {
	    return this.getToken(languageParser.COLUMNS, 0);
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	artifactDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArtifactDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ArtifactDefOrExtendContext,i);
	    }
	};

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};


}



class ExtendServiceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendService;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	SERVICE() {
	    return this.getToken(languageParser.SERVICE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class ExtendContextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendContext;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	CONTEXT() {
	    return this.getToken(languageParser.CONTEXT, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};


}



class ExtendEntityOrAspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendEntityOrAspect;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ASPECT() {
	    return this.getToken(languageParser.ASPECT, 0);
	};

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	extendForEntity() {
	    return this.getTypedRuleContext(ExtendForEntityContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class ExtendForEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendForEntity;
        this.art = null
        this.art = art || null;
    }

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};


}



class ExtendProjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendProjection;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	PROJECTION() {
	    return this.getToken(languageParser.PROJECTION, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};


}



class ExtendTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendType;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	extendWithOptElementsNoWith() {
	    return this.getTypedRuleContext(ExtendWithOptElementsNoWithContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	typeNamedArgList() {
	    return this.getTypedRuleContext(TypeNamedArgListContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};


}



class ExtendWithOptElementsOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendWithOptElementsOrType;
        this.art = null
        this.art = art || null;
    }

	extendWithOptElementsNoWith() {
	    return this.getTypedRuleContext(ExtendWithOptElementsNoWithContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ELEMENTS() {
	    return this.getToken(languageParser.ELEMENTS, 0);
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	typeNamedArgList() {
	    return this.getTypedRuleContext(TypeNamedArgListContext,0);
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};


}



class ExtendWithOptElementsNoWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendWithOptElementsNoWith;
        this.art = null
        this.art = art || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};


}



class ElementDefOrExtendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer, explicitElement) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDefOrExtend;
        this.outer = null
        this.explicitElement = false
        this.art = new parser.XsnArtifact()
        this.outer = outer || null;
        this.explicitElement = explicitElement || null;
    }

	EXTEND() {
	    return this.getToken(languageParser.EXTEND, 0);
	};

	extendElement() {
	    return this.getTypedRuleContext(ExtendElementContext,0);
	};

	elementDefInner() {
	    return this.getTypedRuleContext(ElementDefInnerContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class ExtendElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendElement;
        this.art = null
        this.outer = null
        this.name = null; // IdentContext
        this.art = art || null;
        this.outer = outer || null;
    }

	extendWithOptElementsOrType() {
	    return this.getTypedRuleContext(ExtendWithOptElementsOrTypeContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ELEMENT() {
	    return this.getToken(languageParser.ELEMENT, 0);
	};


}



class AnnotateArtifactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateArtifact;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.elemName = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	annotateArtifactElements() {
	    return this.getTypedRuleContext(AnnotateArtifactElementsContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotateArtifactActions() {
	    return this.getTypedRuleContext(AnnotateArtifactActionsContext,0);
	};

	annotateParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateParamContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateParamContext,i);
	    }
	};

	annotateReturns() {
	    return this.getTypedRuleContext(AnnotateReturnsContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class AnnotateArtifactActionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateArtifactActions;
        this.art = null
        this.art = art || null;
    }

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	annotateAction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateActionContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateActionContext,i);
	    }
	};


}



class AnnotateArtifactElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateArtifactElements;
        this.art = null
        this.art = art || null;
    }

	annotateElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateElementContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateElementContext,i);
	    }
	};


}



class AnnotateElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateElement;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null; // IdentContext
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotateElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateElementContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateElementContext,i);
	    }
	};


}



class AnnotateActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateAction;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null; // IdentContext
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotateReturns() {
	    return this.getTypedRuleContext(AnnotateReturnsContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotateParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateParamContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateParamContext,i);
	    }
	};


}



class AnnotateReturnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateReturns;
        this.art = null
        this.ret = null; // Token
        this.art = art || null;
    }

	RETURNS() {
	    return this.getToken(languageParser.RETURNS, 0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotateElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateElementContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateElementContext,i);
	    }
	};


}



class AnnotateParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateParam;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.param = null; // IdentContext
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class IncludeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_includeRef;
        this.art = null
        this.incl = {}
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};


}



class TypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpec;
        this.art = null
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	typeSpecCont() {
	    return this.getTypedRuleContext(TypeSpecContContext,0);
	};


}



class ReturnTypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_returnTypeSpec;
        this.art = null
        this.ret = null; // Token
        this.art = art || null;
    }

	typeSpecCont() {
	    return this.getTypedRuleContext(TypeSpecContContext,0);
	};

	RETURNS() {
	    return this.getToken(languageParser.RETURNS, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class TypeSpecContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpecCont;
        this.art = null
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	typeArray() {
	    return this.getTypedRuleContext(TypeArrayContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};


}



class TypeSpecSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpecSemi;
        this.art = null
        this.tokenAtAnnoPos = null
        this.many = null; // Token
        this.array = null; // Token
        this.of = null; // Token
        this.l = null; // Token
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	HelperToken1() {
	    return this.getToken(languageParser.HelperToken1, 0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	optInvisibleNullability() {
	    return this.getTypedRuleContext(OptInvisibleNullabilityContext,0);
	};

	typeAssociationCont() {
	    return this.getTypedRuleContext(TypeAssociationContContext,0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	typeRefArgs() {
	    return this.getTypedRuleContext(TypeRefArgsContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};


}



class TypeStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, attachLoc) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeStruct;
        this.art = null
        this.attachLoc = false
        this.art = art || null;
        this.attachLoc = attachLoc || null;
    }

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};


}



class TypeCompoStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeCompoStruct;
        this.art = null
        this.art = art || null;
    }

	COMPOSITIONofBRACE() {
	    return this.getToken(languageParser.COMPOSITIONofBRACE, 0);
	};

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};


}



class TypeArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeArray;
        this.art = null
        this.array = null; // Token
        this.of = null; // Token
        this.many = null; // Token
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};


}



class TypeAssociationBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, handleTypeCompo) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationBase;
        this.art = null
        this.handleTypeCompo = null
        this.assoc = null; // Token
        this.compo = null; // Token
        this.art = art || null;
        this.handleTypeCompo = handleTypeCompo || null;
    }

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	ASSOCIATION() {
	    return this.getToken(languageParser.ASSOCIATION, 0);
	};

	COMPOSITION() {
	    return this.getToken(languageParser.COMPOSITION, 0);
	};

	cardinality() {
	    return this.getTypedRuleContext(CardinalityContext,0);
	};


}



class TypeAssociationContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationCont;
        this.art = null
        this.cond = null; // ConditionContext
        this.art = art || null;
    }

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	foreignKey = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForeignKeyContext);
	    } else {
	        return this.getTypedRuleContext(ForeignKeyContext,i);
	    }
	};


}



class TypeAssociationElementContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationElementCont;
        this.art = null
        this.cond = null; // ConditionContext
        this.art = art || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	foreignKey = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForeignKeyContext);
	    } else {
	        return this.getTypedRuleContext(ForeignKeyContext,i);
	    }
	};


}



class TypeToOneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeToOne;
        this.art = null
        this.one = null; // Token
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ONE() {
	    return this.getToken(languageParser.ONE, 0);
	};


}



class TypeToManyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeToMany;
        this.art = null
        this.many = null; // Token
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};


}



class CardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_cardinality;
        this.art = null
        this.card = {}
        this.lbrack = null; // Token
        this.art = art || null;
    }

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Number);
	    } else {
	        return this.getToken(languageParser.Number, i);
	    }
	};


	targetCardinality() {
	    return this.getTypedRuleContext(TargetCardinalityContext,0);
	};


}



class TargetCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, card) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_targetCardinality;
        this.card = null
        this.card = card || null;
    }

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Number);
	    } else {
	        return this.getToken(languageParser.Number, i);
	    }
	};



}



class OptInvisibleNullabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optInvisibleNullability;
        this.art = null
        this.n1 = null; // Token
        this.n2 = null; // Token
        this.art = art || null;
    }

	HelperToken1() {
	    return this.getToken(languageParser.HelperToken1, 0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};

	HelperToken2() {
	    return this.getToken(languageParser.HelperToken2, 0);
	};


}



class NullabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_nullability;
        this.art = null
        this.n1 = null; // Token
        this.n2 = null; // Token
        this.art = art || null;
    }

	NOT() {
	    return this.getToken(languageParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};


}



class ForeignKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_foreignKey;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.elem = {}
        this.name = null; // IdentContext
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};


}



class TypeTypeOfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeTypeOf;
        this.art = null
        this._sync = 'nop'
        this.t = null; // Token
        this.o = null; // Token
        this.art = art || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};


}



class TypeRefOptArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeRefOptArgs;
        this.art = null
        this.art = art || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	typeRefArgs() {
	    return this.getTypedRuleContext(TypeRefArgsContext,0);
	};


}



class TypeRefArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeRefArgs;
        this.art = null
        this.paren = null; // Token
        this.head = null; // Token
        this.v = null; // Token
        this.f = null; // Token
        this.tail = null; // Token
        this.art = art || null;
    }

	typeNamedArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNamedArgContext);
	    } else {
	        return this.getTypedRuleContext(TypeNamedArgContext,i);
	    }
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Number);
	    } else {
	        return this.getToken(languageParser.Number, i);
	    }
	};


	VARIABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.VARIABLE);
	    } else {
	        return this.getToken(languageParser.VARIABLE, i);
	    }
	};


	FLOATING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.FLOATING);
	    } else {
	        return this.getToken(languageParser.FLOATING, i);
	    }
	};



}



class TypeNamedArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeNamedArgList;
        this.art = null
        this.paren = null; // Token
        this.art = art || null;
    }

	typeNamedArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNamedArgContext);
	    } else {
	        return this.getTypedRuleContext(TypeNamedArgContext,i);
	    }
	};


}



class TypeNamedArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeNamedArg;
        this.art = null
        this.arg = ''
        this.name = null; // IdentContext
        this.v = null; // Token
        this.f = null; // Token
        this.art = art || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	VARIABLE() {
	    return this.getToken(languageParser.VARIABLE, 0);
	};

	FLOATING() {
	    return this.getToken(languageParser.FLOATING, 0);
	};


}



class QueryEOFContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryEOF;
        this.query = null
        this.q = null; // QueryExpressionContext
    }

	EOF() {
	    return this.getToken(languageParser.EOF, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};


}



class ProjectionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionSpec;
        this.query = null
        this.src = null
        this.proj = null; // Token
        this.aliasName = null; // IdentContext
    }

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	fromPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromPathContext);
	    } else {
	        return this.getTypedRuleContext(FromPathContext,i);
	    }
	};

	PROJECTION() {
	    return this.getToken(languageParser.PROJECTION, 0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	bracedSelectItemListDef() {
	    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
	};

	excludingClause() {
	    return this.getTypedRuleContext(ExcludingClauseContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};


}



class ProjectionClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionClauses;
        this.query = null
        this.cond = null; // ConditionContext
        this.e1 = null; // ExpressionContext
        this.en = null; // ExpressionContext
        this.having = null; // ConditionContext
        this.ob = null; // OrderByClauseContext
        this.lc = null; // LimitClauseContext
        this.query = query || null;
    }

	WHERE() {
	    return this.getToken(languageParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};


}



class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryExpression;
        this.query = null
        this.qt1 = null; // QueryPrimaryContext
        this.qec = null; // QueryExpressionContContext
    }

	queryPrimary() {
	    return this.getTypedRuleContext(QueryPrimaryContext,0);
	};

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};


}



class QueryExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inQuery) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryExpressionCont;
        this.inQuery = null
        this.query = inQuery
        this.op = null; // Token
        this.quant = null; // Token
        this.qp = null; // QueryPrimaryContext
        this.ob = null; // OrderByClauseContext
        this.lc = null; // LimitClauseContext
        this.inQuery = inQuery || null;
    }

	queryPrimary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryPrimaryContext);
	    } else {
	        return this.getTypedRuleContext(QueryPrimaryContext,i);
	    }
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.UNION);
	    } else {
	        return this.getToken(languageParser.UNION, i);
	    }
	};


	EXCEPT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.EXCEPT);
	    } else {
	        return this.getToken(languageParser.EXCEPT, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.MINUS);
	    } else {
	        return this.getToken(languageParser.MINUS, i);
	    }
	};


	INTERSECT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.INTERSECT);
	    } else {
	        return this.getToken(languageParser.INTERSECT, i);
	    }
	};


	DISTINCT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.DISTINCT);
	    } else {
	        return this.getToken(languageParser.DISTINCT, i);
	    }
	};


	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ALL);
	    } else {
	        return this.getToken(languageParser.ALL, i);
	    }
	};



}



class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryPrimary;
        this.query = {}
        this.open = null; // Token
        this.qe = null; // QueryExpressionContext
        this.close = null; // Token
        this.qpnp = null; // SelectQueryContext
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};


}



class SelectQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectQuery;
        this.query = {}
        this.select = null; // Token
        this.mixin = null; // Token
        this.ad = null; // Token
        this.cond = null; // ConditionContext
        this.e1 = null; // ExpressionContext
        this.en = null; // ExpressionContext
        this.having = null; // ConditionContext
    }

	SELECT() {
	    return this.getToken(languageParser.SELECT, 0);
	};

	FROM() {
	    return this.getToken(languageParser.FROM, 0);
	};

	querySource() {
	    return this.getTypedRuleContext(QuerySourceContext,0);
	};

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(languageParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	INTO() {
	    return this.getToken(languageParser.INTO, 0);
	};

	bracedSelectItemListDef() {
	    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
	};

	excludingClause() {
	    return this.getTypedRuleContext(ExcludingClauseContext,0);
	};

	MIXIN() {
	    return this.getToken(languageParser.MIXIN, 0);
	};

	ALL() {
	    return this.getToken(languageParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(languageParser.DISTINCT, 0);
	};

	mixinElementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MixinElementDefContext);
	    } else {
	        return this.getTypedRuleContext(MixinElementDefContext,i);
	    }
	};


}



class QuerySourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_querySource;
        this.query = null
        this.t1 = null; // TableExpressionContext
        this.tn = null; // TableExpressionContext
        this.query = query || null;
    }

	tableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TableExpressionContext,i);
	    }
	};


}



class TableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableExpression;
        this.table = null
        this.qt = null; // TableTermContext
        this.tec = null; // TableExpressionContContext
    }

	tableTerm() {
	    return this.getTypedRuleContext(TableTermContext,0);
	};

	tableExpressionCont() {
	    return this.getTypedRuleContext(TableExpressionContContext,0);
	};


}



class TableExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inTable) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableExpressionCont;
        this.inTable = null
        this.table = inTable
        this.join = null; // JoinOpContext
        this.te = null; // TableExpressionContext
        this.cond = null; // ConditionContext
        this.crj = null; // Token
        this.jn = null; // Token
        this.t = null; // TableTermContext
        this.inTable = inTable || null;
    }

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ON);
	    } else {
	        return this.getToken(languageParser.ON, i);
	    }
	};


	joinOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinOpContext);
	    } else {
	        return this.getTypedRuleContext(JoinOpContext,i);
	    }
	};

	tableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TableExpressionContext,i);
	    }
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	CROSS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.CROSS);
	    } else {
	        return this.getToken(languageParser.CROSS, i);
	    }
	};


	JOIN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.JOIN);
	    } else {
	        return this.getToken(languageParser.JOIN, i);
	    }
	};


	tableTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableTermContext);
	    } else {
	        return this.getTypedRuleContext(TableTermContext,i);
	    }
	};


}



class TableTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableTerm;
        this.table = null
        this.ttnp = null; // FromRefWithOptAliasContext
        this.ttp = null; // TableOrQueryParenthesisContext
    }

	fromRefWithOptAlias() {
	    return this.getTypedRuleContext(FromRefWithOptAliasContext,0);
	};

	tableOrQueryParenthesis() {
	    return this.getTypedRuleContext(TableOrQueryParenthesisContext,0);
	};


}



class FromRefWithOptAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromRefWithOptAlias;
        this.table = null
        this.f = null; // FromPathContext
        this.n1 = null; // IdentContext
        this.n2 = null; // IdentNoKeywordContext
    }

	fromPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromPathContext);
	    } else {
	        return this.getTypedRuleContext(FromPathContext,i);
	    }
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	identNoKeyword() {
	    return this.getTypedRuleContext(IdentNoKeywordContext,0);
	};


}



class TableOrQueryParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableOrQueryParenthesis;
        this.table = null
        this.kind = null
        this.open = null; // Token
        this.ttp = null; // TableOrQueryParenthesisContext
        this.qtec = null; // TableOrQueryExpressionContContext
        this.ttnp = null; // FromRefWithOptAliasContext
        this.tec = null; // TableExpressionContContext
        this.qpnp = null; // SelectQueryContext
        this.qec = null; // QueryExpressionContContext
        this.close = null; // Token
        this.a1 = null; // IdentContext
        this.a2 = null; // IdentNoKeywordContext
    }

	tableOrQueryParenthesis() {
	    return this.getTypedRuleContext(TableOrQueryParenthesisContext,0);
	};

	fromRefWithOptAlias() {
	    return this.getTypedRuleContext(FromRefWithOptAliasContext,0);
	};

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	identNoKeyword() {
	    return this.getTypedRuleContext(IdentNoKeywordContext,0);
	};

	tableOrQueryExpressionCont() {
	    return this.getTypedRuleContext(TableOrQueryExpressionContContext,0);
	};

	tableExpressionCont() {
	    return this.getTypedRuleContext(TableExpressionContContext,0);
	};

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};


}



class TableOrQueryExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inTable, inKind) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableOrQueryExpressionCont;
        this.inTable = null
        this.inKind = null
        this.table = inTable
        this.kind = null
        this.qec = null; // QueryExpressionContContext
        this.tec = null; // TableExpressionContContext
        this.inTable = inTable || null;
        this.inKind = inKind || null;
    }

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};

	tableExpressionCont() {
	    return this.getTypedRuleContext(TableExpressionContContext,0);
	};


}



class FromPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, qp, idkind) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromPath;
        this.qp = null
        this.idkind = null
        this.dotAfterFilter = null
        this.id = null; // IdentContext
        this.qp = qp || null;
        this.idkind = idkind || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	fromArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(FromArgumentsContext,i);
	    }
	};

	cardinalityAndFilter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CardinalityAndFilterContext);
	    } else {
	        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
	    }
	};


}



class FromArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromArguments;
        this.pathStep = null
        this.name = null; // IdentContext
        this.pathStep = pathStep || null;
    }

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};


}



class ExcludingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_excludingClause;
        this.query = null
        this.query = query || null;
    }

	EXCLUDING() {
	    return this.getToken(languageParser.EXCLUDING, 0);
	};

	projectionExclusion = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProjectionExclusionContext);
	    } else {
	        return this.getTypedRuleContext(ProjectionExclusionContext,i);
	    }
	};


}



class ProjectionExclusionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionExclusion;
        this.outer = null
        this.art = {}
        this.name = null; // IdentContext
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};


}



class MixinElementDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_mixinElementDef;
        this.outer = null
        this.art = { target: {} }
        this.name = null; // IdentContext
        this.outer = outer || null;
    }

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeAssociationCont() {
	    return this.getTypedRuleContext(TypeAssociationContContext,0);
	};


}



class SelectItemDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemDef;
        this.outer = null
        this.art = null
        this.star = null; // Token
        this.virtual = null; // Token
        this.key = null; // Token
        this.outer = outer || null;
    }

	selectItemDefBody() {
	    return this.getTypedRuleContext(SelectItemDefBodyContext,0);
	};

	annotationAssignment_atn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
	    }
	};

	VIRTUAL() {
	    return this.getToken(languageParser.VIRTUAL, 0);
	};

	KEY() {
	    return this.getToken(languageParser.KEY, 0);
	};


}



class SelectItemDefBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemDefBody;
        this.art = null
        this.outer = null
        this.assoc = null
        this.alias = null
        this.e = null; // ExpressionContext
        this.as = null; // Token
        this.n1 = null; // IdentContext
        this.n2 = null; // IdentContext
        this.dot = null; // Token
        this.star = null; // Token
        this.re = null; // Token
        this.to = null; // Token
        this.l = null; // Token
        this.cond = null; // ConditionContext
        this.art = art || null;
        this.outer = outer || null;
    }

	selectItemInlineList() {
	    return this.getTypedRuleContext(SelectItemInlineListContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	excludingClause() {
	    return this.getTypedRuleContext(ExcludingClauseContext,0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	DOTbeforeBRACE() {
	    return this.getToken(languageParser.DOTbeforeBRACE, 0);
	};

	REDIRECTED() {
	    return this.getToken(languageParser.REDIRECTED, 0);
	};

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	typeAssociationCont() {
	    return this.getTypedRuleContext(TypeAssociationContContext,0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};


}



class BracedSelectItemListDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_bracedSelectItemListDef;
        this.query = null
        this.query = query || null;
    }

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};


}



class SelectItemInlineListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, clause) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemInlineList;
        this.art = null
        this.clause = null
        this.art = art || null;
        this.clause = clause || null;
    }

	selectItemInlineDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemInlineDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemInlineDefContext,i);
	    }
	};


}



class SelectItemInlineDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemInlineDef;
        this.outer = null
        this.art = null
        this.star = null; // Token
        this.outer = outer || null;
    }

	selectItemDefBody() {
	    return this.getTypedRuleContext(SelectItemDefBodyContext,0);
	};

	annotationAssignment_atn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
	    }
	};


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inQuery) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderByClause;
        this.inQuery = null
        this.query = inQuery
        this.ob1 = null; // OrderBySpecContext
        this.obn = null; // OrderBySpecContext
        this.inQuery = inQuery || null;
    }

	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	orderBySpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderBySpecContext);
	    } else {
	        return this.getTypedRuleContext(OrderBySpecContext,i);
	    }
	};


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inQuery) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_limitClause;
        this.inQuery = null
        this.query = inQuery
        this.limkw = null; // Token
        this.lim = null; // ExpressionContext
        this.off = null; // ExpressionContext
        this.inQuery = inQuery || null;
    }

	LIMIT() {
	    return this.getToken(languageParser.LIMIT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(languageParser.OFFSET, 0);
	};


}



class OrderBySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderBySpec;
        this.ob = null
        this.e = null; // ExpressionContext
        this.asc = null; // Token
        this.desc = null; // Token
        this.nb = null; // Token
        this.ne = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(languageParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(languageParser.DESC, 0);
	};

	NULLS() {
	    return this.getToken(languageParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(languageParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(languageParser.LAST, 0);
	};


}



class JoinOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, left) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_joinOp;
        this.left = null
        this.table = null
        this.join = null
        this.op = null; // Token
        this.t1 = null; // Token
        this.c = null; // JoinCardinalityContext
        this.t2 = null; // Token
        this.left = left || null;
    }

	JOIN() {
	    return this.getToken(languageParser.JOIN, 0);
	};

	INNER() {
	    return this.getToken(languageParser.INNER, 0);
	};

	LEFT() {
	    return this.getToken(languageParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(languageParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(languageParser.FULL, 0);
	};

	joinCardinality() {
	    return this.getTypedRuleContext(JoinCardinalityContext,0);
	};

	OUTER() {
	    return this.getToken(languageParser.OUTER, 0);
	};


}



class JoinCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_joinCardinality;
        this.joinCard = null
        this.srcExact = null; // Token
        this.srcMaxOne = null; // Token
        this.srcMaxMany = null; // Token
        this.tgtExact = null; // Token
        this.tgtMaxOne = null; // Token
        this.tgtMaxMany = null; // Token
    }

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	ONE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ONE);
	    } else {
	        return this.getToken(languageParser.ONE, i);
	    }
	};


	MANY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.MANY);
	    } else {
	        return this.getToken(languageParser.MANY, i);
	    }
	};


	EXACT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.EXACT);
	    } else {
	        return this.getToken(languageParser.EXACT, i);
	    }
	};



}



class ConditionEOFContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionEOF;
        this.cond = null
        this.c = null; // ConditionContext
    }

	EOF() {
	    return this.getToken(languageParser.EOF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_condition;
        this.expr = null
        this.c1 = null; // ConditionTermContext
        this.cc = null; // ConditionContContext
    }

	conditionTerm() {
	    return this.getTypedRuleContext(ConditionTermContext,0);
	};

	conditionCont() {
	    return this.getTypedRuleContext(ConditionContContext,0);
	};


}



class ConditionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionCont;
        this.args = null
        this.expr = null
        this.right = null
        this.c1 = null; // ConditionTermContext
        this.e2 = null; // ExpressionContext
        this.colon = null; // Token
        this.e3 = null; // ExpressionContext
        this.q = null; // Token
        this.args = args || null;
    }

	conditionTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionTermContext);
	    } else {
	        return this.getTypedRuleContext(ConditionTermContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.OR);
	    } else {
	        return this.getToken(languageParser.OR, i);
	    }
	};


	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.AND);
	    } else {
	        return this.getToken(languageParser.AND, i);
	    }
	};



}



class ConditionTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionTerm;
        this.expr = null
        this.args = []
        this.subs = null
        this.c1 = null; // ConditionPrimaryContext
        this.e1 = null; // ConditionOrQueryParenthesisContext
        this.ec = null; // ExpressionContContext
        this.cc = null; // ComparisonContContext
    }

	conditionPrimary() {
	    return this.getTypedRuleContext(ConditionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};

	comparisonCont() {
	    return this.getTypedRuleContext(ComparisonContContext,0);
	};


}



class ConditionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionPrimary;
        this.expr = null
        this.args = []
        this.c1 = null; // ConditionTermContext
        this.open = null; // Token
        this.qe = null; // QueryExpressionContext
        this.close = null; // Token
        this.qm = null; // Token
        this.ep = null; // ValuePathContext
        this.e1 = null; // ExpressionPrimaryContext
        this.ec = null; // ExpressionContContext
        this.cc = null; // ComparisonContContext
    }

	NOT() {
	    return this.getToken(languageParser.NOT, 0);
	};

	conditionTerm() {
	    return this.getTypedRuleContext(ConditionTermContext,0);
	};

	EXISTS() {
	    return this.getToken(languageParser.EXISTS, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	valuePath() {
	    return this.getTypedRuleContext(ValuePathContext,0);
	};

	HideAlternatives() {
	    return this.getToken(languageParser.HideAlternatives, 0);
	};

	expressionPrimary() {
	    return this.getTypedRuleContext(ExpressionPrimaryContext,0);
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};

	comparisonCont() {
	    return this.getTypedRuleContext(ComparisonContContext,0);
	};


}



class ComparisonContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_comparisonCont;
        this.args = null
        this.expr = null
        this.e2 = null; // ExpressionContext
        this.e1 = null; // ExpressionContext
        this.e3 = null; // ExpressionContext
        this.e4 = null; // ExpressionContext
        this.e5 = null; // ExpressionContext
        this.args = args || null;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ANY() {
	    return this.getToken(languageParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(languageParser.SOME, 0);
	};

	ALL() {
	    return this.getToken(languageParser.ALL, 0);
	};

	IS() {
	    return this.getToken(languageParser.IS, 0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(languageParser.NOT, 0);
	};

	IN() {
	    return this.getToken(languageParser.IN, 0);
	};

	BETWEEN() {
	    return this.getToken(languageParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(languageParser.AND, 0);
	};

	LIKE() {
	    return this.getToken(languageParser.LIKE, 0);
	};

	ESCAPE() {
	    return this.getToken(languageParser.ESCAPE, 0);
	};


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expression;
        this.expr = null
        this.e1 = null; // ExpressionPrimaryContext
        this.eq = null; // ConditionOrQueryParenthesisContext
        this.ec = null; // ExpressionContContext
    }

	expressionPrimary() {
	    return this.getTypedRuleContext(ExpressionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};


}



class ExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expressionCont;
        this.args = null
        this.expr = null
        this.right = null
        this.e1 = null; // ExpressionPrimaryContext
        this.eq = null; // ConditionOrQueryParenthesisContext
        this.args = args || null;
    }

	expressionPrimary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionPrimaryContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionPrimaryContext,i);
	    }
	};

	conditionOrQueryParenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionOrQueryParenthesisContext);
	    } else {
	        return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,i);
	    }
	};


}



class ExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expressionPrimary;
        this.expr = null
        this.args = []
        this.e1 = null; // ExpressionPrimaryContext
        this.eq = null; // ConditionOrQueryParenthesisContext
        this.val = null; // LiteralValueContext
        this.sf = null; // SpecialFunctionContext
        this.e2 = null; // ExpressionContext
        this.ew = null; // ExpressionContext
        this.e3 = null; // ExpressionContext
        this.c = null; // ConditionContext
        this.e4 = null; // ExpressionContext
        this.ne = null; // Token
        this.nqp = null; // ValuePathContext
        this.vp = null; // ValuePathContext
        this.open = null; // Token
        this.over = null; // OverClauseContext
        this.close = null; // Token
        this.colon = null; // Token
        this.pp = null; // Token
        this.qm = null; // Token
    }

	expressionPrimary() {
	    return this.getTypedRuleContext(ExpressionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	specialFunction() {
	    return this.getTypedRuleContext(SpecialFunctionContext,0);
	};

	CASE() {
	    return this.getToken(languageParser.CASE, 0);
	};

	END() {
	    return this.getToken(languageParser.END, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(languageParser.ELSE, 0);
	};

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.WHEN);
	    } else {
	        return this.getToken(languageParser.WHEN, i);
	    }
	};


	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.THEN);
	    } else {
	        return this.getToken(languageParser.THEN, i);
	    }
	};


	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	NEW() {
	    return this.getToken(languageParser.NEW, 0);
	};

	valuePath() {
	    return this.getTypedRuleContext(ValuePathContext,0);
	};

	OVER() {
	    return this.getToken(languageParser.OVER, 0);
	};

	overClause() {
	    return this.getTypedRuleContext(OverClauseContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};


}



class ConditionOrQueryParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionOrQueryParenthesis;
        this.expr = null
        this.args = []
        this.open = null; // Token
        this.q1 = null; // SelectQueryContext
        this.qr = null; // QueryExpressionContContext
        this.c1 = null; // ConditionPrimaryContext
        this.cc = null; // ConditionContContext
        this.cn = null; // ConditionContext
        this.rec = null; // ConditionOrQueryParenthesisContext
        this.qc = null; // QueryExpressionContContext
        this.ec = null; // ExpressionContContext
        this.cm = null; // ComparisonContContext
        this.close = null; // Token
    }

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	conditionPrimary() {
	    return this.getTypedRuleContext(ConditionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};

	conditionCont() {
	    return this.getTypedRuleContext(ConditionContContext,0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};

	comparisonCont() {
	    return this.getTypedRuleContext(ComparisonContContext,0);
	};


}



class SpecialFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_specialFunction;
        this.ret = {}
        this.art = new parser.XsnArtifact()
        this.ca = null; // Token
        this.e = null; // ExpressionContext
    }

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	CAST() {
	    return this.getToken(languageParser.CAST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};


}



class SimplePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, category) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_simplePath;
        this.art = null
        this.category = null
        this._sync = 'nop'
        this.head = null; // IdentContext
        this.tail = null; // IdentContext
        this.art = art || null;
        this.category = category || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};


}



class ValuePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, category, location) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_valuePath;
        this.category = null
        this.location = null
        this.qp = { path: [] }
        this._sync = 'nop'
        this.id = null; // IdentContext
        this.category = category || null;
        this.location = location || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	pathArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(PathArgumentsContext,i);
	    }
	};

	cardinalityAndFilter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CardinalityAndFilterContext);
	    } else {
	        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
	    }
	};


}



class PathArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep, considerSpecial) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_pathArguments;
        this.pathStep = null
        this.considerSpecial = null
        this.id = null; // Token
        this.name = null; // IdentContext
        this.ob = null; // FuncOrderByClauseContext
        this.pathStep = pathStep || null;
        this.considerSpecial = considerSpecial || null;
    }

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	funcExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FuncExpressionContext);
	    } else {
	        return this.getTypedRuleContext(FuncExpressionContext,i);
	    }
	};

	HelperToken1() {
	    return this.getToken(languageParser.HelperToken1, 0);
	};

	HelperToken2() {
	    return this.getToken(languageParser.HelperToken2, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	funcOrderByClause() {
	    return this.getTypedRuleContext(FuncOrderByClauseContext,0);
	};


}



class NamedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep, id) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namedExpression;
        this.pathStep = null
        this.id = null
        this.elem = null; // ExpressionContext
        this.pathStep = pathStep || null;
        this.id = id || null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};


}



class FuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep, considerSpecial) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_funcExpression;
        this.pathStep = null
        this.considerSpecial = null
        this.args = []
        this.expr = null; // ExpressionContext
        this.pathStep = pathStep || null;
        this.considerSpecial = considerSpecial || null;
    }

	GenericExpr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.GenericExpr);
	    } else {
	        return this.getToken(languageParser.GenericExpr, i);
	    }
	};


	GenericIntro() {
	    return this.getToken(languageParser.GenericIntro, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	HideAlternatives = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.HideAlternatives);
	    } else {
	        return this.getToken(languageParser.HideAlternatives, i);
	    }
	};


	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ALL);
	    } else {
	        return this.getToken(languageParser.ALL, i);
	    }
	};


	DISTINCT() {
	    return this.getToken(languageParser.DISTINCT, 0);
	};

	GenericSeparator = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.GenericSeparator);
	    } else {
	        return this.getToken(languageParser.GenericSeparator, i);
	    }
	};


	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Identifier);
	    } else {
	        return this.getToken(languageParser.Identifier, i);
	    }
	};


	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.FROM);
	    } else {
	        return this.getToken(languageParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.IN);
	    } else {
	        return this.getToken(languageParser.IN, i);
	    }
	};


	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.WITH);
	    } else {
	        return this.getToken(languageParser.WITH, i);
	    }
	};


	GROUP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.GROUP);
	    } else {
	        return this.getToken(languageParser.GROUP, i);
	    }
	};



}



class OverClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_overClause;
        this.over = null
        this.args = []
        this.pb = null; // PartitionByClauseContext
        this.ob = null; // ExprOrderByClauseContext
        this.wf = null; // WindowFrameClauseContext
    }

	PARTITION() {
	    return this.getToken(languageParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.BY);
	    } else {
	        return this.getToken(languageParser.BY, i);
	    }
	};


	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	ROWS() {
	    return this.getToken(languageParser.ROWS, 0);
	};

	partitionByClause() {
	    return this.getTypedRuleContext(PartitionByClauseContext,0);
	};

	exprOrderByClause() {
	    return this.getTypedRuleContext(ExprOrderByClauseContext,0);
	};

	windowFrameClause() {
	    return this.getTypedRuleContext(WindowFrameClauseContext,0);
	};


}



class PartitionByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_partitionByClause;
        this.expr = null
        this.args = []
        this.e1 = null; // ExpressionContext
        this.en = null; // ExpressionContext
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};


}



class FuncOrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_funcOrderByClause;
        this.args = null
        this.expr = null
        this.ob = null; // ExprOrderByClauseContext
        this.args = args || null;
    }

	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	exprOrderByClause() {
	    return this.getTypedRuleContext(ExprOrderByClauseContext,0);
	};


}



class ExprOrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_exprOrderByClause;
        this.expr = null
        this.args = []
    }

	orderBySpecInExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderBySpecInExprContext);
	    } else {
	        return this.getTypedRuleContext(OrderBySpecInExprContext,i);
	    }
	};


}



class OrderBySpecInExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderBySpecInExpr;
        this.args = null
        this.e = null; // ExpressionContext
        this.args = args || null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(languageParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(languageParser.DESC, 0);
	};

	NULLS() {
	    return this.getToken(languageParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(languageParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(languageParser.LAST, 0);
	};


}



class WindowFrameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameClause;
        this.wf = null
        this.args = []
    }

	windowFrameStartSpec() {
	    return this.getTypedRuleContext(WindowFrameStartSpecContext,0);
	};

	BETWEEN() {
	    return this.getToken(languageParser.BETWEEN, 0);
	};

	windowFrameBoundSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WindowFrameBoundSpecContext);
	    } else {
	        return this.getTypedRuleContext(WindowFrameBoundSpecContext,i);
	    }
	};

	AND() {
	    return this.getToken(languageParser.AND, 0);
	};


}



class WindowFrameBoundSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameBoundSpec;
        this.args = null
        this.args = args || null;
    }

	UNBOUNDED() {
	    return this.getToken(languageParser.UNBOUNDED, 0);
	};

	FOLLOWING() {
	    return this.getToken(languageParser.FOLLOWING, 0);
	};

	PRECEDING() {
	    return this.getToken(languageParser.PRECEDING, 0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	CURRENT() {
	    return this.getToken(languageParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(languageParser.ROW, 0);
	};


}



class WindowFrameStartSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameStartSpec;
        this.args = []
        this.args = args || null;
    }

	UNBOUNDED() {
	    return this.getToken(languageParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(languageParser.PRECEDING, 0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	CURRENT() {
	    return this.getToken(languageParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(languageParser.ROW, 0);
	};


}



class CardinalityAndFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_cardinalityAndFilter;
        this.pathStep = null
        this._sync = 'nop'
        this.openFilter = null; // Token
        this.group = null; // Token
        this.by = null; // Token
        this.e1 = null; // ExpressionContext
        this.en = null; // ExpressionContext
        this.hv = null; // Token
        this.having = null; // ConditionContext
        this.ob = null; // OrderByClauseContext
        this.lc = null; // LimitClauseContext
        this.closeFilter = null; // Token
        this.pathStep = pathStep || null;
    }

	filterWhereClause() {
	    return this.getTypedRuleContext(FilterWhereClauseContext,0);
	};

	optionalCardinality() {
	    return this.getTypedRuleContext(OptionalCardinalityContext,0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};


}



class OptionalCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalCardinality;
        this.pathStep = null
        this.pathStep = pathStep || null;
    }

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};


}



class FilterWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_filterWhereClause;
        this.pathStep = null
        this.cond = null; // ConditionContext
        this.pathStep = pathStep || null;
    }

	optionalWhereForFilter() {
	    return this.getTypedRuleContext(OptionalWhereForFilterContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};


}



class OptionalWhereForFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalWhereForFilter;
    }

	WHERE() {
	    return this.getToken(languageParser.WHERE, 0);
	};


}



class AnnotationAssignment_fixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_fix;
        this.art = null
        this.assignment = null
        this.at = null; // Token
        this.art = art || null;
    }

	annotationAssignment_paren() {
	    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};


}



class AnnotationAssignment_ll1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_ll1;
        this.art = null
        this.assignment = null
        this.at = null; // Token
        this.val = null; // AnnoValueContext
        this.art = art || null;
    }

	annotationAssignment_paren() {
	    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	annoValue() {
	    return this.getTypedRuleContext(AnnoValueContext,0);
	};


}



class AnnotationAssignment_atnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_atn;
        this.art = null
        this.assignment = null
        this.at = null; // Token
        this.hash = null; // Token
        this.val = null; // AnnoValueBaseContext
        this.atv = null; // Token
        this.art = art || null;
    }

	annotationAssignment_paren() {
	    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
	};

	annotationPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationPathContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationPathContext,i);
	    }
	};

	annotationPathVariant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationPathVariantContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationPathVariantContext,i);
	    }
	};

	HelperToken2() {
	    return this.getToken(languageParser.HelperToken2, 0);
	};

	HelperToken1 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.HelperToken1);
	    } else {
	        return this.getToken(languageParser.HelperToken1, i);
	    }
	};


	annoValueBase() {
	    return this.getTypedRuleContext(AnnoValueBaseContext,0);
	};


}



class AnnotationAssignment_parenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_paren;
        this.art = null
        this.art = art || null;
    }

	annotationAssignment_1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_1Context,i);
	    }
	};


}



class AnnotationAssignment_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_1;
        this.art = null
        this.assignment = { name: new parser.XsnName() }
        this.val = null; // AnnoValueContext
        this.art = art || null;
    }

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	annoValue() {
	    return this.getTypedRuleContext(AnnoValueContext,0);
	};


}



class AnnotationPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, category, headat) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationPath;
        this.art = null
        this.category = null
        this.headat = null
        this._sync = 'nop'
        this.head = null; // IdentContext
        this.at = null; // Token
        this.tail = null; // IdentContext
        this.art = art || null;
        this.category = category || null;
        this.headat = headat || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};


}



class AnnotationPathVariantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationPathVariant;
        this.art = null
        this.variant = {}
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};


}



class AnnoValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, assignment) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoValue;
        this.assignment = null
        this.base = null; // AnnoValueBaseContext
        this.at = null; // Token
        this.assignment = assignment || null;
    }

	annoValueBase() {
	    return this.getTypedRuleContext(AnnoValueBaseContext,0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};


}



class AnnoValueBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, assignment) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoValueBase;
        this.assignment = null
        this.seenEllipsis = false
        this.head = null; // AnnoSubValueContext
        this.e = null; // Token
        this.upTo = null; // AnnoSubValueContext
        this.tail = null; // AnnoSubValueContext
        this.cb = null; // Token
        this.v1 = null; // LiteralValueContext
        this.plus = null; // Token
        this.min = null; // Token
        this.num = null; // Token
        this.cond = null; // ConditionContext
        this.assignment = assignment || null;
    }

	flattenedValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlattenedValueContext);
	    } else {
	        return this.getTypedRuleContext(FlattenedValueContext,i);
	    }
	};

	annoSubValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnoSubValueContext);
	    } else {
	        return this.getTypedRuleContext(AnnoSubValueContext,i);
	    }
	};

	UP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.UP);
	    } else {
	        return this.getToken(languageParser.UP, i);
	    }
	};


	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.TO);
	    } else {
	        return this.getToken(languageParser.TO, i);
	    }
	};


	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};


}



class FlattenedValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, assignment) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_flattenedValue;
        this.assignment = null
        this.val = { name: new parser.XsnName() }
        this.at = null; // Token
        this.assignment = assignment || null;
    }

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	annoValue() {
	    return this.getTypedRuleContext(AnnoValueContext,0);
	};


}



class NamedValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, struct) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namedValue;
        this.struct = null
        this.val = { name: new parser.XsnName() }
        this.at = null; // Token
        this.sub = null; // AnnoSubValueContext
        this.struct = struct || null;
    }

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annoSubValue() {
	    return this.getTypedRuleContext(AnnoSubValueContext,0);
	};


}



class AnnoSubValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoSubValue;
        this.val = {}
        this.head = null; // AnnoSubValueContext
        this.tail = null; // AnnoSubValueContext
        this.v1 = null; // LiteralValueContext
        this.plus = null; // Token
        this.min = null; // Token
        this.num = null; // Token
        this.at = null; // Token
        this.cond = null; // ConditionContext
    }

	namedValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedValueContext);
	    } else {
	        return this.getTypedRuleContext(NamedValueContext,i);
	    }
	};

	annoSubValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnoSubValueContext);
	    } else {
	        return this.getTypedRuleContext(AnnoSubValueContext,i);
	    }
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};


}



class LiteralValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_literalValue;
        this.val = null
        this.tok = null
        this.hash = null; // Token
        this.name = null; // IdentContext
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};

	Boolean() {
	    return this.getToken(languageParser.Boolean, 0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	String() {
	    return this.getToken(languageParser.String, 0);
	};

	QuotedLiteral() {
	    return this.getToken(languageParser.QuotedLiteral, 0);
	};


}



class IdentNoKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, category) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_identNoKeyword;
        this.category = null
        this.id = null
        this.category = category || null;
    }

	Identifier() {
	    return this.getToken(languageParser.Identifier, 0);
	};


}



class IdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, category) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_ident;
        this.category = null
        this.id = null
        this.category = category || null;
    }

	Identifier() {
	    return this.getToken(languageParser.Identifier, 0);
	};

	ABSTRACT() {
	    return this.getToken(languageParser.ABSTRACT, 0);
	};

	ACTION() {
	    return this.getToken(languageParser.ACTION, 0);
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	AND() {
	    return this.getToken(languageParser.AND, 0);
	};

	ANNOTATE() {
	    return this.getToken(languageParser.ANNOTATE, 0);
	};

	ANNOTATION() {
	    return this.getToken(languageParser.ANNOTATION, 0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(languageParser.ASC, 0);
	};

	ASPECT() {
	    return this.getToken(languageParser.ASPECT, 0);
	};

	ASSOCIATION() {
	    return this.getToken(languageParser.ASSOCIATION, 0);
	};

	BETWEEN() {
	    return this.getToken(languageParser.BETWEEN, 0);
	};

	COLUMNS() {
	    return this.getToken(languageParser.COLUMNS, 0);
	};

	COMPOSITION() {
	    return this.getToken(languageParser.COMPOSITION, 0);
	};

	CONTEXT() {
	    return this.getToken(languageParser.CONTEXT, 0);
	};

	CROSS() {
	    return this.getToken(languageParser.CROSS, 0);
	};

	CURRENT() {
	    return this.getToken(languageParser.CURRENT, 0);
	};

	DEFAULT() {
	    return this.getToken(languageParser.DEFAULT, 0);
	};

	DEFINE() {
	    return this.getToken(languageParser.DEFINE, 0);
	};

	DEFINITIONS() {
	    return this.getToken(languageParser.DEFINITIONS, 0);
	};

	DESC() {
	    return this.getToken(languageParser.DESC, 0);
	};

	ELEMENTS() {
	    return this.getToken(languageParser.ELEMENTS, 0);
	};

	ELSE() {
	    return this.getToken(languageParser.ELSE, 0);
	};

	END() {
	    return this.getToken(languageParser.END, 0);
	};

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	ESCAPE() {
	    return this.getToken(languageParser.ESCAPE, 0);
	};

	EVENT() {
	    return this.getToken(languageParser.EVENT, 0);
	};

	EXACT() {
	    return this.getToken(languageParser.EXACT, 0);
	};

	EXCEPT() {
	    return this.getToken(languageParser.EXCEPT, 0);
	};

	EXCLUDING() {
	    return this.getToken(languageParser.EXCLUDING, 0);
	};

	EXTEND() {
	    return this.getToken(languageParser.EXTEND, 0);
	};

	FIRST() {
	    return this.getToken(languageParser.FIRST, 0);
	};

	FLOATING() {
	    return this.getToken(languageParser.FLOATING, 0);
	};

	FOLLOWING() {
	    return this.getToken(languageParser.FOLLOWING, 0);
	};

	FULL() {
	    return this.getToken(languageParser.FULL, 0);
	};

	FUNCTION() {
	    return this.getToken(languageParser.FUNCTION, 0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	INNER() {
	    return this.getToken(languageParser.INNER, 0);
	};

	INTERSECT() {
	    return this.getToken(languageParser.INTERSECT, 0);
	};

	INTO() {
	    return this.getToken(languageParser.INTO, 0);
	};

	IS() {
	    return this.getToken(languageParser.IS, 0);
	};

	JOIN() {
	    return this.getToken(languageParser.JOIN, 0);
	};

	LAST() {
	    return this.getToken(languageParser.LAST, 0);
	};

	LEFT() {
	    return this.getToken(languageParser.LEFT, 0);
	};

	LIKE() {
	    return this.getToken(languageParser.LIKE, 0);
	};

	LIMIT() {
	    return this.getToken(languageParser.LIMIT, 0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	MINUS() {
	    return this.getToken(languageParser.MINUS, 0);
	};

	MIXIN() {
	    return this.getToken(languageParser.MIXIN, 0);
	};

	NAMESPACE() {
	    return this.getToken(languageParser.NAMESPACE, 0);
	};

	NULLS() {
	    return this.getToken(languageParser.NULLS, 0);
	};

	OFFSET() {
	    return this.getToken(languageParser.OFFSET, 0);
	};

	ONE() {
	    return this.getToken(languageParser.ONE, 0);
	};

	OR() {
	    return this.getToken(languageParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	OUTER() {
	    return this.getToken(languageParser.OUTER, 0);
	};

	PARAMETERS() {
	    return this.getToken(languageParser.PARAMETERS, 0);
	};

	PARTITION() {
	    return this.getToken(languageParser.PARTITION, 0);
	};

	PRECEDING() {
	    return this.getToken(languageParser.PRECEDING, 0);
	};

	PROJECTION() {
	    return this.getToken(languageParser.PROJECTION, 0);
	};

	REDIRECTED() {
	    return this.getToken(languageParser.REDIRECTED, 0);
	};

	RETURNS() {
	    return this.getToken(languageParser.RETURNS, 0);
	};

	RIGHT() {
	    return this.getToken(languageParser.RIGHT, 0);
	};

	ROW() {
	    return this.getToken(languageParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(languageParser.ROWS, 0);
	};

	STORED() {
	    return this.getToken(languageParser.STORED, 0);
	};

	SERVICE() {
	    return this.getToken(languageParser.SERVICE, 0);
	};

	THEN() {
	    return this.getToken(languageParser.THEN, 0);
	};

	UNION() {
	    return this.getToken(languageParser.UNION, 0);
	};

	UP() {
	    return this.getToken(languageParser.UP, 0);
	};

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	USING() {
	    return this.getToken(languageParser.USING, 0);
	};

	UNBOUNDED() {
	    return this.getToken(languageParser.UNBOUNDED, 0);
	};

	VARIABLE() {
	    return this.getToken(languageParser.VARIABLE, 0);
	};

	VIEW() {
	    return this.getToken(languageParser.VIEW, 0);
	};


}




languageParser.StartContext = StartContext; 
languageParser.NamespaceDeclarationContext = NamespaceDeclarationContext; 
languageParser.UsingDeclarationContext = UsingDeclarationContext; 
languageParser.UsingProxyContext = UsingProxyContext; 
languageParser.ArtifactDefOrExtendContext = ArtifactDefOrExtendContext; 
languageParser.OptArtifactsBlockContext = OptArtifactsBlockContext; 
languageParser.RequiredSemiContext = RequiredSemiContext; 
languageParser.OptionalSemiContext = OptionalSemiContext; 
languageParser.AnnotationDefContext = AnnotationDefContext; 
languageParser.ServiceDefContext = ServiceDefContext; 
languageParser.ContextDefContext = ContextDefContext; 
languageParser.EventDefContext = EventDefContext; 
languageParser.ViewDefContext = ViewDefContext; 
languageParser.EntityDefContext = EntityDefContext; 
languageParser.AspectDefContext = AspectDefContext; 
languageParser.ElementsAndOptActionsContext = ElementsAndOptActionsContext; 
languageParser.TypeDefContext = TypeDefContext; 
languageParser.ActionFunctionMainDefContext = ActionFunctionMainDefContext; 
languageParser.ActionFunctionDefContext = ActionFunctionDefContext; 
languageParser.ParameterDefContext = ParameterDefContext; 
languageParser.ParameterListDefContext = ParameterListDefContext; 
languageParser.EnumSymbolDefContext = EnumSymbolDefContext; 
languageParser.ElementDefContext = ElementDefContext; 
languageParser.ElementDefInnerContext = ElementDefInnerContext; 
languageParser.ElementTypeContext = ElementTypeContext; 
languageParser.ElementPropertiesContext = ElementPropertiesContext; 
languageParser.DefaultAndNullabilityContext = DefaultAndNullabilityContext; 
languageParser.DefaultValueContext = DefaultValueContext; 
languageParser.ExtendArtifactContext = ExtendArtifactContext; 
languageParser.ExtendServiceContext = ExtendServiceContext; 
languageParser.ExtendContextContext = ExtendContextContext; 
languageParser.ExtendEntityOrAspectContext = ExtendEntityOrAspectContext; 
languageParser.ExtendForEntityContext = ExtendForEntityContext; 
languageParser.ExtendProjectionContext = ExtendProjectionContext; 
languageParser.ExtendTypeContext = ExtendTypeContext; 
languageParser.ExtendWithOptElementsOrTypeContext = ExtendWithOptElementsOrTypeContext; 
languageParser.ExtendWithOptElementsNoWithContext = ExtendWithOptElementsNoWithContext; 
languageParser.ElementDefOrExtendContext = ElementDefOrExtendContext; 
languageParser.ExtendElementContext = ExtendElementContext; 
languageParser.AnnotateArtifactContext = AnnotateArtifactContext; 
languageParser.AnnotateArtifactActionsContext = AnnotateArtifactActionsContext; 
languageParser.AnnotateArtifactElementsContext = AnnotateArtifactElementsContext; 
languageParser.AnnotateElementContext = AnnotateElementContext; 
languageParser.AnnotateActionContext = AnnotateActionContext; 
languageParser.AnnotateReturnsContext = AnnotateReturnsContext; 
languageParser.AnnotateParamContext = AnnotateParamContext; 
languageParser.IncludeRefContext = IncludeRefContext; 
languageParser.TypeSpecContext = TypeSpecContext; 
languageParser.ReturnTypeSpecContext = ReturnTypeSpecContext; 
languageParser.TypeSpecContContext = TypeSpecContContext; 
languageParser.TypeSpecSemiContext = TypeSpecSemiContext; 
languageParser.TypeStructContext = TypeStructContext; 
languageParser.TypeCompoStructContext = TypeCompoStructContext; 
languageParser.TypeArrayContext = TypeArrayContext; 
languageParser.TypeAssociationBaseContext = TypeAssociationBaseContext; 
languageParser.TypeAssociationContContext = TypeAssociationContContext; 
languageParser.TypeAssociationElementContContext = TypeAssociationElementContContext; 
languageParser.TypeToOneContext = TypeToOneContext; 
languageParser.TypeToManyContext = TypeToManyContext; 
languageParser.CardinalityContext = CardinalityContext; 
languageParser.TargetCardinalityContext = TargetCardinalityContext; 
languageParser.OptInvisibleNullabilityContext = OptInvisibleNullabilityContext; 
languageParser.NullabilityContext = NullabilityContext; 
languageParser.ForeignKeyContext = ForeignKeyContext; 
languageParser.TypeTypeOfContext = TypeTypeOfContext; 
languageParser.TypeRefOptArgsContext = TypeRefOptArgsContext; 
languageParser.TypeRefArgsContext = TypeRefArgsContext; 
languageParser.TypeNamedArgListContext = TypeNamedArgListContext; 
languageParser.TypeNamedArgContext = TypeNamedArgContext; 
languageParser.QueryEOFContext = QueryEOFContext; 
languageParser.ProjectionSpecContext = ProjectionSpecContext; 
languageParser.ProjectionClausesContext = ProjectionClausesContext; 
languageParser.QueryExpressionContext = QueryExpressionContext; 
languageParser.QueryExpressionContContext = QueryExpressionContContext; 
languageParser.QueryPrimaryContext = QueryPrimaryContext; 
languageParser.SelectQueryContext = SelectQueryContext; 
languageParser.QuerySourceContext = QuerySourceContext; 
languageParser.TableExpressionContext = TableExpressionContext; 
languageParser.TableExpressionContContext = TableExpressionContContext; 
languageParser.TableTermContext = TableTermContext; 
languageParser.FromRefWithOptAliasContext = FromRefWithOptAliasContext; 
languageParser.TableOrQueryParenthesisContext = TableOrQueryParenthesisContext; 
languageParser.TableOrQueryExpressionContContext = TableOrQueryExpressionContContext; 
languageParser.FromPathContext = FromPathContext; 
languageParser.FromArgumentsContext = FromArgumentsContext; 
languageParser.ExcludingClauseContext = ExcludingClauseContext; 
languageParser.ProjectionExclusionContext = ProjectionExclusionContext; 
languageParser.MixinElementDefContext = MixinElementDefContext; 
languageParser.SelectItemDefContext = SelectItemDefContext; 
languageParser.SelectItemDefBodyContext = SelectItemDefBodyContext; 
languageParser.BracedSelectItemListDefContext = BracedSelectItemListDefContext; 
languageParser.SelectItemInlineListContext = SelectItemInlineListContext; 
languageParser.SelectItemInlineDefContext = SelectItemInlineDefContext; 
languageParser.OrderByClauseContext = OrderByClauseContext; 
languageParser.LimitClauseContext = LimitClauseContext; 
languageParser.OrderBySpecContext = OrderBySpecContext; 
languageParser.JoinOpContext = JoinOpContext; 
languageParser.JoinCardinalityContext = JoinCardinalityContext; 
languageParser.ConditionEOFContext = ConditionEOFContext; 
languageParser.ConditionContext = ConditionContext; 
languageParser.ConditionContContext = ConditionContContext; 
languageParser.ConditionTermContext = ConditionTermContext; 
languageParser.ConditionPrimaryContext = ConditionPrimaryContext; 
languageParser.ComparisonContContext = ComparisonContContext; 
languageParser.ExpressionContext = ExpressionContext; 
languageParser.ExpressionContContext = ExpressionContContext; 
languageParser.ExpressionPrimaryContext = ExpressionPrimaryContext; 
languageParser.ConditionOrQueryParenthesisContext = ConditionOrQueryParenthesisContext; 
languageParser.SpecialFunctionContext = SpecialFunctionContext; 
languageParser.SimplePathContext = SimplePathContext; 
languageParser.ValuePathContext = ValuePathContext; 
languageParser.PathArgumentsContext = PathArgumentsContext; 
languageParser.NamedExpressionContext = NamedExpressionContext; 
languageParser.FuncExpressionContext = FuncExpressionContext; 
languageParser.OverClauseContext = OverClauseContext; 
languageParser.PartitionByClauseContext = PartitionByClauseContext; 
languageParser.FuncOrderByClauseContext = FuncOrderByClauseContext; 
languageParser.ExprOrderByClauseContext = ExprOrderByClauseContext; 
languageParser.OrderBySpecInExprContext = OrderBySpecInExprContext; 
languageParser.WindowFrameClauseContext = WindowFrameClauseContext; 
languageParser.WindowFrameBoundSpecContext = WindowFrameBoundSpecContext; 
languageParser.WindowFrameStartSpecContext = WindowFrameStartSpecContext; 
languageParser.CardinalityAndFilterContext = CardinalityAndFilterContext; 
languageParser.OptionalCardinalityContext = OptionalCardinalityContext; 
languageParser.FilterWhereClauseContext = FilterWhereClauseContext; 
languageParser.OptionalWhereForFilterContext = OptionalWhereForFilterContext; 
languageParser.AnnotationAssignment_fixContext = AnnotationAssignment_fixContext; 
languageParser.AnnotationAssignment_ll1Context = AnnotationAssignment_ll1Context; 
languageParser.AnnotationAssignment_atnContext = AnnotationAssignment_atnContext; 
languageParser.AnnotationAssignment_parenContext = AnnotationAssignment_parenContext; 
languageParser.AnnotationAssignment_1Context = AnnotationAssignment_1Context; 
languageParser.AnnotationPathContext = AnnotationPathContext; 
languageParser.AnnotationPathVariantContext = AnnotationPathVariantContext; 
languageParser.AnnoValueContext = AnnoValueContext; 
languageParser.AnnoValueBaseContext = AnnoValueBaseContext; 
languageParser.FlattenedValueContext = FlattenedValueContext; 
languageParser.NamedValueContext = NamedValueContext; 
languageParser.AnnoSubValueContext = AnnoSubValueContext; 
languageParser.LiteralValueContext = LiteralValueContext; 
languageParser.IdentNoKeywordContext = IdentNoKeywordContext; 
languageParser.IdentContext = IdentContext; 
