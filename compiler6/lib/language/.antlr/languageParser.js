// Generated from /Users/patricebender/SAPDevelop/dev/cds-compiler/lib/language/language.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import languageListener from './languageListener.js';
import genericAntlrParser from './genericAntlrParser.js';

const serializedATN = [4,1,152,3845,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,1,0,5,0,284,
8,0,10,0,12,0,287,9,0,1,0,1,0,1,0,5,0,292,8,0,10,0,12,0,295,9,0,1,0,1,0,
1,0,5,0,300,8,0,10,0,12,0,303,9,0,3,0,305,8,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,323,8,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,2,5,2,332,8,2,10,2,12,2,335,9,2,1,2,1,2,1,2,1,2,1,2,3,2,342,8,2,3,2,
344,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,356,8,3,1,4,1,4,5,4,
360,8,4,10,4,12,4,363,9,4,1,4,3,4,366,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
4,1,4,3,4,377,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,387,8,4,1,4,1,4,1,
4,3,4,392,8,4,1,5,1,5,1,5,5,5,397,8,5,10,5,12,5,400,9,5,1,5,1,5,3,5,404,
8,5,1,6,1,6,1,6,3,6,409,8,6,1,7,1,7,3,7,413,8,7,1,8,1,8,1,8,1,8,5,8,419,
8,8,10,8,12,8,422,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,431,8,9,10,9,12,9,
434,9,9,1,9,1,9,1,9,3,9,439,8,9,1,10,1,10,1,10,1,10,1,10,5,10,446,8,10,10,
10,12,10,449,9,10,1,10,1,10,1,10,3,10,454,8,10,1,11,1,11,1,11,1,11,5,11,
460,8,11,10,11,12,11,463,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
11,1,11,5,11,475,8,11,10,11,12,11,478,9,11,1,11,1,11,1,11,1,11,1,11,5,11,
485,8,11,10,11,12,11,488,9,11,1,11,3,11,491,8,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,11,3,11,500,8,11,3,11,502,8,11,1,12,1,12,1,12,1,12,5,12,508,8,12,
10,12,12,12,511,9,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,520,8,12,10,
12,12,12,523,9,12,1,12,1,12,3,12,527,8,12,1,12,1,12,1,12,1,12,1,12,3,12,
534,8,12,1,13,1,13,1,13,1,13,5,13,540,8,13,10,13,12,13,543,9,13,1,13,3,13,
546,8,13,1,13,1,13,1,13,1,13,1,13,5,13,553,8,13,10,13,12,13,556,9,13,3,13,
558,8,13,1,13,1,13,1,13,5,13,563,8,13,10,13,12,13,566,9,13,1,13,1,13,1,13,
1,13,1,13,1,13,5,13,574,8,13,10,13,12,13,577,9,13,1,13,1,13,3,13,581,8,13,
1,13,1,13,3,13,585,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,594,8,13,
10,13,12,13,597,9,13,1,13,1,13,3,13,601,8,13,1,13,1,13,3,13,605,8,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,5,13,614,8,13,10,13,12,13,617,9,13,1,13,1,
13,3,13,621,8,13,1,13,1,13,3,13,625,8,13,3,13,627,8,13,1,14,1,14,1,14,3,
14,632,8,14,1,14,3,14,635,8,14,1,14,1,14,1,14,5,14,640,8,14,10,14,12,14,
643,9,14,1,14,1,14,1,14,1,14,1,14,5,14,650,8,14,10,14,12,14,653,9,14,1,14,
3,14,656,8,14,1,14,3,14,659,8,14,1,14,3,14,662,8,14,1,14,1,14,3,14,666,8,
14,1,15,1,15,1,15,5,15,671,8,15,10,15,12,15,674,9,15,1,15,1,15,1,15,1,15,
1,15,1,15,5,15,682,8,15,10,15,12,15,685,9,15,1,15,1,15,3,15,689,8,15,1,16,
1,16,1,16,1,16,5,16,695,8,16,10,16,12,16,698,9,16,1,16,1,16,1,17,1,17,1,
17,1,17,5,17,706,8,17,10,17,12,17,709,9,17,1,17,1,17,3,17,713,8,17,1,17,
1,17,1,17,1,17,5,17,719,8,17,10,17,12,17,722,9,17,1,17,1,17,1,17,3,17,727,
8,17,1,17,1,17,3,17,731,8,17,1,18,1,18,5,18,735,8,18,10,18,12,18,738,9,18,
1,18,1,18,1,18,1,18,5,18,744,8,18,10,18,12,18,747,9,18,1,18,1,18,3,18,751,
8,18,1,18,1,18,1,18,1,18,5,18,757,8,18,10,18,12,18,760,9,18,1,18,1,18,1,
18,3,18,765,8,18,1,18,1,18,1,19,1,19,1,19,1,19,5,19,773,8,19,10,19,12,19,
776,9,19,1,19,1,19,1,19,5,19,781,8,19,10,19,12,19,784,9,19,1,19,1,19,3,19,
788,8,19,1,19,1,19,5,19,792,8,19,10,19,12,19,795,9,19,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,5,20,804,8,20,10,20,12,20,807,9,20,1,20,1,20,1,20,1,21,1,
21,5,21,814,8,21,10,21,12,21,817,9,21,1,21,1,21,1,21,5,21,822,8,21,10,21,
12,21,825,9,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,834,8,21,1,21,1,21,
3,21,838,8,21,1,21,1,21,5,21,842,8,21,10,21,12,21,845,9,21,3,21,847,8,21,
1,21,1,21,1,22,1,22,5,22,853,8,22,10,22,12,22,856,9,22,1,22,1,22,1,23,1,
23,1,23,3,23,863,8,23,1,23,1,23,3,23,867,8,23,1,23,1,23,1,23,3,23,872,8,
23,1,23,1,23,1,23,3,23,877,8,23,1,23,1,23,1,23,5,23,882,8,23,10,23,12,23,
885,9,23,1,23,1,23,1,23,1,23,1,23,3,23,892,8,23,1,23,1,23,1,23,1,23,1,23,
3,23,899,8,23,1,23,1,23,1,23,5,23,904,8,23,10,23,12,23,907,9,23,1,23,1,23,
1,23,3,23,912,8,23,1,24,1,24,3,24,916,8,24,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,1,24,1,24,3,24,943,8,24,1,24,1,24,1,24,1,24,1,24,3,24,950,8,
24,1,24,1,24,3,24,954,8,24,1,24,1,24,3,24,958,8,24,1,24,3,24,961,8,24,1,
24,1,24,5,24,965,8,24,10,24,12,24,968,9,24,1,24,1,24,1,24,1,24,5,24,974,
8,24,10,24,12,24,977,9,24,1,24,1,24,1,24,3,24,982,8,24,3,24,984,8,24,3,24,
986,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,996,8,24,10,24,12,
24,999,9,24,1,24,1,24,1,24,5,24,1004,8,24,10,24,12,24,1007,9,24,3,24,1009,
8,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,1017,8,24,10,24,12,24,1020,9,24,
1,24,1,24,1,24,1,24,5,24,1026,8,24,10,24,12,24,1029,9,24,1,24,1,24,1,24,
3,24,1034,8,24,1,24,1,24,1,24,5,24,1039,8,24,10,24,12,24,1042,9,24,3,24,
1044,8,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,1052,8,24,10,24,12,24,1055,
9,24,1,24,1,24,1,24,1,24,5,24,1061,8,24,10,24,12,24,1064,9,24,1,24,1,24,
1,24,3,24,1069,8,24,1,24,1,24,1,24,5,24,1074,8,24,10,24,12,24,1077,9,24,
3,24,1079,8,24,1,24,1,24,3,24,1083,8,24,1,25,1,25,1,25,1,25,3,25,1089,8,
25,1,25,1,25,3,25,1093,8,25,1,26,1,26,3,26,1097,8,26,1,26,1,26,3,26,1101,
8,26,3,26,1103,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,1122,8,28,10,28,12,28,1125,9,28,1,
28,1,28,1,28,5,28,1130,8,28,10,28,12,28,1133,9,28,1,28,1,28,1,28,1,28,1,
28,1,28,1,28,1,28,5,28,1143,8,28,10,28,12,28,1146,9,28,1,28,1,28,1,28,1,
28,1,28,1,28,1,28,1,28,5,28,1156,8,28,10,28,12,28,1159,9,28,1,28,1,28,1,
28,1,28,1,28,1,28,5,28,1167,8,28,10,28,12,28,1170,9,28,1,28,1,28,1,28,1,
28,5,28,1176,8,28,10,28,12,28,1179,9,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
28,1,28,1,28,5,28,1190,8,28,10,28,12,28,1193,9,28,3,28,1195,8,28,1,28,1,
28,1,28,1,28,1,28,1,28,5,28,1203,8,28,10,28,12,28,1206,9,28,1,28,1,28,3,
28,1210,8,28,1,28,1,28,3,28,1214,8,28,3,28,1216,8,28,1,29,1,29,1,29,1,29,
1,29,1,29,3,29,1224,8,29,1,29,1,29,5,29,1228,8,29,10,29,12,29,1231,9,29,
1,29,1,29,1,29,3,29,1236,8,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1244,8,
30,1,30,1,30,5,30,1248,8,30,10,30,12,30,1251,9,30,1,30,1,30,1,30,3,30,1256,
8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,1265,8,31,10,31,12,31,1268,
9,31,1,31,1,31,1,31,5,31,1273,8,31,10,31,12,31,1276,9,31,1,31,3,31,1279,
8,31,1,31,1,31,5,31,1283,8,31,10,31,12,31,1286,9,31,1,31,3,31,1289,8,31,
1,31,1,31,3,31,1293,8,31,1,32,1,32,1,32,5,32,1298,8,32,10,32,12,32,1301,
9,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1309,8,32,10,32,12,32,1312,9,32,
1,32,1,32,3,32,1316,8,32,1,32,1,32,1,32,1,32,5,32,1322,8,32,10,32,12,32,
1325,9,32,1,32,1,32,3,32,1329,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1337,
8,33,1,33,1,33,5,33,1341,8,33,10,33,12,33,1344,9,33,1,33,1,33,1,33,1,33,
1,33,1,33,5,33,1352,8,33,10,33,12,33,1355,9,33,3,33,1357,8,33,1,33,1,33,
1,33,1,33,1,33,1,33,5,33,1365,8,33,10,33,12,33,1368,9,33,1,33,1,33,3,33,
1372,8,33,1,33,1,33,1,33,1,33,5,33,1378,8,33,10,33,12,33,1381,9,33,1,33,
1,33,3,33,1385,8,33,1,33,1,33,3,33,1389,8,33,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,5,34,1399,8,34,10,34,12,34,1402,9,34,1,34,1,34,1,34,5,34,1407,
8,34,10,34,12,34,1410,9,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,
1420,8,34,10,34,12,34,1423,9,34,3,34,1425,8,34,1,34,1,34,3,34,1429,8,34,
3,34,1431,8,34,1,35,1,35,1,35,1,35,5,35,1437,8,35,10,35,12,35,1440,9,35,
1,35,1,35,1,35,5,35,1445,8,35,10,35,12,35,1448,9,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,5,35,1458,8,35,10,35,12,35,1461,9,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,5,35,1471,8,35,10,35,12,35,1474,9,35,1,35,1,35,
1,35,3,35,1479,8,35,1,35,3,35,1482,8,35,1,36,1,36,5,36,1486,8,36,10,36,12,
36,1489,9,36,1,36,1,36,1,36,5,36,1494,8,36,10,36,12,36,1497,9,36,1,36,1,
36,1,36,1,36,3,36,1503,8,36,1,36,1,36,1,37,1,37,5,37,1509,8,37,10,37,12,
37,1512,9,37,1,37,1,37,1,37,3,37,1517,8,37,1,38,1,38,1,38,3,38,1522,8,38,
1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1534,8,39,1,39,1,
39,5,39,1538,8,39,10,39,12,39,1541,9,39,1,39,1,39,1,39,1,39,3,39,1547,8,
39,1,39,1,39,1,39,3,39,1552,8,39,1,39,1,39,5,39,1556,8,39,10,39,12,39,1559,
9,39,1,39,1,39,3,39,1563,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,5,39,1576,8,39,10,39,12,39,1579,9,39,1,39,1,39,1,39,1,39,1,
39,3,39,1586,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1595,8,39,1,39,
1,39,3,39,1599,8,39,3,39,1601,8,39,1,40,1,40,1,40,1,40,5,40,1607,8,40,10,
40,12,40,1610,9,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,5,41,1619,8,41,10,
41,12,41,1622,9,41,1,41,1,41,1,41,1,41,1,42,1,42,5,42,1630,8,42,10,42,12,
42,1633,9,42,1,42,1,42,1,42,5,42,1638,8,42,10,42,12,42,1641,9,42,1,42,1,
42,1,42,5,42,1646,8,42,10,42,12,42,1649,9,42,1,42,1,42,1,42,1,42,1,42,3,
42,1656,8,42,1,43,1,43,5,43,1660,8,43,10,43,12,43,1663,9,43,1,43,1,43,1,
43,5,43,1668,8,43,10,43,12,43,1671,9,43,1,43,1,43,1,43,1,43,1,43,1,43,5,
43,1679,8,43,10,43,12,43,1682,9,43,1,43,1,43,1,43,1,43,3,43,1688,8,43,1,
43,1,43,3,43,1692,8,43,1,44,1,44,1,44,1,44,5,44,1698,8,44,10,44,12,44,1701,
9,44,1,44,1,44,1,44,5,44,1706,8,44,10,44,12,44,1709,9,44,1,44,1,44,1,44,
1,44,1,44,3,44,1716,8,44,1,45,1,45,5,45,1720,8,45,10,45,12,45,1723,9,45,
1,45,1,45,1,45,5,45,1728,8,45,10,45,12,45,1731,9,45,1,46,1,46,1,46,1,47,
1,47,1,47,3,47,1739,8,47,1,48,1,48,1,48,1,48,5,48,1745,8,48,10,48,12,48,
1748,9,48,1,48,1,48,1,49,1,49,3,49,1754,8,49,1,49,1,49,1,49,3,49,1759,8,
49,1,49,1,49,1,49,1,49,5,49,1765,8,49,10,49,12,49,1768,9,49,1,49,1,49,1,
49,3,49,1773,8,49,3,49,1775,8,49,1,49,1,49,3,49,1779,8,49,1,49,1,49,1,49,
1,49,5,49,1785,8,49,10,49,12,49,1788,9,49,1,49,1,49,1,49,3,49,1793,8,49,
3,49,1795,8,49,3,49,1797,8,49,1,50,1,50,1,50,1,50,1,50,3,50,1804,8,50,1,
50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1813,8,50,1,50,1,50,1,50,1,50,3,50,
1819,8,50,1,50,3,50,1822,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
50,3,50,1833,8,50,1,50,1,50,1,50,1,50,1,50,3,50,1840,8,50,1,50,1,50,1,50,
1,50,1,50,3,50,1847,8,50,1,50,1,50,3,50,1851,8,50,1,50,3,50,1854,8,50,1,
50,1,50,5,50,1858,8,50,10,50,12,50,1861,9,50,1,50,1,50,1,50,1,50,5,50,1867,
8,50,10,50,12,50,1870,9,50,1,50,1,50,1,50,3,50,1875,8,50,3,50,1877,8,50,
1,50,1,50,3,50,1881,8,50,1,50,1,50,3,50,1885,8,50,1,50,1,50,5,50,1889,8,
50,10,50,12,50,1892,9,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1900,8,50,1,
50,1,50,5,50,1904,8,50,10,50,12,50,1907,9,50,1,50,1,50,1,50,1,50,1,50,1,
50,1,50,1,50,3,50,1917,8,50,1,50,1,50,1,50,5,50,1922,8,50,10,50,12,50,1925,
9,50,1,50,1,50,1,50,1,50,5,50,1931,8,50,10,50,12,50,1934,9,50,1,50,1,50,
3,50,1938,8,50,1,50,3,50,1941,8,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,1949,
8,50,10,50,12,50,1952,9,50,1,50,1,50,1,50,1,50,1,50,3,50,1959,8,50,3,50,
1961,8,50,3,50,1963,8,50,3,50,1965,8,50,1,51,1,51,1,51,5,51,1970,8,51,10,
51,12,51,1973,9,51,1,51,1,51,1,51,1,52,1,52,1,52,5,52,1981,8,52,10,52,12,
52,1984,9,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,3,53,1994,8,53,1,53,
1,53,3,53,1998,8,53,1,53,1,53,3,53,2002,8,53,1,53,1,53,1,53,1,53,5,53,2008,
8,53,10,53,12,53,2011,9,53,1,53,1,53,1,53,3,53,2016,8,53,3,53,2018,8,53,
1,53,1,53,3,53,2022,8,53,1,53,1,53,1,53,1,53,5,53,2028,8,53,10,53,12,53,
2031,9,53,1,53,1,53,1,53,3,53,2036,8,53,3,53,2038,8,53,3,53,2040,8,53,1,
54,1,54,3,54,2044,8,54,1,54,1,54,1,54,1,54,3,54,2050,8,54,1,54,1,54,3,54,
2054,8,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,5,55,2064,8,55,10,55,12,
55,2067,9,55,3,55,2069,8,55,1,55,1,55,1,55,3,55,2074,8,55,1,55,1,55,1,55,
1,55,1,55,3,55,2081,8,55,1,56,1,56,1,56,1,56,1,56,1,56,5,56,2089,8,56,10,
56,12,56,2092,9,56,3,56,2094,8,56,1,56,1,56,1,56,3,56,2099,8,56,1,56,1,56,
1,56,1,56,1,56,3,56,2106,8,56,1,56,1,56,5,56,2110,8,56,10,56,12,56,2113,
9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,
59,1,59,1,59,3,59,2131,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
1,59,3,59,2143,8,59,3,59,2145,8,59,3,59,2147,8,59,1,59,1,59,1,60,1,60,1,
60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,2162,8,60,3,60,2164,8,60,
3,60,2166,8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2174,8,61,1,62,1,62,1,
62,3,62,2179,8,62,1,63,1,63,5,63,2183,8,63,10,63,12,63,2186,9,63,1,63,1,
63,1,63,1,63,3,63,2192,8,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,
1,64,3,64,2204,8,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,3,65,2213,8,65,1,
66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,2227,8,66,
5,66,2229,8,66,10,66,12,66,2232,9,66,1,66,1,66,1,66,1,66,5,66,2238,8,66,
10,66,12,66,2241,9,66,3,66,2243,8,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,
1,67,5,67,2253,8,67,10,67,12,67,2256,9,67,1,67,1,67,1,68,1,68,1,68,1,68,
1,68,1,68,1,68,1,68,1,68,3,68,2269,8,68,1,69,1,69,1,69,3,69,2274,8,69,1,
69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,2285,8,70,1,70,1,70,1,70,
1,70,3,70,2291,8,70,1,70,1,70,3,70,2295,8,70,1,70,3,70,2298,8,70,1,71,1,
71,1,71,1,71,3,71,2304,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,
2314,8,71,10,71,12,71,2317,9,71,3,71,2319,8,71,1,71,1,71,1,71,1,71,3,71,
2325,8,71,1,71,1,71,1,71,3,71,2330,8,71,1,71,1,71,1,71,3,71,2335,8,71,1,
72,1,72,1,72,1,72,1,72,3,72,2342,8,72,1,73,1,73,1,73,3,73,2347,8,73,1,73,
1,73,3,73,2351,8,73,1,73,1,73,3,73,2355,8,73,1,73,1,73,3,73,2359,8,73,3,
73,2361,8,73,1,73,1,73,1,73,4,73,2366,8,73,11,73,12,73,2367,1,73,1,73,1,
73,3,73,2373,8,73,1,73,1,73,1,73,3,73,2378,8,73,1,73,1,73,1,73,1,73,1,73,
3,73,2385,8,73,1,73,1,73,1,73,3,73,2390,8,73,1,74,1,74,1,74,1,74,1,74,1,
74,1,74,1,74,3,74,2400,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,
2410,8,75,10,75,12,75,2413,9,75,1,75,1,75,1,75,3,75,2418,8,75,1,75,1,75,
3,75,2422,8,75,1,75,3,75,2425,8,75,1,75,3,75,2428,8,75,1,75,1,75,3,75,2432,
8,75,1,75,1,75,1,75,1,75,1,75,5,75,2439,8,75,10,75,12,75,2442,9,75,1,75,
1,75,1,75,3,75,2447,8,75,1,75,1,75,1,75,1,75,3,75,2453,8,75,1,75,1,75,1,
75,1,75,1,75,1,75,1,75,1,75,5,75,2463,8,75,10,75,12,75,2466,9,75,3,75,2468,
8,75,1,75,1,75,1,75,1,75,3,75,2474,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,
76,4,76,2483,8,76,11,76,12,76,2484,3,76,2487,8,76,1,77,1,77,1,77,1,77,1,
77,3,77,2494,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
1,78,1,78,4,78,2509,8,78,11,78,12,78,2510,1,79,1,79,1,79,1,79,1,79,1,79,
3,79,2519,8,79,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2527,8,80,1,80,1,80,1,
80,1,80,1,80,1,80,1,80,3,80,2536,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,
1,81,3,81,2546,8,81,1,81,1,81,1,81,1,81,1,81,3,81,2553,8,81,1,81,1,81,1,
81,1,81,1,81,3,81,2560,8,81,3,81,2562,8,81,1,81,1,81,1,81,1,81,1,81,1,81,
1,81,1,81,1,81,1,81,1,81,3,81,2575,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,
82,3,82,2584,8,82,1,83,1,83,1,83,1,83,3,83,2590,8,83,1,83,1,83,1,83,1,83,
1,83,3,83,2597,8,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2605,8,83,1,83,1,
83,1,83,1,83,1,83,3,83,2612,8,83,5,83,2614,8,83,10,83,12,83,2617,9,83,1,
84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,2630,8,84,10,84,
12,84,2633,9,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,5,85,2645,
8,85,10,85,12,85,2648,9,85,1,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,
1,87,1,87,1,87,1,87,3,87,2663,8,87,1,87,3,87,2666,8,87,1,87,1,87,1,88,1,
88,1,88,1,88,5,88,2674,8,88,10,88,12,88,2677,9,88,1,88,1,88,1,88,3,88,2682,
8,88,1,88,1,88,3,88,2686,8,88,1,88,3,88,2689,8,88,1,89,1,89,1,89,1,89,1,
89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2702,8,89,1,89,1,89,1,89,1,89,3,89,
2708,8,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2716,8,89,1,89,1,89,3,89,2720,
8,89,3,89,2722,8,89,1,89,1,89,3,89,2726,8,89,1,89,1,89,1,89,1,89,3,89,2732,
8,89,1,89,1,89,5,89,2736,8,89,10,89,12,89,2739,9,89,1,89,1,89,1,89,1,89,
1,89,1,89,1,89,1,89,5,89,2749,8,89,10,89,12,89,2752,9,89,3,89,2754,8,89,
1,89,1,89,1,89,5,89,2759,8,89,10,89,12,89,2762,9,89,1,89,1,89,1,89,1,89,
1,89,5,89,2769,8,89,10,89,12,89,2772,9,89,1,89,1,89,1,89,5,89,2777,8,89,
10,89,12,89,2780,9,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2788,8,89,1,89,
1,89,1,89,1,89,3,89,2794,8,89,3,89,2796,8,89,1,90,1,90,1,90,1,90,1,90,1,
90,5,90,2804,8,90,10,90,12,90,2807,9,90,3,90,2809,8,90,1,90,1,90,1,90,1,
91,1,91,1,91,1,91,1,91,1,91,5,91,2820,8,91,10,91,12,91,2823,9,91,3,91,2825,
8,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,5,92,2834,8,92,10,92,12,92,2837,
9,92,1,92,3,92,2840,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,5,
93,2851,8,93,10,93,12,93,2854,9,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
94,3,94,2864,8,94,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2872,8,95,1,95,1,95,
1,95,3,95,2877,8,95,1,96,1,96,1,96,1,96,3,96,2883,8,96,1,96,1,96,1,96,1,
96,3,96,2889,8,96,1,96,3,96,2892,8,96,1,96,1,96,1,96,1,96,3,96,2898,8,96,
1,96,3,96,2901,8,96,1,96,1,96,1,96,1,96,3,96,2907,8,96,1,96,3,96,2910,8,
96,1,96,1,96,3,96,2914,8,96,1,96,1,96,1,97,3,97,2919,8,97,1,97,1,97,1,97,
1,97,3,97,2925,8,97,1,97,1,97,3,97,2929,8,97,1,97,1,97,1,97,1,97,3,97,2935,
8,97,1,98,1,98,1,98,1,98,1,99,1,99,3,99,2943,8,99,1,100,1,100,1,100,1,100,
3,100,2949,8,100,1,100,1,100,1,100,4,100,2954,8,100,11,100,12,100,2955,1,
100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,2967,8,100,1,100,
1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,2978,8,100,1,101,1,
101,1,101,1,101,1,101,3,101,2985,8,101,1,101,3,101,2988,8,101,3,101,2990,
8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,3010,8,102,1,102,1,102,3,
102,3014,8,102,1,102,3,102,3017,8,102,1,102,1,102,3,102,3021,8,102,1,103,
1,103,1,103,1,103,3,103,3027,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,3,103,3036,8,103,1,103,1,103,1,103,1,103,3,103,3042,8,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3067,8,103,3,
103,3069,8,103,3,103,3071,8,103,1,104,1,104,1,104,1,104,1,104,1,104,3,104,
3079,8,104,1,104,1,104,1,104,3,104,3084,8,104,1,105,1,105,1,105,1,105,1,
105,1,105,1,105,1,105,1,105,1,105,3,105,3096,8,105,1,105,1,105,1,105,1,105,
1,105,1,105,3,105,3104,8,105,4,105,3106,8,105,11,105,12,105,3107,1,106,1,
106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,3118,8,106,1,106,1,106,1,106,
1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
1,106,1,106,1,106,1,106,4,106,3139,8,106,11,106,12,106,3140,1,106,1,106,
1,106,1,106,1,106,1,106,1,106,1,106,1,106,4,106,3152,8,106,11,106,12,106,
3153,3,106,3156,8,106,1,106,1,106,1,106,1,106,1,106,3,106,3163,8,106,1,106,
1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,3185,8,106,1,106,1,106,1,
106,1,106,1,106,1,106,1,106,1,106,3,106,3195,8,106,1,106,1,106,3,106,3199,
8,106,1,107,1,107,1,107,3,107,3204,8,107,1,107,1,107,1,107,1,107,3,107,3210,
8,107,1,107,1,107,1,107,1,107,1,107,1,107,5,107,3218,8,107,10,107,12,107,
3221,9,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,3229,8,107,1,107,3,
107,3232,8,107,1,107,3,107,3235,8,107,1,107,1,107,1,107,1,107,1,107,1,107,
5,107,3243,8,107,10,107,12,107,3246,9,107,3,107,3248,8,107,3,107,3250,8,
107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,
108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,5,109,3271,8,109,10,109,12,
109,3274,9,109,1,110,1,110,1,110,1,110,3,110,3280,8,110,1,110,3,110,3283,
8,110,1,110,1,110,1,110,1,110,1,110,3,110,3290,8,110,1,110,3,110,3293,8,
110,5,110,3295,8,110,10,110,12,110,3298,9,110,1,111,1,111,1,111,1,111,1,
111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,5,111,3313,8,111,10,
111,12,111,3316,9,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,
111,1,111,5,111,3328,8,111,10,111,12,111,3331,9,111,1,111,1,111,1,111,1,
111,1,111,5,111,3338,8,111,10,111,12,111,3341,9,111,1,111,1,111,1,111,3,
111,3346,8,111,1,111,3,111,3349,8,111,1,111,1,111,1,111,1,112,1,112,1,112,
1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
1,113,3,113,3370,8,113,1,113,1,113,1,113,1,113,3,113,3376,8,113,1,113,1,
113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,3387,8,113,4,113,3389,
8,113,11,113,12,113,3390,3,113,3393,8,113,1,114,1,114,1,114,1,114,1,114,
1,114,1,114,3,114,3402,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,
114,3411,8,114,1,114,1,114,1,114,1,114,1,114,3,114,3418,8,114,1,115,1,115,
1,115,1,115,1,115,1,115,1,115,5,115,3427,8,115,10,115,12,115,3430,9,115,
1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,5,117,
3443,8,117,10,117,12,117,3446,9,117,1,118,1,118,1,118,1,118,1,118,1,118,
3,118,3454,8,118,1,118,1,118,1,118,1,118,3,118,3460,8,118,1,119,1,119,1,
119,1,119,1,119,1,119,1,119,1,119,3,119,3470,8,119,1,120,1,120,1,120,1,120,
1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,3484,8,120,1,121,1,
121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,3498,
8,121,1,122,1,122,1,122,3,122,3503,8,122,1,122,1,122,1,122,1,122,1,122,1,
122,1,122,1,122,1,122,5,122,3514,8,122,10,122,12,122,3517,9,122,1,122,1,
122,3,122,3521,8,122,1,122,1,122,1,122,1,122,1,122,3,122,3528,8,122,1,122,
1,122,1,122,1,122,1,122,3,122,3535,8,122,1,122,1,122,1,122,1,122,1,122,3,
122,3542,8,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,
1,124,1,124,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
3,126,3566,8,126,1,126,1,126,3,126,3570,8,126,1,127,1,127,1,127,1,127,1,
127,1,127,1,127,3,127,3579,8,127,1,127,1,127,1,127,3,127,3584,8,127,3,127,
3586,8,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,3596,8,
128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,3605,8,128,1,128,1,128,
1,128,3,128,3610,8,128,3,128,3612,8,128,3,128,3614,8,128,3,128,3616,8,128,
1,129,1,129,1,129,1,129,1,129,1,129,5,129,3624,8,129,10,129,12,129,3627,
9,129,1,129,1,129,1,130,1,130,1,130,3,130,3634,8,130,1,130,1,130,1,130,3,
130,3639,8,130,1,131,1,131,1,131,1,131,3,131,3645,8,131,1,131,1,131,1,131,
5,131,3650,8,131,10,131,12,131,3653,9,131,1,132,1,132,1,132,1,132,1,133,
1,133,3,133,3661,8,133,1,133,1,133,1,133,3,133,3666,8,133,3,133,3668,8,133,
1,134,1,134,1,134,1,134,1,134,1,134,5,134,3676,8,134,10,134,12,134,3679,
9,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
1,134,3,134,3693,8,134,1,134,3,134,3696,8,134,1,134,1,134,1,134,1,134,1,
134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,3709,8,134,1,134,3,134,3712,
8,134,5,134,3714,8,134,10,134,12,134,3717,9,134,3,134,3719,8,134,1,134,1,
134,1,134,1,134,1,134,1,134,1,134,3,134,3728,8,134,1,134,1,134,1,134,1,134,
1,134,1,134,1,134,3,134,3737,8,134,1,135,3,135,3740,8,135,1,135,1,135,1,
135,3,135,3745,8,135,1,135,1,135,1,135,3,135,3750,8,135,1,135,1,135,1,136,
3,136,3755,8,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,3763,8,136,1,
136,1,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,5,137,3774,8,137,10,
137,12,137,3777,9,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,
137,1,137,1,137,1,137,1,137,5,137,3792,8,137,10,137,12,137,3795,9,137,3,
137,3797,8,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,3805,8,137,1,137,
1,137,1,137,3,137,3810,8,137,1,137,1,137,1,137,3,137,3815,8,137,1,137,1,
137,1,137,1,137,1,137,3,137,3822,8,137,1,138,1,138,1,138,1,138,1,138,1,138,
1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,3839,8,138,1,
139,1,139,1,140,1,140,1,140,0,0,141,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
262,264,266,268,270,272,274,276,278,280,0,13,2,0,58,58,146,146,2,0,68,68,
83,83,2,0,38,38,44,44,2,0,91,91,103,103,2,0,16,16,146,146,2,0,8,8,17,22,
2,0,38,39,55,55,1,0,9,10,4,0,12,12,38,38,44,44,146,146,5,0,46,47,58,58,96,
96,138,138,146,146,2,0,38,38,146,146,2,0,93,93,120,120,1,0,60,138,4328,0,
285,1,0,0,0,2,309,1,0,0,0,4,313,1,0,0,0,6,347,1,0,0,0,8,357,1,0,0,0,10,403,
1,0,0,0,12,408,1,0,0,0,14,410,1,0,0,0,16,414,1,0,0,0,18,425,1,0,0,0,20,440,
1,0,0,0,22,455,1,0,0,0,24,503,1,0,0,0,26,535,1,0,0,0,28,634,1,0,0,0,30,667,
1,0,0,0,32,690,1,0,0,0,34,726,1,0,0,0,36,732,1,0,0,0,38,768,1,0,0,0,40,796,
1,0,0,0,42,811,1,0,0,0,44,850,1,0,0,0,46,859,1,0,0,0,48,1082,1,0,0,0,50,
1092,1,0,0,0,52,1102,1,0,0,0,54,1104,1,0,0,0,56,1108,1,0,0,0,58,1217,1,0,
0,0,60,1237,1,0,0,0,62,1257,1,0,0,0,64,1328,1,0,0,0,66,1330,1,0,0,0,68,1390,
1,0,0,0,70,1481,1,0,0,0,72,1483,1,0,0,0,74,1506,1,0,0,0,76,1518,1,0,0,0,
78,1527,1,0,0,0,80,1602,1,0,0,0,82,1615,1,0,0,0,84,1627,1,0,0,0,86,1657,
1,0,0,0,88,1693,1,0,0,0,90,1717,1,0,0,0,92,1732,1,0,0,0,94,1738,1,0,0,0,
96,1740,1,0,0,0,98,1796,1,0,0,0,100,1964,1,0,0,0,102,1966,1,0,0,0,104,1977,
1,0,0,0,106,1993,1,0,0,0,108,2053,1,0,0,0,110,2080,1,0,0,0,112,2105,1,0,
0,0,114,2116,1,0,0,0,116,2120,1,0,0,0,118,2124,1,0,0,0,120,2150,1,0,0,0,
122,2167,1,0,0,0,124,2178,1,0,0,0,126,2180,1,0,0,0,128,2196,1,0,0,0,130,
2207,1,0,0,0,132,2214,1,0,0,0,134,2247,1,0,0,0,136,2259,1,0,0,0,138,2270,
1,0,0,0,140,2277,1,0,0,0,142,2303,1,0,0,0,144,2336,1,0,0,0,146,2389,1,0,
0,0,148,2399,1,0,0,0,150,2401,1,0,0,0,152,2475,1,0,0,0,154,2488,1,0,0,0,
156,2508,1,0,0,0,158,2518,1,0,0,0,160,2520,1,0,0,0,162,2539,1,0,0,0,164,
2583,1,0,0,0,166,2585,1,0,0,0,168,2618,1,0,0,0,170,2637,1,0,0,0,172,2652,
1,0,0,0,174,2655,1,0,0,0,176,2688,1,0,0,0,178,2690,1,0,0,0,180,2797,1,0,
0,0,182,2813,1,0,0,0,184,2839,1,0,0,0,186,2841,1,0,0,0,188,2855,1,0,0,0,
190,2865,1,0,0,0,192,2913,1,0,0,0,194,2924,1,0,0,0,196,2936,1,0,0,0,198,
2940,1,0,0,0,200,2977,1,0,0,0,202,2989,1,0,0,0,204,3020,1,0,0,0,206,3070,
1,0,0,0,208,3078,1,0,0,0,210,3105,1,0,0,0,212,3198,1,0,0,0,214,3200,1,0,
0,0,216,3254,1,0,0,0,218,3264,1,0,0,0,220,3275,1,0,0,0,222,3299,1,0,0,0,
224,3353,1,0,0,0,226,3369,1,0,0,0,228,3401,1,0,0,0,230,3419,1,0,0,0,232,
3431,1,0,0,0,234,3438,1,0,0,0,236,3447,1,0,0,0,238,3469,1,0,0,0,240,3483,
1,0,0,0,242,3497,1,0,0,0,244,3499,1,0,0,0,246,3545,1,0,0,0,248,3550,1,0,
0,0,250,3555,1,0,0,0,252,3558,1,0,0,0,254,3571,1,0,0,0,256,3587,1,0,0,0,
258,3617,1,0,0,0,260,3630,1,0,0,0,262,3640,1,0,0,0,264,3654,1,0,0,0,266,
3667,1,0,0,0,268,3736,1,0,0,0,270,3739,1,0,0,0,272,3754,1,0,0,0,274,3821,
1,0,0,0,276,3838,1,0,0,0,278,3840,1,0,0,0,280,3842,1,0,0,0,282,284,3,4,2,
0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,304,
1,0,0,0,287,285,1,0,0,0,288,293,3,2,1,0,289,292,3,4,2,0,290,292,3,8,4,0,
291,289,1,0,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,
1,0,0,0,294,305,1,0,0,0,295,293,1,0,0,0,296,301,3,8,4,0,297,300,3,4,2,0,
298,300,3,8,4,0,299,297,1,0,0,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,
1,0,0,0,301,302,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,304,288,1,0,0,0,
304,296,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,6,0,-1,0,307,308,
5,0,0,1,308,1,1,0,0,0,309,310,5,111,0,0,310,311,3,218,109,0,311,312,5,1,
0,0,312,3,1,0,0,0,313,314,6,2,-1,0,314,343,5,135,0,0,315,316,5,46,0,0,316,
317,5,33,0,0,317,344,6,2,-1,0,318,322,3,6,3,0,319,320,5,46,0,0,320,321,5,
33,0,0,321,323,6,2,-1,0,322,319,1,0,0,0,322,323,1,0,0,0,323,344,1,0,0,0,
324,325,6,2,-1,0,325,326,5,2,0,0,326,327,6,2,-1,0,327,333,3,6,3,0,328,329,
5,3,0,0,329,330,6,2,-1,0,330,332,3,6,3,0,331,328,1,0,0,0,332,335,1,0,0,0,
333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,337,
5,4,0,0,337,341,6,2,-1,0,338,339,5,46,0,0,339,340,5,33,0,0,340,342,6,2,-1,
0,341,338,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,315,1,0,0,0,343,318,
1,0,0,0,343,324,1,0,0,0,344,345,1,0,0,0,345,346,5,1,0,0,346,5,1,0,0,0,347,
348,6,3,-1,0,348,349,3,218,109,0,349,355,6,3,-1,0,350,351,5,40,0,0,351,352,
3,280,140,0,352,353,6,3,-1,0,353,356,1,0,0,0,354,356,6,3,-1,0,355,350,1,
0,0,0,355,354,1,0,0,0,356,7,1,0,0,0,357,361,6,4,-1,0,358,360,3,254,127,0,
359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,391,
1,0,0,0,363,361,1,0,0,0,364,366,5,77,0,0,365,364,1,0,0,0,365,366,1,0,0,0,
366,376,1,0,0,0,367,377,3,18,9,0,368,377,3,20,10,0,369,377,3,26,13,0,370,
377,3,32,16,0,371,377,3,28,14,0,372,377,3,16,8,0,373,377,3,24,12,0,374,377,
3,22,11,0,375,377,3,34,17,0,376,367,1,0,0,0,376,368,1,0,0,0,376,369,1,0,
0,0,376,370,1,0,0,0,376,371,1,0,0,0,376,372,1,0,0,0,376,373,1,0,0,0,376,
374,1,0,0,0,376,375,1,0,0,0,377,392,1,0,0,0,378,379,5,90,0,0,379,386,6,4,
-1,0,380,387,3,58,29,0,381,387,3,60,30,0,382,387,3,62,31,0,383,387,3,66,
33,0,384,387,3,68,34,0,385,387,3,56,28,0,386,380,1,0,0,0,386,381,1,0,0,0,
386,382,1,0,0,0,386,383,1,0,0,0,386,384,1,0,0,0,386,385,1,0,0,0,387,392,
1,0,0,0,388,389,5,64,0,0,389,390,6,4,-1,0,390,392,3,78,39,0,391,365,1,0,
0,0,391,378,1,0,0,0,391,388,1,0,0,0,392,9,1,0,0,0,393,394,5,2,0,0,394,398,
6,5,-1,0,395,397,3,8,4,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,
398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,5,4,0,0,402,404,
6,5,-1,0,403,393,1,0,0,0,403,404,1,0,0,0,404,11,1,0,0,0,405,409,5,1,0,0,
406,407,6,6,-1,0,407,409,5,4,0,0,408,405,1,0,0,0,408,406,1,0,0,0,409,13,
1,0,0,0,410,412,6,7,-1,0,411,413,5,1,0,0,412,411,1,0,0,0,412,413,1,0,0,0,
413,15,1,0,0,0,414,415,5,65,0,0,415,416,3,218,109,0,416,420,6,8,-1,0,417,
419,3,252,126,0,418,417,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,
1,0,0,0,421,423,1,0,0,0,422,420,1,0,0,0,423,424,3,100,50,0,424,17,1,0,0,
0,425,426,5,127,0,0,426,427,3,218,109,0,427,428,6,9,-1,0,428,432,6,9,-1,
0,429,431,3,252,126,0,430,429,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,
433,1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,438,3,10,5,0,436,439,3,12,
6,0,437,439,5,152,0,0,438,436,1,0,0,0,438,437,1,0,0,0,439,19,1,0,0,0,440,
441,5,73,0,0,441,442,3,218,109,0,442,443,6,10,-1,0,443,447,6,10,-1,0,444,
446,3,252,126,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,
1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,453,3,10,5,0,451,454,3,12,6,
0,452,454,5,152,0,0,453,451,1,0,0,0,453,452,1,0,0,0,454,21,1,0,0,0,455,456,
5,85,0,0,456,457,3,218,109,0,457,461,6,11,-1,0,458,460,3,252,126,0,459,458,
1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,501,1,0,0,0,
463,461,1,0,0,0,464,465,3,102,51,0,465,466,3,14,7,0,466,502,1,0,0,0,467,
499,5,5,0,0,468,469,6,11,-1,0,469,490,3,218,109,0,470,476,6,11,-1,0,471,
472,5,3,0,0,472,473,6,11,-1,0,473,475,3,92,46,0,474,471,1,0,0,0,475,478,
1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,476,1,0,0,0,
479,480,3,102,51,0,480,481,3,14,7,0,481,491,1,0,0,0,482,486,6,11,-1,0,483,
485,3,254,127,0,484,483,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,
1,0,0,0,487,489,1,0,0,0,488,486,1,0,0,0,489,491,3,12,6,0,490,470,1,0,0,0,
490,482,1,0,0,0,491,500,1,0,0,0,492,493,3,102,51,0,493,494,3,14,7,0,494,
500,1,0,0,0,495,496,3,140,70,0,496,497,6,11,-1,0,497,498,3,12,6,0,498,500,
1,0,0,0,499,468,1,0,0,0,499,492,1,0,0,0,499,495,1,0,0,0,500,502,1,0,0,0,
501,464,1,0,0,0,501,467,1,0,0,0,502,23,1,0,0,0,503,504,5,137,0,0,504,505,
3,218,109,0,505,509,6,12,-1,0,506,508,3,252,126,0,507,506,1,0,0,0,508,511,
1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,526,1,0,0,0,511,509,1,0,0,0,
512,527,3,40,20,0,513,514,7,0,0,0,514,515,6,12,-1,0,515,516,5,118,0,0,516,
521,3,38,19,0,517,518,5,3,0,0,518,520,3,38,19,0,519,517,1,0,0,0,520,523,
1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,521,1,0,0,0,
524,525,6,12,-1,0,525,527,1,0,0,0,526,512,1,0,0,0,526,513,1,0,0,0,526,527,
1,0,0,0,527,528,1,0,0,0,528,529,5,40,0,0,529,530,3,144,72,0,530,533,6,12,
-1,0,531,534,3,12,6,0,532,534,5,152,0,0,533,531,1,0,0,0,533,532,1,0,0,0,
534,25,1,0,0,0,535,536,5,83,0,0,536,537,3,218,109,0,537,541,6,13,-1,0,538,
540,3,252,126,0,539,538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,
1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,544,546,3,40,20,0,545,544,1,0,0,
0,545,546,1,0,0,0,546,626,1,0,0,0,547,548,5,5,0,0,548,554,3,92,46,0,549,
550,5,3,0,0,550,551,6,13,-1,0,551,553,3,92,46,0,552,549,1,0,0,0,553,556,
1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,
557,547,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,560,5,2,0,0,560,564,
6,13,-1,0,561,563,3,44,22,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,
0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,568,5,4,0,0,568,
580,6,13,-1,0,569,570,5,62,0,0,570,571,5,2,0,0,571,575,6,13,-1,0,572,574,
3,36,18,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,
0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,4,0,0,579,581,6,13,-1,0,580,
569,1,0,0,0,580,581,1,0,0,0,581,584,1,0,0,0,582,585,3,12,6,0,583,585,5,152,
0,0,584,582,1,0,0,0,584,583,1,0,0,0,585,627,1,0,0,0,586,624,5,40,0,0,587,
588,3,144,72,0,588,600,6,13,-1,0,589,590,5,62,0,0,590,591,5,2,0,0,591,595,
6,13,-1,0,592,594,3,36,18,0,593,592,1,0,0,0,594,597,1,0,0,0,595,593,1,0,
0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,599,5,4,0,0,599,
601,6,13,-1,0,600,589,1,0,0,0,600,601,1,0,0,0,601,604,1,0,0,0,602,605,3,
12,6,0,603,605,5,152,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,625,1,0,0,0,
606,607,3,140,70,0,607,608,6,13,-1,0,608,620,3,142,71,0,609,610,5,62,0,0,
610,611,5,2,0,0,611,615,6,13,-1,0,612,614,3,36,18,0,613,612,1,0,0,0,614,
617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,618,1,0,0,0,617,615,1,0,
0,0,618,619,5,4,0,0,619,621,6,13,-1,0,620,609,1,0,0,0,620,621,1,0,0,0,621,
622,1,0,0,0,622,623,3,14,7,0,623,625,1,0,0,0,624,587,1,0,0,0,624,606,1,0,
0,0,625,627,1,0,0,0,626,557,1,0,0,0,626,586,1,0,0,0,627,27,1,0,0,0,628,635,
5,68,0,0,629,632,5,60,0,0,630,632,5,146,0,0,631,629,1,0,0,0,631,630,1,0,
0,0,632,633,1,0,0,0,633,635,5,83,0,0,634,628,1,0,0,0,634,631,1,0,0,0,635,
636,1,0,0,0,636,637,3,218,109,0,637,641,6,14,-1,0,638,640,3,252,126,0,639,
638,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,661,1,0,
0,0,643,641,1,0,0,0,644,658,5,5,0,0,645,651,3,92,46,0,646,647,5,3,0,0,647,
648,6,14,-1,0,648,650,3,92,46,0,649,646,1,0,0,0,650,653,1,0,0,0,651,649,
1,0,0,0,651,652,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,654,656,3,30,15,
0,655,654,1,0,0,0,655,656,1,0,0,0,656,659,1,0,0,0,657,659,3,30,15,0,658,
645,1,0,0,0,658,657,1,0,0,0,659,662,1,0,0,0,660,662,3,30,15,0,661,644,1,
0,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,665,1,0,0,0,663,666,3,12,6,0,664,
666,5,152,0,0,665,663,1,0,0,0,665,664,1,0,0,0,666,29,1,0,0,0,667,668,5,2,
0,0,668,672,6,15,-1,0,669,671,3,44,22,0,670,669,1,0,0,0,671,674,1,0,0,0,
672,670,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,672,1,0,0,0,675,676,
5,4,0,0,676,688,6,15,-1,0,677,678,5,62,0,0,678,679,5,2,0,0,679,683,6,15,
-1,0,680,682,3,36,18,0,681,680,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,
684,1,0,0,0,684,686,1,0,0,0,685,683,1,0,0,0,686,687,5,4,0,0,687,689,6,15,
-1,0,688,677,1,0,0,0,688,689,1,0,0,0,689,31,1,0,0,0,690,691,5,131,0,0,691,
692,3,218,109,0,692,696,6,16,-1,0,693,695,3,252,126,0,694,693,1,0,0,0,695,
698,1,0,0,0,696,694,1,0,0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,696,1,0,
0,0,699,700,3,100,50,0,700,33,1,0,0,0,701,702,5,61,0,0,702,703,3,218,109,
0,703,707,6,17,-1,0,704,706,3,252,126,0,705,704,1,0,0,0,706,709,1,0,0,0,
707,705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,707,1,0,0,0,710,712,
3,40,20,0,711,713,3,96,48,0,712,711,1,0,0,0,712,713,1,0,0,0,713,727,1,0,
0,0,714,715,5,95,0,0,715,716,3,218,109,0,716,720,6,17,-1,0,717,719,3,252,
126,0,718,717,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,
723,1,0,0,0,722,720,1,0,0,0,723,724,3,40,20,0,724,725,3,96,48,0,725,727,
1,0,0,0,726,701,1,0,0,0,726,714,1,0,0,0,727,730,1,0,0,0,728,731,3,12,6,0,
729,731,5,152,0,0,730,728,1,0,0,0,730,729,1,0,0,0,731,35,1,0,0,0,732,736,
6,18,-1,0,733,735,3,254,127,0,734,733,1,0,0,0,735,738,1,0,0,0,736,734,1,
0,0,0,736,737,1,0,0,0,737,764,1,0,0,0,738,736,1,0,0,0,739,740,5,61,0,0,740,
741,3,280,140,0,741,745,6,18,-1,0,742,744,3,252,126,0,743,742,1,0,0,0,744,
747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,745,1,0,
0,0,748,750,3,40,20,0,749,751,3,96,48,0,750,749,1,0,0,0,750,751,1,0,0,0,
751,765,1,0,0,0,752,753,5,95,0,0,753,754,3,280,140,0,754,758,6,18,-1,0,755,
757,3,252,126,0,756,755,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,
1,0,0,0,759,761,1,0,0,0,760,758,1,0,0,0,761,762,3,40,20,0,762,763,3,96,48,
0,763,765,1,0,0,0,764,739,1,0,0,0,764,752,1,0,0,0,765,766,1,0,0,0,766,767,
3,12,6,0,767,37,1,0,0,0,768,774,6,19,-1,0,769,770,3,254,127,0,770,771,6,
19,-1,0,771,773,1,0,0,0,772,769,1,0,0,0,773,776,1,0,0,0,774,772,1,0,0,0,
774,775,1,0,0,0,775,777,1,0,0,0,776,774,1,0,0,0,777,778,3,280,140,0,778,
782,6,19,-1,0,779,781,3,252,126,0,780,779,1,0,0,0,781,784,1,0,0,0,782,780,
1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,782,1,0,0,0,785,787,3,94,47,
0,786,788,3,54,27,0,787,786,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,
793,6,19,-1,0,790,792,3,254,127,0,791,790,1,0,0,0,792,795,1,0,0,0,793,791,
1,0,0,0,793,794,1,0,0,0,794,39,1,0,0,0,795,793,1,0,0,0,796,797,5,6,0,0,797,
798,6,20,-1,0,798,799,6,20,-1,0,799,805,3,38,19,0,800,801,5,3,0,0,801,802,
6,20,-1,0,802,804,3,38,19,0,803,800,1,0,0,0,804,807,1,0,0,0,805,803,1,0,
0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,805,1,0,0,0,808,809,5,7,0,0,809,
810,6,20,-1,0,810,41,1,0,0,0,811,815,6,21,-1,0,812,814,3,254,127,0,813,812,
1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,
817,815,1,0,0,0,818,819,3,280,140,0,819,823,6,21,-1,0,820,822,3,254,127,
0,821,820,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,846,
1,0,0,0,825,823,1,0,0,0,826,827,5,8,0,0,827,837,6,21,-1,0,828,829,3,276,
138,0,829,830,6,21,-1,0,830,838,1,0,0,0,831,834,5,9,0,0,832,834,5,10,0,0,
833,831,1,0,0,0,833,832,1,0,0,0,834,835,1,0,0,0,835,836,5,59,0,0,836,838,
6,21,-1,0,837,828,1,0,0,0,837,833,1,0,0,0,838,839,1,0,0,0,839,843,6,21,-1,
0,840,842,3,254,127,0,841,840,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,
844,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,846,826,1,0,0,0,846,847,1,0,
0,0,847,848,1,0,0,0,848,849,3,12,6,0,849,43,1,0,0,0,850,854,6,22,-1,0,851,
853,3,254,127,0,852,851,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,
1,0,0,0,855,857,1,0,0,0,856,854,1,0,0,0,857,858,3,46,23,0,858,45,1,0,0,0,
859,862,6,23,-1,0,860,861,5,142,0,0,861,863,6,23,-1,0,862,860,1,0,0,0,862,
863,1,0,0,0,863,866,1,0,0,0,864,865,5,48,0,0,865,867,6,23,-1,0,866,864,1,
0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,871,6,23,-1,0,869,870,5,141,0,
0,870,872,6,23,-1,0,871,869,1,0,0,0,871,872,1,0,0,0,872,873,1,0,0,0,873,
876,6,23,-1,0,874,875,5,140,0,0,875,877,6,23,-1,0,876,874,1,0,0,0,876,877,
1,0,0,0,877,878,1,0,0,0,878,879,3,280,140,0,879,883,6,23,-1,0,880,882,3,
252,126,0,881,880,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,
0,884,911,1,0,0,0,885,883,1,0,0,0,886,891,3,102,51,0,887,888,3,124,62,0,
888,889,3,12,6,0,889,892,1,0,0,0,890,892,3,14,7,0,891,887,1,0,0,0,891,890,
1,0,0,0,892,912,1,0,0,0,893,894,5,5,0,0,894,912,3,48,24,0,895,896,5,8,0,
0,896,898,3,208,104,0,897,899,5,128,0,0,898,897,1,0,0,0,898,899,1,0,0,0,
899,900,1,0,0,0,900,901,6,23,-1,0,901,905,6,23,-1,0,902,904,3,254,127,0,
903,902,1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,905,906,1,0,0,0,906,908,
1,0,0,0,907,905,1,0,0,0,908,909,3,12,6,0,909,912,1,0,0,0,910,912,3,12,6,
0,911,886,1,0,0,0,911,893,1,0,0,0,911,895,1,0,0,0,911,910,1,0,0,0,912,47,
1,0,0,0,913,915,3,102,51,0,914,916,3,124,62,0,915,914,1,0,0,0,915,916,1,
0,0,0,916,917,1,0,0,0,917,918,3,12,6,0,918,1083,1,0,0,0,919,942,3,108,54,
0,920,921,3,102,51,0,921,922,3,14,7,0,922,943,1,0,0,0,923,924,5,114,0,0,
924,925,6,24,-1,0,925,926,3,104,52,0,926,927,3,14,7,0,927,943,1,0,0,0,928,
929,5,108,0,0,929,930,6,24,-1,0,930,931,3,104,52,0,931,932,3,14,7,0,932,
943,1,0,0,0,933,934,3,116,58,0,934,935,3,112,56,0,935,943,1,0,0,0,936,937,
3,114,57,0,937,938,3,112,56,0,938,943,1,0,0,0,939,940,3,218,109,0,940,941,
3,112,56,0,941,943,1,0,0,0,942,920,1,0,0,0,942,923,1,0,0,0,942,928,1,0,0,
0,942,933,1,0,0,0,942,936,1,0,0,0,942,939,1,0,0,0,943,1083,1,0,0,0,944,945,
5,66,0,0,945,946,5,52,0,0,946,950,6,24,-1,0,947,948,5,108,0,0,948,950,6,
24,-1,0,949,944,1,0,0,0,949,947,1,0,0,0,950,985,1,0,0,0,951,953,3,102,51,
0,952,954,3,124,62,0,953,952,1,0,0,0,953,954,1,0,0,0,954,986,1,0,0,0,955,
958,3,128,64,0,956,958,3,130,65,0,957,955,1,0,0,0,957,956,1,0,0,0,958,960,
1,0,0,0,959,961,3,124,62,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,
0,962,966,6,24,-1,0,963,965,3,254,127,0,964,963,1,0,0,0,965,968,1,0,0,0,
966,964,1,0,0,0,966,967,1,0,0,0,967,983,1,0,0,0,968,966,1,0,0,0,969,970,
5,84,0,0,970,971,5,2,0,0,971,975,6,24,-1,0,972,974,3,42,21,0,973,972,1,0,
0,0,974,977,1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,978,1,0,0,0,977,
975,1,0,0,0,978,979,5,4,0,0,979,981,6,24,-1,0,980,982,3,124,62,0,981,980,
1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,969,1,0,0,0,983,984,1,0,0,0,
984,986,1,0,0,0,985,951,1,0,0,0,985,957,1,0,0,0,986,987,1,0,0,0,987,988,
3,12,6,0,988,1083,1,0,0,0,989,990,5,107,0,0,990,991,6,24,-1,0,991,992,3,
130,65,0,992,993,3,122,61,0,993,997,6,24,-1,0,994,996,3,254,127,0,995,994,
1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,1008,1,0,0,0,
999,997,1,0,0,0,1000,1001,3,50,25,0,1001,1005,6,24,-1,0,1002,1004,3,254,
127,0,1003,1002,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,1,
0,0,0,1006,1009,1,0,0,0,1007,1005,1,0,0,0,1008,1000,1,0,0,0,1008,1009,1,
0,0,0,1009,1010,1,0,0,0,1010,1011,3,12,6,0,1011,1083,1,0,0,0,1012,1013,3,
128,64,0,1013,1014,3,122,61,0,1014,1018,6,24,-1,0,1015,1017,3,254,127,0,
1016,1015,1,0,0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,
1019,1043,1,0,0,0,1020,1018,1,0,0,0,1021,1022,5,84,0,0,1022,1023,5,2,0,0,
1023,1027,6,24,-1,0,1024,1026,3,42,21,0,1025,1024,1,0,0,0,1026,1029,1,0,
0,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,1027,1,0,
0,0,1030,1031,5,4,0,0,1031,1033,6,24,-1,0,1032,1034,3,50,25,0,1033,1032,
1,0,0,0,1033,1034,1,0,0,0,1034,1044,1,0,0,0,1035,1036,3,50,25,0,1036,1040,
6,24,-1,0,1037,1039,3,254,127,0,1038,1037,1,0,0,0,1039,1042,1,0,0,0,1040,
1038,1,0,0,0,1040,1041,1,0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1043,
1021,1,0,0,0,1043,1035,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,
1046,3,12,6,0,1046,1083,1,0,0,0,1047,1048,3,130,65,0,1048,1049,3,122,61,
0,1049,1053,6,24,-1,0,1050,1052,3,254,127,0,1051,1050,1,0,0,0,1052,1055,
1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1078,1,0,0,0,1055,1053,
1,0,0,0,1056,1057,5,84,0,0,1057,1058,5,2,0,0,1058,1062,6,24,-1,0,1059,1061,
3,42,21,0,1060,1059,1,0,0,0,1061,1064,1,0,0,0,1062,1060,1,0,0,0,1062,1063,
1,0,0,0,1063,1065,1,0,0,0,1064,1062,1,0,0,0,1065,1066,5,4,0,0,1066,1068,
6,24,-1,0,1067,1069,3,50,25,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1079,
1,0,0,0,1070,1071,3,50,25,0,1071,1075,6,24,-1,0,1072,1074,3,254,127,0,1073,
1072,1,0,0,0,1074,1077,1,0,0,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,
1079,1,0,0,0,1077,1075,1,0,0,0,1078,1056,1,0,0,0,1078,1070,1,0,0,0,1078,
1079,1,0,0,0,1079,1080,1,0,0,0,1080,1081,3,12,6,0,1081,1083,1,0,0,0,1082,
913,1,0,0,0,1082,919,1,0,0,0,1082,949,1,0,0,0,1082,989,1,0,0,0,1082,1012,
1,0,0,0,1082,1047,1,0,0,0,1083,49,1,0,0,0,1084,1093,3,52,26,0,1085,1086,
5,8,0,0,1086,1088,3,208,104,0,1087,1089,5,128,0,0,1088,1087,1,0,0,0,1088,
1089,1,0,0,0,1089,1090,1,0,0,0,1090,1091,6,25,-1,0,1091,1093,1,0,0,0,1092,
1084,1,0,0,0,1092,1085,1,0,0,0,1093,51,1,0,0,0,1094,1096,3,54,27,0,1095,
1097,3,124,62,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,1103,1,0,0,0,1098,
1100,3,124,62,0,1099,1101,3,54,27,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,
1101,1103,1,0,0,0,1102,1094,1,0,0,0,1102,1098,1,0,0,0,1103,53,1,0,0,0,1104,
1105,5,76,0,0,1105,1106,3,208,104,0,1106,1107,6,27,-1,0,1107,55,1,0,0,0,
1108,1215,3,218,109,0,1109,1110,5,5,0,0,1110,1111,3,218,109,0,1111,1112,
6,28,-1,0,1112,1113,3,70,35,0,1113,1216,1,0,0,0,1114,1115,6,28,-1,0,1115,
1216,3,72,36,0,1116,1117,6,28,-1,0,1117,1118,5,58,0,0,1118,1119,6,28,-1,
0,1119,1123,6,28,-1,0,1120,1122,3,254,127,0,1121,1120,1,0,0,0,1122,1125,
1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,1209,1,0,0,0,1125,1123,
1,0,0,0,1126,1127,5,2,0,0,1127,1131,6,28,-1,0,1128,1130,3,74,37,0,1129,1128,
1,0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1134,
1,0,0,0,1133,1131,1,0,0,0,1134,1135,5,4,0,0,1135,1136,6,28,-1,0,1136,1137,
6,28,-1,0,1137,1210,6,28,-1,0,1138,1139,5,80,0,0,1139,1140,6,28,-1,0,1140,
1144,5,2,0,0,1141,1143,3,74,37,0,1142,1141,1,0,0,0,1143,1146,1,0,0,0,1144,
1142,1,0,0,0,1144,1145,1,0,0,0,1145,1147,1,0,0,0,1146,1144,1,0,0,0,1147,
1148,5,4,0,0,1148,1149,6,28,-1,0,1149,1150,6,28,-1,0,1150,1210,6,28,-1,0,
1151,1152,5,84,0,0,1152,1153,6,28,-1,0,1153,1157,5,2,0,0,1154,1156,3,42,
21,0,1155,1154,1,0,0,0,1156,1159,1,0,0,0,1157,1155,1,0,0,0,1157,1158,1,0,
0,0,1158,1160,1,0,0,0,1159,1157,1,0,0,0,1160,1161,5,4,0,0,1161,1210,6,28,
-1,0,1162,1210,3,134,67,0,1163,1168,3,92,46,0,1164,1165,5,3,0,0,1165,1167,
3,92,46,0,1166,1164,1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,
1,0,0,0,1169,1210,1,0,0,0,1170,1168,1,0,0,0,1171,1172,5,78,0,0,1172,1173,
6,28,-1,0,1173,1177,5,2,0,0,1174,1176,3,8,4,0,1175,1174,1,0,0,0,1176,1179,
1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,1180,1,0,0,0,1179,1177,
1,0,0,0,1180,1181,5,4,0,0,1181,1210,6,28,-1,0,1182,1183,5,71,0,0,1183,1184,
6,28,-1,0,1184,1194,5,2,0,0,1185,1191,3,176,88,0,1186,1187,5,3,0,0,1187,
1188,6,28,-1,0,1188,1190,3,176,88,0,1189,1186,1,0,0,0,1190,1193,1,0,0,0,
1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,1195,1,0,0,0,1193,1191,1,0,0,0,
1194,1185,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,0,1196,1197,5,4,0,0,
1197,1210,6,28,-1,0,1198,1199,5,62,0,0,1199,1200,6,28,-1,0,1200,1204,5,2,
0,0,1201,1203,3,36,18,0,1202,1201,1,0,0,0,1203,1206,1,0,0,0,1204,1202,1,
0,0,0,1204,1205,1,0,0,0,1205,1207,1,0,0,0,1206,1204,1,0,0,0,1207,1208,5,
4,0,0,1208,1210,6,28,-1,0,1209,1126,1,0,0,0,1209,1138,1,0,0,0,1209,1151,
1,0,0,0,1209,1162,1,0,0,0,1209,1163,1,0,0,0,1209,1171,1,0,0,0,1209,1182,
1,0,0,0,1209,1198,1,0,0,0,1209,1210,1,0,0,0,1210,1213,1,0,0,0,1211,1214,
3,12,6,0,1212,1214,5,152,0,0,1213,1211,1,0,0,0,1213,1212,1,0,0,0,1214,1216,
1,0,0,0,1215,1109,1,0,0,0,1215,1114,1,0,0,0,1215,1116,1,0,0,0,1216,57,1,
0,0,0,1217,1218,5,127,0,0,1218,1219,6,29,-1,0,1219,1220,3,218,109,0,1220,
1223,6,29,-1,0,1221,1222,5,58,0,0,1222,1224,6,29,-1,0,1223,1221,1,0,0,0,
1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1229,6,29,-1,0,1226,1228,3,252,
126,0,1227,1226,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,
0,0,0,1230,1232,1,0,0,0,1231,1229,1,0,0,0,1232,1235,3,10,5,0,1233,1236,3,
12,6,0,1234,1236,5,152,0,0,1235,1233,1,0,0,0,1235,1234,1,0,0,0,1236,59,1,
0,0,0,1237,1238,5,73,0,0,1238,1239,6,30,-1,0,1239,1240,3,218,109,0,1240,
1243,6,30,-1,0,1241,1242,5,58,0,0,1242,1244,6,30,-1,0,1243,1241,1,0,0,0,
1243,1244,1,0,0,0,1244,1245,1,0,0,0,1245,1249,6,30,-1,0,1246,1248,3,252,
126,0,1247,1246,1,0,0,0,1248,1251,1,0,0,0,1249,1247,1,0,0,0,1249,1250,1,
0,0,0,1250,1252,1,0,0,0,1251,1249,1,0,0,0,1252,1255,3,10,5,0,1253,1256,3,
12,6,0,1254,1256,5,152,0,0,1255,1253,1,0,0,0,1255,1254,1,0,0,0,1256,61,1,
0,0,0,1257,1258,7,1,0,0,1258,1259,6,31,-1,0,1259,1260,3,218,109,0,1260,1288,
6,31,-1,0,1261,1262,5,58,0,0,1262,1266,6,31,-1,0,1263,1265,3,254,127,0,1264,
1263,1,0,0,0,1265,1268,1,0,0,0,1266,1264,1,0,0,0,1266,1267,1,0,0,0,1267,
1278,1,0,0,0,1268,1266,1,0,0,0,1269,1274,3,92,46,0,1270,1271,5,3,0,0,1271,
1273,3,92,46,0,1272,1270,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,1274,
1275,1,0,0,0,1275,1279,1,0,0,0,1276,1274,1,0,0,0,1277,1279,3,64,32,0,1278,
1269,1,0,0,0,1278,1277,1,0,0,0,1279,1289,1,0,0,0,1280,1284,6,31,-1,0,1281,
1283,3,254,127,0,1282,1281,1,0,0,0,1283,1286,1,0,0,0,1284,1282,1,0,0,0,1284,
1285,1,0,0,0,1285,1287,1,0,0,0,1286,1284,1,0,0,0,1287,1289,3,64,32,0,1288,
1261,1,0,0,0,1288,1280,1,0,0,0,1289,1292,1,0,0,0,1290,1293,3,12,6,0,1291,
1293,5,152,0,0,1292,1290,1,0,0,0,1292,1291,1,0,0,0,1293,63,1,0,0,0,1294,
1295,5,2,0,0,1295,1299,6,32,-1,0,1296,1298,3,74,37,0,1297,1296,1,0,0,0,1298,
1301,1,0,0,0,1299,1297,1,0,0,0,1299,1300,1,0,0,0,1300,1302,1,0,0,0,1301,
1299,1,0,0,0,1302,1303,5,4,0,0,1303,1315,6,32,-1,0,1304,1305,5,62,0,0,1305,
1306,6,32,-1,0,1306,1310,5,2,0,0,1307,1309,3,36,18,0,1308,1307,1,0,0,0,1309,
1312,1,0,0,0,1310,1308,1,0,0,0,1310,1311,1,0,0,0,1311,1313,1,0,0,0,1312,
1310,1,0,0,0,1313,1314,5,4,0,0,1314,1316,6,32,-1,0,1315,1304,1,0,0,0,1315,
1316,1,0,0,0,1316,1329,1,0,0,0,1317,1318,5,62,0,0,1318,1319,6,32,-1,0,1319,
1323,5,2,0,0,1320,1322,3,36,18,0,1321,1320,1,0,0,0,1322,1325,1,0,0,0,1323,
1321,1,0,0,0,1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1323,1,0,0,0,1326,
1327,5,4,0,0,1327,1329,6,32,-1,0,1328,1294,1,0,0,0,1328,1317,1,0,0,0,1328,
1329,1,0,0,0,1329,65,1,0,0,0,1330,1331,5,121,0,0,1331,1332,6,33,-1,0,1332,
1333,3,218,109,0,1333,1336,6,33,-1,0,1334,1335,5,58,0,0,1335,1337,6,33,-1,
0,1336,1334,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1342,6,33,-1,
0,1339,1341,3,254,127,0,1340,1339,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,
0,0,0,1342,1343,1,0,0,0,1343,1384,1,0,0,0,1344,1342,1,0,0,0,1345,1346,5,
2,0,0,1346,1356,6,33,-1,0,1347,1353,3,176,88,0,1348,1349,5,3,0,0,1349,1350,
6,33,-1,0,1350,1352,3,176,88,0,1351,1348,1,0,0,0,1352,1355,1,0,0,0,1353,
1351,1,0,0,0,1353,1354,1,0,0,0,1354,1357,1,0,0,0,1355,1353,1,0,0,0,1356,
1347,1,0,0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,1359,5,4,0,0,1359,
1371,6,33,-1,0,1360,1361,5,62,0,0,1361,1362,6,33,-1,0,1362,1366,5,2,0,0,
1363,1365,3,36,18,0,1364,1363,1,0,0,0,1365,1368,1,0,0,0,1366,1364,1,0,0,
0,1366,1367,1,0,0,0,1367,1369,1,0,0,0,1368,1366,1,0,0,0,1369,1370,5,4,0,
0,1370,1372,6,33,-1,0,1371,1360,1,0,0,0,1371,1372,1,0,0,0,1372,1385,1,0,
0,0,1373,1374,5,62,0,0,1374,1375,6,33,-1,0,1375,1379,5,2,0,0,1376,1378,3,
36,18,0,1377,1376,1,0,0,0,1378,1381,1,0,0,0,1379,1377,1,0,0,0,1379,1380,
1,0,0,0,1380,1382,1,0,0,0,1381,1379,1,0,0,0,1382,1383,5,4,0,0,1383,1385,
6,33,-1,0,1384,1345,1,0,0,0,1384,1373,1,0,0,0,1384,1385,1,0,0,0,1385,1388,
1,0,0,0,1386,1389,3,12,6,0,1387,1389,5,152,0,0,1388,1386,1,0,0,0,1388,1387,
1,0,0,0,1389,67,1,0,0,0,1390,1391,5,131,0,0,1391,1392,6,34,-1,0,1392,1393,
3,218,109,0,1393,1430,6,34,-1,0,1394,1431,3,72,36,0,1395,1396,5,58,0,0,1396,
1400,6,34,-1,0,1397,1399,3,254,127,0,1398,1397,1,0,0,0,1399,1402,1,0,0,0,
1400,1398,1,0,0,0,1400,1401,1,0,0,0,1401,1424,1,0,0,0,1402,1400,1,0,0,0,
1403,1404,5,2,0,0,1404,1408,6,34,-1,0,1405,1407,3,74,37,0,1406,1405,1,0,
0,0,1407,1410,1,0,0,0,1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,1411,1,0,
0,0,1410,1408,1,0,0,0,1411,1412,5,4,0,0,1412,1413,6,34,-1,0,1413,1414,6,
34,-1,0,1414,1425,6,34,-1,0,1415,1425,3,134,67,0,1416,1421,3,92,46,0,1417,
1418,5,3,0,0,1418,1420,3,92,46,0,1419,1417,1,0,0,0,1420,1423,1,0,0,0,1421,
1419,1,0,0,0,1421,1422,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1424,
1403,1,0,0,0,1424,1415,1,0,0,0,1424,1416,1,0,0,0,1424,1425,1,0,0,0,1425,
1428,1,0,0,0,1426,1429,3,12,6,0,1427,1429,5,152,0,0,1428,1426,1,0,0,0,1428,
1427,1,0,0,0,1429,1431,1,0,0,0,1430,1394,1,0,0,0,1430,1395,1,0,0,0,1431,
69,1,0,0,0,1432,1482,3,72,36,0,1433,1434,5,58,0,0,1434,1438,6,35,-1,0,1435,
1437,3,254,127,0,1436,1435,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,
1439,1,0,0,0,1439,1478,1,0,0,0,1440,1438,1,0,0,0,1441,1442,5,2,0,0,1442,
1446,6,35,-1,0,1443,1445,3,74,37,0,1444,1443,1,0,0,0,1445,1448,1,0,0,0,1446,
1444,1,0,0,0,1446,1447,1,0,0,0,1447,1449,1,0,0,0,1448,1446,1,0,0,0,1449,
1450,5,4,0,0,1450,1451,6,35,-1,0,1451,1452,6,35,-1,0,1452,1479,6,35,-1,0,
1453,1454,5,80,0,0,1454,1455,6,35,-1,0,1455,1459,5,2,0,0,1456,1458,3,74,
37,0,1457,1456,1,0,0,0,1458,1461,1,0,0,0,1459,1457,1,0,0,0,1459,1460,1,0,
0,0,1460,1462,1,0,0,0,1461,1459,1,0,0,0,1462,1463,5,4,0,0,1463,1464,6,35,
-1,0,1464,1465,6,35,-1,0,1465,1479,6,35,-1,0,1466,1467,5,84,0,0,1467,1468,
6,35,-1,0,1468,1472,5,2,0,0,1469,1471,3,42,21,0,1470,1469,1,0,0,0,1471,1474,
1,0,0,0,1472,1470,1,0,0,0,1472,1473,1,0,0,0,1473,1475,1,0,0,0,1474,1472,
1,0,0,0,1475,1476,5,4,0,0,1476,1479,6,35,-1,0,1477,1479,3,134,67,0,1478,
1441,1,0,0,0,1478,1453,1,0,0,0,1478,1466,1,0,0,0,1478,1477,1,0,0,0,1478,
1479,1,0,0,0,1479,1480,1,0,0,0,1480,1482,3,12,6,0,1481,1432,1,0,0,0,1481,
1433,1,0,0,0,1482,71,1,0,0,0,1483,1487,6,36,-1,0,1484,1486,3,254,127,0,1485,
1484,1,0,0,0,1486,1489,1,0,0,0,1487,1485,1,0,0,0,1487,1488,1,0,0,0,1488,
1502,1,0,0,0,1489,1487,1,0,0,0,1490,1491,5,2,0,0,1491,1495,6,36,-1,0,1492,
1494,3,74,37,0,1493,1492,1,0,0,0,1494,1497,1,0,0,0,1495,1493,1,0,0,0,1495,
1496,1,0,0,0,1496,1498,1,0,0,0,1497,1495,1,0,0,0,1498,1499,5,4,0,0,1499,
1500,6,36,-1,0,1500,1501,6,36,-1,0,1501,1503,6,36,-1,0,1502,1490,1,0,0,0,
1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1505,3,12,6,0,1505,73,1,0,0,0,1506,
1510,6,37,-1,0,1507,1509,3,254,127,0,1508,1507,1,0,0,0,1509,1512,1,0,0,0,
1510,1508,1,0,0,0,1510,1511,1,0,0,0,1511,1516,1,0,0,0,1512,1510,1,0,0,0,
1513,1514,5,90,0,0,1514,1517,3,76,38,0,1515,1517,3,46,23,0,1516,1513,1,0,
0,0,1516,1515,1,0,0,0,1517,75,1,0,0,0,1518,1521,6,38,-1,0,1519,1520,5,140,
0,0,1520,1522,6,38,-1,0,1521,1519,1,0,0,0,1521,1522,1,0,0,0,1522,1523,1,
0,0,0,1523,1524,3,280,140,0,1524,1525,6,38,-1,0,1525,1526,3,70,35,0,1526,
77,1,0,0,0,1527,1600,3,218,109,0,1528,1529,5,5,0,0,1529,1530,3,218,109,0,
1530,1533,6,39,-1,0,1531,1532,5,58,0,0,1532,1534,6,39,-1,0,1533,1531,1,0,
0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,1539,6,39,-1,0,1536,1538,3,
254,127,0,1537,1536,1,0,0,0,1538,1541,1,0,0,0,1539,1537,1,0,0,0,1539,1540,
1,0,0,0,1540,1546,1,0,0,0,1541,1539,1,0,0,0,1542,1543,3,82,41,0,1543,1544,
3,14,7,0,1544,1547,1,0,0,0,1545,1547,3,12,6,0,1546,1542,1,0,0,0,1546,1545,
1,0,0,0,1547,1601,1,0,0,0,1548,1551,6,39,-1,0,1549,1550,5,58,0,0,1550,1552,
6,39,-1,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1557,
6,39,-1,0,1554,1556,3,254,127,0,1555,1554,1,0,0,0,1556,1559,1,0,0,0,1557,
1555,1,0,0,0,1557,1558,1,0,0,0,1558,1598,1,0,0,0,1559,1557,1,0,0,0,1560,
1562,3,82,41,0,1561,1563,3,80,40,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,
1564,1,0,0,0,1564,1565,3,14,7,0,1565,1599,1,0,0,0,1566,1567,3,80,40,0,1567,
1568,3,14,7,0,1568,1599,1,0,0,0,1569,1570,5,6,0,0,1570,1571,6,39,-1,0,1571,
1577,3,90,45,0,1572,1573,5,3,0,0,1573,1574,6,39,-1,0,1574,1576,3,90,45,0,
1575,1572,1,0,0,0,1576,1579,1,0,0,0,1577,1575,1,0,0,0,1577,1578,1,0,0,0,
1578,1580,1,0,0,0,1579,1577,1,0,0,0,1580,1581,5,7,0,0,1581,1582,6,39,-1,
0,1582,1594,6,39,-1,0,1583,1585,3,82,41,0,1584,1586,3,80,40,0,1585,1584,
1,0,0,0,1585,1586,1,0,0,0,1586,1587,1,0,0,0,1587,1588,3,14,7,0,1588,1595,
1,0,0,0,1589,1590,3,80,40,0,1590,1591,3,14,7,0,1591,1595,1,0,0,0,1592,1595,
3,88,44,0,1593,1595,3,12,6,0,1594,1583,1,0,0,0,1594,1589,1,0,0,0,1594,1592,
1,0,0,0,1594,1593,1,0,0,0,1595,1599,1,0,0,0,1596,1599,3,88,44,0,1597,1599,
3,12,6,0,1598,1560,1,0,0,0,1598,1566,1,0,0,0,1598,1569,1,0,0,0,1598,1596,
1,0,0,0,1598,1597,1,0,0,0,1599,1601,1,0,0,0,1600,1528,1,0,0,0,1600,1548,
1,0,0,0,1601,79,1,0,0,0,1602,1603,5,62,0,0,1603,1604,6,40,-1,0,1604,1608,
5,2,0,0,1605,1607,3,86,43,0,1606,1605,1,0,0,0,1607,1610,1,0,0,0,1608,1606,
1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,1608,1,0,0,0,1611,1612,
5,4,0,0,1612,1613,6,40,-1,0,1613,1614,6,40,-1,0,1614,81,1,0,0,0,1615,1616,
5,2,0,0,1616,1620,6,41,-1,0,1617,1619,3,84,42,0,1618,1617,1,0,0,0,1619,1622,
1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1620,
1,0,0,0,1623,1624,5,4,0,0,1624,1625,6,41,-1,0,1625,1626,6,41,-1,0,1626,83,
1,0,0,0,1627,1631,6,42,-1,0,1628,1630,3,254,127,0,1629,1628,1,0,0,0,1630,
1633,1,0,0,0,1631,1629,1,0,0,0,1631,1632,1,0,0,0,1632,1634,1,0,0,0,1633,
1631,1,0,0,0,1634,1635,3,280,140,0,1635,1639,6,42,-1,0,1636,1638,3,254,127,
0,1637,1636,1,0,0,0,1638,1641,1,0,0,0,1639,1637,1,0,0,0,1639,1640,1,0,0,
0,1640,1655,1,0,0,0,1641,1639,1,0,0,0,1642,1643,5,2,0,0,1643,1647,6,42,-1,
0,1644,1646,3,84,42,0,1645,1644,1,0,0,0,1646,1649,1,0,0,0,1647,1645,1,0,
0,0,1647,1648,1,0,0,0,1648,1650,1,0,0,0,1649,1647,1,0,0,0,1650,1651,5,4,
0,0,1651,1652,6,42,-1,0,1652,1653,6,42,-1,0,1653,1656,3,14,7,0,1654,1656,
3,12,6,0,1655,1642,1,0,0,0,1655,1654,1,0,0,0,1656,85,1,0,0,0,1657,1661,6,
43,-1,0,1658,1660,3,254,127,0,1659,1658,1,0,0,0,1660,1663,1,0,0,0,1661,1659,
1,0,0,0,1661,1662,1,0,0,0,1662,1664,1,0,0,0,1663,1661,1,0,0,0,1664,1665,
3,280,140,0,1665,1669,6,43,-1,0,1666,1668,3,254,127,0,1667,1666,1,0,0,0,
1668,1671,1,0,0,0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,1687,1,0,0,0,
1671,1669,1,0,0,0,1672,1673,5,6,0,0,1673,1674,6,43,-1,0,1674,1680,3,90,45,
0,1675,1676,5,3,0,0,1676,1677,6,43,-1,0,1677,1679,3,90,45,0,1678,1675,1,
0,0,0,1679,1682,1,0,0,0,1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1683,1,
0,0,0,1682,1680,1,0,0,0,1683,1684,5,7,0,0,1684,1685,6,43,-1,0,1685,1686,
6,43,-1,0,1686,1688,1,0,0,0,1687,1672,1,0,0,0,1687,1688,1,0,0,0,1688,1691,
1,0,0,0,1689,1692,3,88,44,0,1690,1692,3,12,6,0,1691,1689,1,0,0,0,1691,1690,
1,0,0,0,1692,87,1,0,0,0,1693,1694,5,123,0,0,1694,1695,6,44,-1,0,1695,1699,
6,44,-1,0,1696,1698,3,254,127,0,1697,1696,1,0,0,0,1698,1701,1,0,0,0,1699,
1697,1,0,0,0,1699,1700,1,0,0,0,1700,1715,1,0,0,0,1701,1699,1,0,0,0,1702,
1703,5,2,0,0,1703,1707,6,44,-1,0,1704,1706,3,84,42,0,1705,1704,1,0,0,0,1706,
1709,1,0,0,0,1707,1705,1,0,0,0,1707,1708,1,0,0,0,1708,1710,1,0,0,0,1709,
1707,1,0,0,0,1710,1711,5,4,0,0,1711,1712,6,44,-1,0,1712,1713,6,44,-1,0,1713,
1716,3,14,7,0,1714,1716,3,12,6,0,1715,1702,1,0,0,0,1715,1714,1,0,0,0,1716,
89,1,0,0,0,1717,1721,6,45,-1,0,1718,1720,3,254,127,0,1719,1718,1,0,0,0,1720,
1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,1,0,0,0,1722,1724,1,0,0,0,1723,
1721,1,0,0,0,1724,1725,3,280,140,0,1725,1729,6,45,-1,0,1726,1728,3,254,127,
0,1727,1726,1,0,0,0,1728,1731,1,0,0,0,1729,1727,1,0,0,0,1729,1730,1,0,0,
0,1730,91,1,0,0,0,1731,1729,1,0,0,0,1732,1733,3,218,109,0,1733,1734,6,46,
-1,0,1734,93,1,0,0,0,1735,1739,3,102,51,0,1736,1737,5,5,0,0,1737,1739,3,
98,49,0,1738,1735,1,0,0,0,1738,1736,1,0,0,0,1739,95,1,0,0,0,1740,1741,5,
123,0,0,1741,1742,6,48,-1,0,1742,1746,6,48,-1,0,1743,1745,3,254,127,0,1744,
1743,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,0,1746,1747,1,0,0,0,1747,
1749,1,0,0,0,1748,1746,1,0,0,0,1749,1750,3,98,49,0,1750,97,1,0,0,0,1751,
1753,3,102,51,0,1752,1754,3,124,62,0,1753,1752,1,0,0,0,1753,1754,1,0,0,0,
1754,1797,1,0,0,0,1755,1797,3,106,53,0,1756,1758,3,128,64,0,1757,1759,3,
124,62,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,1774,1,0,0,0,1760,1761,
5,84,0,0,1761,1762,5,2,0,0,1762,1766,6,49,-1,0,1763,1765,3,42,21,0,1764,
1763,1,0,0,0,1765,1768,1,0,0,0,1766,1764,1,0,0,0,1766,1767,1,0,0,0,1767,
1769,1,0,0,0,1768,1766,1,0,0,0,1769,1770,5,4,0,0,1770,1772,6,49,-1,0,1771,
1773,3,124,62,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,1775,1,0,0,0,1774,
1760,1,0,0,0,1774,1775,1,0,0,0,1775,1797,1,0,0,0,1776,1778,3,130,65,0,1777,
1779,3,124,62,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1794,1,0,0,0,1780,
1781,5,84,0,0,1781,1782,5,2,0,0,1782,1786,6,49,-1,0,1783,1785,3,42,21,0,
1784,1783,1,0,0,0,1785,1788,1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,
1787,1789,1,0,0,0,1788,1786,1,0,0,0,1789,1790,5,4,0,0,1790,1792,6,49,-1,
0,1791,1793,3,124,62,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1795,1,0,
0,0,1794,1780,1,0,0,0,1794,1795,1,0,0,0,1795,1797,1,0,0,0,1796,1751,1,0,
0,0,1796,1755,1,0,0,0,1796,1756,1,0,0,0,1796,1776,1,0,0,0,1797,99,1,0,0,
0,1798,1803,3,102,51,0,1799,1800,3,124,62,0,1800,1801,3,12,6,0,1801,1804,
1,0,0,0,1802,1804,3,14,7,0,1803,1799,1,0,0,0,1803,1802,1,0,0,0,1804,1965,
1,0,0,0,1805,1806,5,5,0,0,1806,1962,6,50,-1,0,1807,1812,3,102,51,0,1808,
1809,3,124,62,0,1809,1810,3,12,6,0,1810,1813,1,0,0,0,1811,1813,3,14,7,0,
1812,1808,1,0,0,0,1812,1811,1,0,0,0,1813,1963,1,0,0,0,1814,1818,3,108,54,
0,1815,1819,3,116,58,0,1816,1819,3,114,57,0,1817,1819,3,218,109,0,1818,1815,
1,0,0,0,1818,1816,1,0,0,0,1818,1817,1,0,0,0,1819,1821,1,0,0,0,1820,1822,
3,110,55,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1823,1,0,0,0,1823,1824,
3,12,6,0,1824,1963,1,0,0,0,1825,1826,5,144,0,0,1826,1827,6,50,-1,0,1827,
1832,3,102,51,0,1828,1829,3,124,62,0,1829,1830,3,12,6,0,1830,1833,1,0,0,
0,1831,1833,3,14,7,0,1832,1828,1,0,0,0,1832,1831,1,0,0,0,1833,1963,1,0,0,
0,1834,1835,5,66,0,0,1835,1836,5,52,0,0,1836,1840,6,50,-1,0,1837,1838,5,
108,0,0,1838,1840,6,50,-1,0,1839,1834,1,0,0,0,1839,1837,1,0,0,0,1840,1880,
1,0,0,0,1841,1846,3,102,51,0,1842,1843,3,124,62,0,1843,1844,3,12,6,0,1844,
1847,1,0,0,0,1845,1847,3,14,7,0,1846,1842,1,0,0,0,1846,1845,1,0,0,0,1847,
1881,1,0,0,0,1848,1851,3,128,64,0,1849,1851,3,130,65,0,1850,1848,1,0,0,0,
1850,1849,1,0,0,0,1851,1853,1,0,0,0,1852,1854,3,124,62,0,1853,1852,1,0,0,
0,1853,1854,1,0,0,0,1854,1855,1,0,0,0,1855,1859,6,50,-1,0,1856,1858,3,254,
127,0,1857,1856,1,0,0,0,1858,1861,1,0,0,0,1859,1857,1,0,0,0,1859,1860,1,
0,0,0,1860,1876,1,0,0,0,1861,1859,1,0,0,0,1862,1863,5,84,0,0,1863,1864,5,
2,0,0,1864,1868,6,50,-1,0,1865,1867,3,42,21,0,1866,1865,1,0,0,0,1867,1870,
1,0,0,0,1868,1866,1,0,0,0,1868,1869,1,0,0,0,1869,1871,1,0,0,0,1870,1868,
1,0,0,0,1871,1872,5,4,0,0,1872,1874,6,50,-1,0,1873,1875,3,124,62,0,1874,
1873,1,0,0,0,1874,1875,1,0,0,0,1875,1877,1,0,0,0,1876,1862,1,0,0,0,1876,
1877,1,0,0,0,1877,1878,1,0,0,0,1878,1879,3,12,6,0,1879,1881,1,0,0,0,1880,
1841,1,0,0,0,1880,1850,1,0,0,0,1881,1963,1,0,0,0,1882,1884,3,128,64,0,1883,
1885,3,52,26,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1886,1,0,0,0,1886,
1890,6,50,-1,0,1887,1889,3,254,127,0,1888,1887,1,0,0,0,1889,1892,1,0,0,0,
1890,1888,1,0,0,0,1890,1891,1,0,0,0,1891,1893,1,0,0,0,1892,1890,1,0,0,0,
1893,1894,3,12,6,0,1894,1963,1,0,0,0,1895,1896,5,107,0,0,1896,1897,6,50,
-1,0,1897,1899,3,130,65,0,1898,1900,3,52,26,0,1899,1898,1,0,0,0,1899,1900,
1,0,0,0,1900,1901,1,0,0,0,1901,1905,6,50,-1,0,1902,1904,3,254,127,0,1903,
1902,1,0,0,0,1904,1907,1,0,0,0,1905,1903,1,0,0,0,1905,1906,1,0,0,0,1906,
1908,1,0,0,0,1907,1905,1,0,0,0,1908,1909,3,12,6,0,1909,1963,1,0,0,0,1910,
1911,6,50,-1,0,1911,1960,3,218,109,0,1912,1917,3,132,66,0,1913,1914,5,5,
0,0,1914,1915,6,50,-1,0,1915,1917,3,218,109,0,1916,1912,1,0,0,0,1916,1913,
1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1919,3,122,61,0,1919,1923,
6,50,-1,0,1920,1922,3,254,127,0,1921,1920,1,0,0,0,1922,1925,1,0,0,0,1923,
1921,1,0,0,0,1923,1924,1,0,0,0,1924,1937,1,0,0,0,1925,1923,1,0,0,0,1926,
1927,5,84,0,0,1927,1928,5,2,0,0,1928,1932,6,50,-1,0,1929,1931,3,42,21,0,
1930,1929,1,0,0,0,1931,1934,1,0,0,0,1932,1930,1,0,0,0,1932,1933,1,0,0,0,
1933,1935,1,0,0,0,1934,1932,1,0,0,0,1935,1936,5,4,0,0,1936,1938,6,50,-1,
0,1937,1926,1,0,0,0,1937,1938,1,0,0,0,1938,1940,1,0,0,0,1939,1941,3,52,26,
0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1943,3,12,6,
0,1943,1961,1,0,0,0,1944,1950,6,50,-1,0,1945,1946,5,3,0,0,1946,1947,6,50,
-1,0,1947,1949,3,92,46,0,1948,1945,1,0,0,0,1949,1952,1,0,0,0,1950,1948,1,
0,0,0,1950,1951,1,0,0,0,1951,1953,1,0,0,0,1952,1950,1,0,0,0,1953,1958,3,
102,51,0,1954,1959,3,14,7,0,1955,1956,3,124,62,0,1956,1957,3,12,6,0,1957,
1959,1,0,0,0,1958,1954,1,0,0,0,1958,1955,1,0,0,0,1959,1961,1,0,0,0,1960,
1916,1,0,0,0,1960,1944,1,0,0,0,1961,1963,1,0,0,0,1962,1807,1,0,0,0,1962,
1814,1,0,0,0,1962,1825,1,0,0,0,1962,1839,1,0,0,0,1962,1882,1,0,0,0,1962,
1895,1,0,0,0,1962,1910,1,0,0,0,1963,1965,1,0,0,0,1964,1798,1,0,0,0,1964,
1805,1,0,0,0,1965,101,1,0,0,0,1966,1967,5,2,0,0,1967,1971,6,51,-1,0,1968,
1970,3,44,22,0,1969,1968,1,0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1971,
1972,1,0,0,0,1972,1974,1,0,0,0,1973,1971,1,0,0,0,1974,1975,5,4,0,0,1975,
1976,6,51,-1,0,1976,103,1,0,0,0,1977,1978,5,151,0,0,1978,1982,6,52,-1,0,
1979,1981,3,44,22,0,1980,1979,1,0,0,0,1981,1984,1,0,0,0,1982,1980,1,0,0,
0,1982,1983,1,0,0,0,1983,1985,1,0,0,0,1984,1982,1,0,0,0,1985,1986,5,4,0,
0,1986,1987,6,52,-1,0,1987,105,1,0,0,0,1988,1989,5,66,0,0,1989,1990,5,52,
0,0,1990,1994,6,53,-1,0,1991,1992,5,108,0,0,1992,1994,6,53,-1,0,1993,1988,
1,0,0,0,1993,1991,1,0,0,0,1994,2039,1,0,0,0,1995,1997,3,102,51,0,1996,1998,
3,124,62,0,1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,2040,1,0,0,0,1999,2001,
3,128,64,0,2000,2002,3,124,62,0,2001,2000,1,0,0,0,2001,2002,1,0,0,0,2002,
2017,1,0,0,0,2003,2004,5,84,0,0,2004,2005,5,2,0,0,2005,2009,6,53,-1,0,2006,
2008,3,42,21,0,2007,2006,1,0,0,0,2008,2011,1,0,0,0,2009,2007,1,0,0,0,2009,
2010,1,0,0,0,2010,2012,1,0,0,0,2011,2009,1,0,0,0,2012,2013,5,4,0,0,2013,
2015,6,53,-1,0,2014,2016,3,124,62,0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,
2016,2018,1,0,0,0,2017,2003,1,0,0,0,2017,2018,1,0,0,0,2018,2040,1,0,0,0,
2019,2021,3,130,65,0,2020,2022,3,124,62,0,2021,2020,1,0,0,0,2021,2022,1,
0,0,0,2022,2037,1,0,0,0,2023,2024,5,84,0,0,2024,2025,5,2,0,0,2025,2029,6,
53,-1,0,2026,2028,3,42,21,0,2027,2026,1,0,0,0,2028,2031,1,0,0,0,2029,2027,
1,0,0,0,2029,2030,1,0,0,0,2030,2032,1,0,0,0,2031,2029,1,0,0,0,2032,2033,
5,4,0,0,2033,2035,6,53,-1,0,2034,2036,3,124,62,0,2035,2034,1,0,0,0,2035,
2036,1,0,0,0,2036,2038,1,0,0,0,2037,2023,1,0,0,0,2037,2038,1,0,0,0,2038,
2040,1,0,0,0,2039,1995,1,0,0,0,2039,1999,1,0,0,0,2039,2019,1,0,0,0,2040,
107,1,0,0,0,2041,2043,5,69,0,0,2042,2044,3,118,59,0,2043,2042,1,0,0,0,2043,
2044,1,0,0,0,2044,2045,1,0,0,0,2045,2046,5,130,0,0,2046,2054,6,54,-1,0,2047,
2049,5,72,0,0,2048,2050,3,118,59,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,
2051,1,0,0,0,2051,2052,5,52,0,0,2052,2054,6,54,-1,0,2053,2041,1,0,0,0,2053,
2047,1,0,0,0,2054,2055,1,0,0,0,2055,2056,6,54,-1,0,2056,109,1,0,0,0,2057,
2058,5,2,0,0,2058,2068,6,55,-1,0,2059,2065,3,126,63,0,2060,2061,5,3,0,0,
2061,2062,6,55,-1,0,2062,2064,3,126,63,0,2063,2060,1,0,0,0,2064,2067,1,0,
0,0,2065,2063,1,0,0,0,2065,2066,1,0,0,0,2066,2069,1,0,0,0,2067,2065,1,0,
0,0,2068,2059,1,0,0,0,2068,2069,1,0,0,0,2069,2070,1,0,0,0,2070,2071,5,4,
0,0,2071,2073,6,55,-1,0,2072,2074,3,52,26,0,2073,2072,1,0,0,0,2073,2074,
1,0,0,0,2074,2081,1,0,0,0,2075,2076,5,53,0,0,2076,2077,3,198,99,0,2077,2078,
6,55,-1,0,2078,2081,1,0,0,0,2079,2081,3,52,26,0,2080,2057,1,0,0,0,2080,2075,
1,0,0,0,2080,2079,1,0,0,0,2081,111,1,0,0,0,2082,2083,5,2,0,0,2083,2093,6,
56,-1,0,2084,2090,3,126,63,0,2085,2086,5,3,0,0,2086,2087,6,56,-1,0,2087,
2089,3,126,63,0,2088,2085,1,0,0,0,2089,2092,1,0,0,0,2090,2088,1,0,0,0,2090,
2091,1,0,0,0,2091,2094,1,0,0,0,2092,2090,1,0,0,0,2093,2084,1,0,0,0,2093,
2094,1,0,0,0,2094,2095,1,0,0,0,2095,2096,5,4,0,0,2096,2098,6,56,-1,0,2097,
2099,3,52,26,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2106,1,0,0,0,2100,
2101,5,53,0,0,2101,2102,3,198,99,0,2102,2103,6,56,-1,0,2103,2106,1,0,0,0,
2104,2106,3,52,26,0,2105,2082,1,0,0,0,2105,2100,1,0,0,0,2105,2104,1,0,0,
0,2105,2106,1,0,0,0,2106,2107,1,0,0,0,2107,2111,6,56,-1,0,2108,2110,3,254,
127,0,2109,2108,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,0,0,0,2111,2112,1,
0,0,0,2112,2114,1,0,0,0,2113,2111,1,0,0,0,2114,2115,3,12,6,0,2115,113,1,
0,0,0,2116,2117,5,114,0,0,2117,2118,6,57,-1,0,2118,2119,3,218,109,0,2119,
115,1,0,0,0,2120,2121,5,108,0,0,2121,2122,6,58,-1,0,2122,2123,3,218,109,
0,2123,117,1,0,0,0,2124,2125,5,11,0,0,2125,2146,6,59,-1,0,2126,2127,5,12,
0,0,2127,2130,6,59,-1,0,2128,2129,5,3,0,0,2129,2131,3,120,60,0,2130,2128,
1,0,0,0,2130,2131,1,0,0,0,2131,2147,1,0,0,0,2132,2133,5,59,0,0,2133,2144,
6,59,-1,0,2134,2135,5,3,0,0,2135,2145,3,120,60,0,2136,2137,5,13,0,0,2137,
2142,6,59,-1,0,2138,2139,5,12,0,0,2139,2143,6,59,-1,0,2140,2141,5,59,0,0,
2141,2143,6,59,-1,0,2142,2138,1,0,0,0,2142,2140,1,0,0,0,2143,2145,1,0,0,
0,2144,2134,1,0,0,0,2144,2136,1,0,0,0,2144,2145,1,0,0,0,2145,2147,1,0,0,
0,2146,2126,1,0,0,0,2146,2132,1,0,0,0,2146,2147,1,0,0,0,2147,2148,1,0,0,
0,2148,2149,5,14,0,0,2149,119,1,0,0,0,2150,2165,6,60,-1,0,2151,2152,5,12,
0,0,2152,2166,6,60,-1,0,2153,2154,5,59,0,0,2154,2163,6,60,-1,0,2155,2156,
5,13,0,0,2156,2161,6,60,-1,0,2157,2158,5,12,0,0,2158,2162,6,60,-1,0,2159,
2160,5,59,0,0,2160,2162,6,60,-1,0,2161,2157,1,0,0,0,2161,2159,1,0,0,0,2162,
2164,1,0,0,0,2163,2155,1,0,0,0,2163,2164,1,0,0,0,2164,2166,1,0,0,0,2165,
2151,1,0,0,0,2165,2153,1,0,0,0,2166,121,1,0,0,0,2167,2173,6,61,-1,0,2168,
2169,5,144,0,0,2169,2170,5,51,0,0,2170,2174,6,61,-1,0,2171,2172,5,145,0,
0,2172,2174,6,61,-1,0,2173,2168,1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,
0,0,2174,123,1,0,0,0,2175,2176,5,50,0,0,2176,2179,5,51,0,0,2177,2179,5,51,
0,0,2178,2175,1,0,0,0,2178,2177,1,0,0,0,2179,125,1,0,0,0,2180,2184,6,63,
-1,0,2181,2183,3,254,127,0,2182,2181,1,0,0,0,2183,2186,1,0,0,0,2184,2182,
1,0,0,0,2184,2185,1,0,0,0,2185,2187,1,0,0,0,2186,2184,1,0,0,0,2187,2188,
3,218,109,0,2188,2191,6,63,-1,0,2189,2190,5,40,0,0,2190,2192,3,280,140,0,
2191,2189,1,0,0,0,2191,2192,1,0,0,0,2192,2193,1,0,0,0,2193,2194,6,63,-1,
0,2194,2195,6,63,-1,0,2195,127,1,0,0,0,2196,2197,5,131,0,0,2197,2198,5,52,
0,0,2198,2199,6,64,-1,0,2199,2203,3,218,109,0,2200,2201,5,5,0,0,2201,2202,
6,64,-1,0,2202,2204,3,218,109,0,2203,2200,1,0,0,0,2203,2204,1,0,0,0,2204,
2205,1,0,0,0,2205,2206,6,64,-1,0,2206,129,1,0,0,0,2207,2212,3,218,109,0,
2208,2213,3,132,66,0,2209,2210,5,5,0,0,2210,2211,6,65,-1,0,2211,2213,3,218,
109,0,2212,2208,1,0,0,0,2212,2209,1,0,0,0,2212,2213,1,0,0,0,2213,131,1,0,
0,0,2214,2215,5,6,0,0,2215,2242,6,66,-1,0,2216,2217,5,59,0,0,2217,2230,6,
66,-1,0,2218,2219,5,3,0,0,2219,2226,6,66,-1,0,2220,2221,5,136,0,0,2221,2227,
6,66,-1,0,2222,2223,5,92,0,0,2223,2227,6,66,-1,0,2224,2225,5,59,0,0,2225,
2227,6,66,-1,0,2226,2220,1,0,0,0,2226,2222,1,0,0,0,2226,2224,1,0,0,0,2227,
2229,1,0,0,0,2228,2218,1,0,0,0,2229,2232,1,0,0,0,2230,2228,1,0,0,0,2230,
2231,1,0,0,0,2231,2243,1,0,0,0,2232,2230,1,0,0,0,2233,2239,3,136,68,0,2234,
2235,5,3,0,0,2235,2236,6,66,-1,0,2236,2238,3,136,68,0,2237,2234,1,0,0,0,
2238,2241,1,0,0,0,2239,2237,1,0,0,0,2239,2240,1,0,0,0,2240,2243,1,0,0,0,
2241,2239,1,0,0,0,2242,2216,1,0,0,0,2242,2233,1,0,0,0,2243,2244,1,0,0,0,
2244,2245,5,7,0,0,2245,2246,6,66,-1,0,2246,133,1,0,0,0,2247,2248,5,6,0,0,
2248,2254,3,136,68,0,2249,2250,5,3,0,0,2250,2251,6,67,-1,0,2251,2253,3,136,
68,0,2252,2249,1,0,0,0,2253,2256,1,0,0,0,2254,2252,1,0,0,0,2254,2255,1,0,
0,0,2255,2257,1,0,0,0,2256,2254,1,0,0,0,2257,2258,5,7,0,0,2258,135,1,0,0,
0,2259,2260,3,280,140,0,2260,2261,5,5,0,0,2261,2268,6,68,-1,0,2262,2263,
5,59,0,0,2263,2269,6,68,-1,0,2264,2265,5,136,0,0,2265,2269,6,68,-1,0,2266,
2267,5,92,0,0,2267,2269,6,68,-1,0,2268,2262,1,0,0,0,2268,2264,1,0,0,0,2268,
2266,1,0,0,0,2269,137,1,0,0,0,2270,2271,3,144,72,0,2271,2273,6,69,-1,0,2272,
2274,5,1,0,0,2273,2272,1,0,0,0,2273,2274,1,0,0,0,2274,2275,1,0,0,0,2275,
2276,5,0,0,1,2276,139,1,0,0,0,2277,2278,5,121,0,0,2278,2279,5,53,0,0,2279,
2280,6,70,-1,0,2280,2284,3,166,83,0,2281,2282,5,5,0,0,2282,2283,6,70,-1,
0,2283,2285,3,166,83,0,2284,2281,1,0,0,0,2284,2285,1,0,0,0,2285,2290,1,0,
0,0,2286,2287,5,40,0,0,2287,2288,3,280,140,0,2288,2289,6,70,-1,0,2289,2291,
1,0,0,0,2290,2286,1,0,0,0,2290,2291,1,0,0,0,2291,2292,1,0,0,0,2292,2294,
6,70,-1,0,2293,2295,3,180,90,0,2294,2293,1,0,0,0,2294,2295,1,0,0,0,2295,
2297,1,0,0,0,2296,2298,3,170,85,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,
141,1,0,0,0,2299,2300,5,57,0,0,2300,2301,3,198,99,0,2301,2302,6,71,-1,0,
2302,2304,1,0,0,0,2303,2299,1,0,0,0,2303,2304,1,0,0,0,2304,2318,1,0,0,0,
2305,2306,5,96,0,0,2306,2307,5,41,0,0,2307,2308,3,208,104,0,2308,2315,6,
71,-1,0,2309,2310,5,3,0,0,2310,2311,3,208,104,0,2311,2312,6,71,-1,0,2312,
2314,1,0,0,0,2313,2309,1,0,0,0,2314,2317,1,0,0,0,2315,2313,1,0,0,0,2315,
2316,1,0,0,0,2316,2319,1,0,0,0,2317,2315,1,0,0,0,2318,2305,1,0,0,0,2318,
2319,1,0,0,0,2319,2324,1,0,0,0,2320,2321,5,97,0,0,2321,2322,3,198,99,0,2322,
2323,6,71,-1,0,2323,2325,1,0,0,0,2324,2320,1,0,0,0,2324,2325,1,0,0,0,2325,
2329,1,0,0,0,2326,2327,3,186,93,0,2327,2328,6,71,-1,0,2328,2330,1,0,0,0,
2329,2326,1,0,0,0,2329,2330,1,0,0,0,2330,2334,1,0,0,0,2331,2332,3,188,94,
0,2332,2333,6,71,-1,0,2333,2335,1,0,0,0,2334,2331,1,0,0,0,2334,2335,1,0,
0,0,2335,143,1,0,0,0,2336,2337,3,148,74,0,2337,2341,6,72,-1,0,2338,2339,
3,146,73,0,2339,2340,6,72,-1,0,2340,2342,1,0,0,0,2341,2338,1,0,0,0,2341,
2342,1,0,0,0,2342,145,1,0,0,0,2343,2365,6,73,-1,0,2344,2346,5,132,0,0,2345,
2347,7,2,0,0,2346,2345,1,0,0,0,2346,2347,1,0,0,0,2347,2361,1,0,0,0,2348,
2350,5,88,0,0,2349,2351,5,44,0,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,
2361,1,0,0,0,2352,2354,5,109,0,0,2353,2355,5,44,0,0,2354,2353,1,0,0,0,2354,
2355,1,0,0,0,2355,2361,1,0,0,0,2356,2358,5,99,0,0,2357,2359,5,44,0,0,2358,
2357,1,0,0,0,2358,2359,1,0,0,0,2359,2361,1,0,0,0,2360,2344,1,0,0,0,2360,
2348,1,0,0,0,2360,2352,1,0,0,0,2360,2356,1,0,0,0,2361,2362,1,0,0,0,2362,
2363,3,148,74,0,2363,2364,6,73,-1,0,2364,2366,1,0,0,0,2365,2360,1,0,0,0,
2366,2367,1,0,0,0,2367,2365,1,0,0,0,2367,2368,1,0,0,0,2368,2372,1,0,0,0,
2369,2370,3,186,93,0,2370,2371,6,73,-1,0,2371,2373,1,0,0,0,2372,2369,1,0,
0,0,2372,2373,1,0,0,0,2373,2377,1,0,0,0,2374,2375,3,188,94,0,2375,2376,6,
73,-1,0,2376,2378,1,0,0,0,2377,2374,1,0,0,0,2377,2378,1,0,0,0,2378,2390,
1,0,0,0,2379,2380,3,186,93,0,2380,2384,6,73,-1,0,2381,2382,3,188,94,0,2382,
2383,6,73,-1,0,2383,2385,1,0,0,0,2384,2381,1,0,0,0,2384,2385,1,0,0,0,2385,
2390,1,0,0,0,2386,2387,3,188,94,0,2387,2388,6,73,-1,0,2388,2390,1,0,0,0,
2389,2343,1,0,0,0,2389,2379,1,0,0,0,2389,2386,1,0,0,0,2390,147,1,0,0,0,2391,
2392,5,6,0,0,2392,2393,3,144,72,0,2393,2394,5,7,0,0,2394,2395,6,74,-1,0,
2395,2400,1,0,0,0,2396,2397,3,150,75,0,2397,2398,6,74,-1,0,2398,2400,1,0,
0,0,2399,2391,1,0,0,0,2399,2396,1,0,0,0,2400,149,1,0,0,0,2401,2402,5,54,
0,0,2402,2446,6,75,-1,0,2403,2404,5,46,0,0,2404,2417,3,152,76,0,2405,2406,
5,110,0,0,2406,2407,5,2,0,0,2407,2411,6,75,-1,0,2408,2410,3,174,87,0,2409,
2408,1,0,0,0,2410,2413,1,0,0,0,2411,2409,1,0,0,0,2411,2412,1,0,0,0,2412,
2414,1,0,0,0,2413,2411,1,0,0,0,2414,2415,5,4,0,0,2415,2416,6,75,-1,0,2416,
2418,5,100,0,0,2417,2405,1,0,0,0,2417,2418,1,0,0,0,2418,2421,1,0,0,0,2419,
2420,7,2,0,0,2420,2422,6,75,-1,0,2421,2419,1,0,0,0,2421,2422,1,0,0,0,2422,
2424,1,0,0,0,2423,2425,3,180,90,0,2424,2423,1,0,0,0,2424,2425,1,0,0,0,2425,
2427,1,0,0,0,2426,2428,3,170,85,0,2427,2426,1,0,0,0,2427,2428,1,0,0,0,2428,
2447,1,0,0,0,2429,2430,7,2,0,0,2430,2432,6,75,-1,0,2431,2429,1,0,0,0,2431,
2432,1,0,0,0,2432,2433,1,0,0,0,2433,2434,6,75,-1,0,2434,2440,3,176,88,0,
2435,2436,5,3,0,0,2436,2437,6,75,-1,0,2437,2439,3,176,88,0,2438,2435,1,0,
0,0,2439,2442,1,0,0,0,2440,2438,1,0,0,0,2440,2441,1,0,0,0,2441,2443,1,0,
0,0,2442,2440,1,0,0,0,2443,2444,5,46,0,0,2444,2445,3,152,76,0,2445,2447,
1,0,0,0,2446,2403,1,0,0,0,2446,2431,1,0,0,0,2447,2452,1,0,0,0,2448,2449,
5,57,0,0,2449,2450,3,198,99,0,2450,2451,6,75,-1,0,2451,2453,1,0,0,0,2452,
2448,1,0,0,0,2452,2453,1,0,0,0,2453,2467,1,0,0,0,2454,2455,5,96,0,0,2455,
2456,5,41,0,0,2456,2457,3,208,104,0,2457,2464,6,75,-1,0,2458,2459,5,3,0,
0,2459,2460,3,208,104,0,2460,2461,6,75,-1,0,2461,2463,1,0,0,0,2462,2458,
1,0,0,0,2463,2466,1,0,0,0,2464,2462,1,0,0,0,2464,2465,1,0,0,0,2465,2468,
1,0,0,0,2466,2464,1,0,0,0,2467,2454,1,0,0,0,2467,2468,1,0,0,0,2468,2473,
1,0,0,0,2469,2470,5,97,0,0,2470,2471,3,198,99,0,2471,2472,6,75,-1,0,2472,
2474,1,0,0,0,2473,2469,1,0,0,0,2473,2474,1,0,0,0,2474,151,1,0,0,0,2475,2476,
3,154,77,0,2476,2486,6,76,-1,0,2477,2482,6,76,-1,0,2478,2479,5,3,0,0,2479,
2480,3,154,77,0,2480,2481,6,76,-1,0,2481,2483,1,0,0,0,2482,2478,1,0,0,0,
2483,2484,1,0,0,0,2484,2482,1,0,0,0,2484,2485,1,0,0,0,2485,2487,1,0,0,0,
2486,2477,1,0,0,0,2486,2487,1,0,0,0,2487,153,1,0,0,0,2488,2489,3,158,79,
0,2489,2493,6,77,-1,0,2490,2491,3,156,78,0,2491,2492,6,77,-1,0,2492,2494,
1,0,0,0,2493,2490,1,0,0,0,2493,2494,1,0,0,0,2494,155,1,0,0,0,2495,2496,3,
192,96,0,2496,2497,6,78,-1,0,2497,2498,3,154,77,0,2498,2499,6,78,-1,0,2499,
2500,5,53,0,0,2500,2501,3,198,99,0,2501,2502,6,78,-1,0,2502,2509,1,0,0,0,
2503,2504,5,74,0,0,2504,2505,5,102,0,0,2505,2506,3,158,79,0,2506,2507,6,
78,-1,0,2507,2509,1,0,0,0,2508,2495,1,0,0,0,2508,2503,1,0,0,0,2509,2510,
1,0,0,0,2510,2508,1,0,0,0,2510,2511,1,0,0,0,2511,157,1,0,0,0,2512,2513,3,
160,80,0,2513,2514,6,79,-1,0,2514,2519,1,0,0,0,2515,2516,3,162,81,0,2516,
2517,6,79,-1,0,2517,2519,1,0,0,0,2518,2512,1,0,0,0,2518,2515,1,0,0,0,2519,
159,1,0,0,0,2520,2521,6,80,-1,0,2521,2522,3,166,83,0,2522,2526,6,80,-1,0,
2523,2524,6,80,-1,0,2524,2525,5,5,0,0,2525,2527,3,166,83,0,2526,2523,1,0,
0,0,2526,2527,1,0,0,0,2527,2535,1,0,0,0,2528,2529,5,40,0,0,2529,2530,3,280,
140,0,2530,2531,6,80,-1,0,2531,2536,1,0,0,0,2532,2533,3,278,139,0,2533,2534,
6,80,-1,0,2534,2536,1,0,0,0,2535,2528,1,0,0,0,2535,2532,1,0,0,0,2535,2536,
1,0,0,0,2536,2537,1,0,0,0,2537,2538,6,80,-1,0,2538,161,1,0,0,0,2539,2561,
5,6,0,0,2540,2541,3,162,81,0,2541,2545,6,81,-1,0,2542,2543,3,164,82,0,2543,
2544,6,81,-1,0,2544,2546,1,0,0,0,2545,2542,1,0,0,0,2545,2546,1,0,0,0,2546,
2562,1,0,0,0,2547,2548,3,160,80,0,2548,2552,6,81,-1,0,2549,2550,3,156,78,
0,2550,2551,6,81,-1,0,2551,2553,1,0,0,0,2552,2549,1,0,0,0,2552,2553,1,0,
0,0,2553,2562,1,0,0,0,2554,2555,3,150,75,0,2555,2559,6,81,-1,0,2556,2557,
3,146,73,0,2557,2558,6,81,-1,0,2558,2560,1,0,0,0,2559,2556,1,0,0,0,2559,
2560,1,0,0,0,2560,2562,1,0,0,0,2561,2540,1,0,0,0,2561,2547,1,0,0,0,2561,
2554,1,0,0,0,2562,2563,1,0,0,0,2563,2564,5,7,0,0,2564,2574,6,81,-1,0,2565,
2566,5,40,0,0,2566,2567,3,280,140,0,2567,2568,6,81,-1,0,2568,2569,6,81,-1,
0,2569,2575,1,0,0,0,2570,2571,3,278,139,0,2571,2572,6,81,-1,0,2572,2573,
6,81,-1,0,2573,2575,1,0,0,0,2574,2565,1,0,0,0,2574,2570,1,0,0,0,2574,2575,
1,0,0,0,2575,163,1,0,0,0,2576,2577,6,82,-1,0,2577,2578,3,146,73,0,2578,2579,
6,82,-1,0,2579,2584,1,0,0,0,2580,2581,3,156,78,0,2581,2582,6,82,-1,0,2582,
2584,1,0,0,0,2583,2576,1,0,0,0,2583,2580,1,0,0,0,2584,165,1,0,0,0,2585,2586,
3,280,140,0,2586,2596,6,83,-1,0,2587,2589,3,168,84,0,2588,2590,3,244,122,
0,2589,2588,1,0,0,0,2589,2590,1,0,0,0,2590,2591,1,0,0,0,2591,2592,6,83,-1,
0,2592,2597,1,0,0,0,2593,2594,3,244,122,0,2594,2595,6,83,-1,0,2595,2597,
1,0,0,0,2596,2587,1,0,0,0,2596,2593,1,0,0,0,2596,2597,1,0,0,0,2597,2615,
1,0,0,0,2598,2599,6,83,-1,0,2599,2600,5,15,0,0,2600,2601,3,280,140,0,2601,
2611,6,83,-1,0,2602,2604,3,168,84,0,2603,2605,3,244,122,0,2604,2603,1,0,
0,0,2604,2605,1,0,0,0,2605,2606,1,0,0,0,2606,2607,6,83,-1,0,2607,2612,1,
0,0,0,2608,2609,3,244,122,0,2609,2610,6,83,-1,0,2610,2612,1,0,0,0,2611,2602,
1,0,0,0,2611,2608,1,0,0,0,2611,2612,1,0,0,0,2612,2614,1,0,0,0,2613,2598,
1,0,0,0,2614,2617,1,0,0,0,2615,2613,1,0,0,0,2615,2616,1,0,0,0,2616,167,1,
0,0,0,2617,2615,1,0,0,0,2618,2619,5,6,0,0,2619,2620,6,84,-1,0,2620,2621,
3,280,140,0,2621,2622,5,5,0,0,2622,2631,3,224,112,0,2623,2624,5,3,0,0,2624,
2625,6,84,-1,0,2625,2626,3,280,140,0,2626,2627,5,5,0,0,2627,2628,3,224,112,
0,2628,2630,1,0,0,0,2629,2623,1,0,0,0,2630,2633,1,0,0,0,2631,2629,1,0,0,
0,2631,2632,1,0,0,0,2632,2634,1,0,0,0,2633,2631,1,0,0,0,2634,2635,5,7,0,
0,2635,2636,6,84,-1,0,2636,169,1,0,0,0,2637,2638,5,89,0,0,2638,2639,5,2,
0,0,2639,2640,6,85,-1,0,2640,2646,3,172,86,0,2641,2642,5,3,0,0,2642,2643,
6,85,-1,0,2643,2645,3,172,86,0,2644,2641,1,0,0,0,2645,2648,1,0,0,0,2646,
2644,1,0,0,0,2646,2647,1,0,0,0,2647,2649,1,0,0,0,2648,2646,1,0,0,0,2649,
2650,5,4,0,0,2650,2651,6,85,-1,0,2651,171,1,0,0,0,2652,2653,3,280,140,0,
2653,2654,6,86,-1,0,2654,173,1,0,0,0,2655,2656,3,280,140,0,2656,2657,5,5,
0,0,2657,2658,3,108,54,0,2658,2662,6,87,-1,0,2659,2663,3,116,58,0,2660,2663,
3,114,57,0,2661,2663,3,218,109,0,2662,2659,1,0,0,0,2662,2660,1,0,0,0,2662,
2661,1,0,0,0,2663,2665,1,0,0,0,2664,2666,3,110,55,0,2665,2664,1,0,0,0,2665,
2666,1,0,0,0,2666,2667,1,0,0,0,2667,2668,3,12,6,0,2668,175,1,0,0,0,2669,
2670,5,12,0,0,2670,2689,6,88,-1,0,2671,2675,6,88,-1,0,2672,2674,3,256,128,
0,2673,2672,1,0,0,0,2674,2677,1,0,0,0,2675,2673,1,0,0,0,2675,2676,1,0,0,
0,2676,2678,1,0,0,0,2677,2675,1,0,0,0,2678,2681,6,88,-1,0,2679,2680,5,142,
0,0,2680,2682,6,88,-1,0,2681,2679,1,0,0,0,2681,2682,1,0,0,0,2682,2685,1,
0,0,0,2683,2684,5,48,0,0,2684,2686,6,88,-1,0,2685,2683,1,0,0,0,2685,2686,
1,0,0,0,2686,2687,1,0,0,0,2687,2689,3,178,89,0,2688,2669,1,0,0,0,2688,2671,
1,0,0,0,2689,177,1,0,0,0,2690,2731,6,89,-1,0,2691,2692,3,208,104,0,2692,
2701,6,89,-1,0,2693,2694,5,40,0,0,2694,2695,3,280,140,0,2695,2696,6,89,-1,
0,2696,2702,1,0,0,0,2697,2698,3,280,140,0,2698,2699,6,89,-1,0,2699,2702,
1,0,0,0,2700,2702,6,89,-1,0,2701,2693,1,0,0,0,2701,2697,1,0,0,0,2701,2700,
1,0,0,0,2702,2703,1,0,0,0,2703,2721,6,89,-1,0,2704,2705,6,89,-1,0,2705,2707,
3,182,91,0,2706,2708,3,170,85,0,2707,2706,1,0,0,0,2707,2708,1,0,0,0,2708,
2722,1,0,0,0,2709,2710,6,89,-1,0,2710,2711,6,89,-1,0,2711,2712,5,150,0,0,
2712,2719,6,89,-1,0,2713,2715,3,182,91,0,2714,2716,3,170,85,0,2715,2714,
1,0,0,0,2715,2716,1,0,0,0,2716,2720,1,0,0,0,2717,2718,5,12,0,0,2718,2720,
6,89,-1,0,2719,2713,1,0,0,0,2719,2717,1,0,0,0,2720,2722,1,0,0,0,2721,2704,
1,0,0,0,2721,2709,1,0,0,0,2721,2722,1,0,0,0,2722,2732,1,0,0,0,2723,2725,
3,182,91,0,2724,2726,3,170,85,0,2725,2724,1,0,0,0,2725,2726,1,0,0,0,2726,
2727,1,0,0,0,2727,2728,5,40,0,0,2728,2729,3,280,140,0,2729,2730,6,89,-1,
0,2730,2732,1,0,0,0,2731,2691,1,0,0,0,2731,2723,1,0,0,0,2732,2733,1,0,0,
0,2733,2737,6,89,-1,0,2734,2736,3,252,126,0,2735,2734,1,0,0,0,2736,2739,
1,0,0,0,2737,2735,1,0,0,0,2737,2738,1,0,0,0,2738,2795,1,0,0,0,2739,2737,
1,0,0,0,2740,2793,5,5,0,0,2741,2742,5,122,0,0,2742,2743,5,130,0,0,2743,2744,
6,89,-1,0,2744,2753,3,218,109,0,2745,2754,3,110,55,0,2746,2750,6,89,-1,0,
2747,2749,3,254,127,0,2748,2747,1,0,0,0,2749,2752,1,0,0,0,2750,2748,1,0,
0,0,2750,2751,1,0,0,0,2751,2754,1,0,0,0,2752,2750,1,0,0,0,2753,2745,1,0,
0,0,2753,2746,1,0,0,0,2754,2794,1,0,0,0,2755,2756,3,128,64,0,2756,2760,6,
89,-1,0,2757,2759,3,254,127,0,2758,2757,1,0,0,0,2759,2762,1,0,0,0,2760,2758,
1,0,0,0,2760,2761,1,0,0,0,2761,2794,1,0,0,0,2762,2760,1,0,0,0,2763,2764,
5,107,0,0,2764,2765,6,89,-1,0,2765,2766,3,130,65,0,2766,2770,6,89,-1,0,2767,
2769,3,254,127,0,2768,2767,1,0,0,0,2769,2772,1,0,0,0,2770,2768,1,0,0,0,2770,
2771,1,0,0,0,2771,2794,1,0,0,0,2772,2770,1,0,0,0,2773,2774,3,130,65,0,2774,
2778,6,89,-1,0,2775,2777,3,254,127,0,2776,2775,1,0,0,0,2777,2780,1,0,0,0,
2778,2776,1,0,0,0,2778,2779,1,0,0,0,2779,2794,1,0,0,0,2780,2778,1,0,0,0,
2781,2782,6,89,-1,0,2782,2783,6,89,-1,0,2783,2787,3,108,54,0,2784,2788,3,
116,58,0,2785,2788,3,114,57,0,2786,2788,3,218,109,0,2787,2784,1,0,0,0,2787,
2785,1,0,0,0,2787,2786,1,0,0,0,2788,2789,1,0,0,0,2789,2790,5,53,0,0,2790,
2791,3,198,99,0,2791,2792,6,89,-1,0,2792,2794,1,0,0,0,2793,2741,1,0,0,0,
2793,2755,1,0,0,0,2793,2763,1,0,0,0,2793,2773,1,0,0,0,2793,2781,1,0,0,0,
2794,2796,1,0,0,0,2795,2740,1,0,0,0,2795,2796,1,0,0,0,2796,179,1,0,0,0,2797,
2798,5,2,0,0,2798,2808,6,90,-1,0,2799,2805,3,176,88,0,2800,2801,5,3,0,0,
2801,2802,6,90,-1,0,2802,2804,3,176,88,0,2803,2800,1,0,0,0,2804,2807,1,0,
0,0,2805,2803,1,0,0,0,2805,2806,1,0,0,0,2806,2809,1,0,0,0,2807,2805,1,0,
0,0,2808,2799,1,0,0,0,2808,2809,1,0,0,0,2809,2810,1,0,0,0,2810,2811,5,4,
0,0,2811,2812,6,90,-1,0,2812,181,1,0,0,0,2813,2814,5,2,0,0,2814,2824,6,91,
-1,0,2815,2821,3,184,92,0,2816,2817,5,3,0,0,2817,2818,6,91,-1,0,2818,2820,
3,184,92,0,2819,2816,1,0,0,0,2820,2823,1,0,0,0,2821,2819,1,0,0,0,2821,2822,
1,0,0,0,2822,2825,1,0,0,0,2823,2821,1,0,0,0,2824,2815,1,0,0,0,2824,2825,
1,0,0,0,2825,2826,1,0,0,0,2826,2827,5,4,0,0,2827,2828,6,91,-1,0,2828,183,
1,0,0,0,2829,2830,5,12,0,0,2830,2840,6,92,-1,0,2831,2835,6,92,-1,0,2832,
2834,3,256,128,0,2833,2832,1,0,0,0,2834,2837,1,0,0,0,2835,2833,1,0,0,0,2835,
2836,1,0,0,0,2836,2838,1,0,0,0,2837,2835,1,0,0,0,2838,2840,3,178,89,0,2839,
2829,1,0,0,0,2839,2831,1,0,0,0,2840,185,1,0,0,0,2841,2842,5,116,0,0,2842,
2843,5,41,0,0,2843,2844,6,93,-1,0,2844,2845,3,190,95,0,2845,2852,6,93,-1,
0,2846,2847,5,3,0,0,2847,2848,3,190,95,0,2848,2849,6,93,-1,0,2849,2851,1,
0,0,0,2850,2846,1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,2853,1,
0,0,0,2853,187,1,0,0,0,2854,2852,1,0,0,0,2855,2856,5,106,0,0,2856,2857,6,
94,-1,0,2857,2858,3,208,104,0,2858,2863,6,94,-1,0,2859,2860,5,113,0,0,2860,
2861,3,208,104,0,2861,2862,6,94,-1,0,2862,2864,1,0,0,0,2863,2859,1,0,0,0,
2863,2864,1,0,0,0,2864,189,1,0,0,0,2865,2866,3,208,104,0,2866,2871,6,95,
-1,0,2867,2868,5,67,0,0,2868,2872,6,95,-1,0,2869,2870,5,79,0,0,2870,2872,
6,95,-1,0,2871,2867,1,0,0,0,2871,2869,1,0,0,0,2871,2872,1,0,0,0,2872,2876,
1,0,0,0,2873,2874,5,112,0,0,2874,2875,7,3,0,0,2875,2877,6,95,-1,0,2876,2873,
1,0,0,0,2876,2877,1,0,0,0,2877,191,1,0,0,0,2878,2879,5,102,0,0,2879,2914,
6,96,-1,0,2880,2882,5,98,0,0,2881,2883,3,194,97,0,2882,2881,1,0,0,0,2882,
2883,1,0,0,0,2883,2884,1,0,0,0,2884,2885,5,102,0,0,2885,2914,6,96,-1,0,2886,
2888,5,104,0,0,2887,2889,5,117,0,0,2888,2887,1,0,0,0,2888,2889,1,0,0,0,2889,
2891,1,0,0,0,2890,2892,3,194,97,0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,
2893,1,0,0,0,2893,2894,5,102,0,0,2894,2914,6,96,-1,0,2895,2897,5,124,0,0,
2896,2898,5,117,0,0,2897,2896,1,0,0,0,2897,2898,1,0,0,0,2898,2900,1,0,0,
0,2899,2901,3,194,97,0,2900,2899,1,0,0,0,2900,2901,1,0,0,0,2901,2902,1,0,
0,0,2902,2903,5,102,0,0,2903,2914,6,96,-1,0,2904,2906,5,94,0,0,2905,2907,
5,117,0,0,2906,2905,1,0,0,0,2906,2907,1,0,0,0,2907,2909,1,0,0,0,2908,2910,
3,194,97,0,2909,2908,1,0,0,0,2909,2910,1,0,0,0,2910,2911,1,0,0,0,2911,2912,
5,102,0,0,2912,2914,6,96,-1,0,2913,2878,1,0,0,0,2913,2880,1,0,0,0,2913,2886,
1,0,0,0,2913,2895,1,0,0,0,2913,2904,1,0,0,0,2914,2915,1,0,0,0,2915,2916,
6,96,-1,0,2916,193,1,0,0,0,2917,2919,5,87,0,0,2918,2917,1,0,0,0,2918,2919,
1,0,0,0,2919,2920,1,0,0,0,2920,2921,5,114,0,0,2921,2925,6,97,-1,0,2922,2923,
5,108,0,0,2923,2925,6,97,-1,0,2924,2918,1,0,0,0,2924,2922,1,0,0,0,2925,2926,
1,0,0,0,2926,2934,5,130,0,0,2927,2929,5,87,0,0,2928,2927,1,0,0,0,2928,2929,
1,0,0,0,2929,2930,1,0,0,0,2930,2931,5,114,0,0,2931,2935,6,97,-1,0,2932,2933,
5,108,0,0,2933,2935,6,97,-1,0,2934,2928,1,0,0,0,2934,2932,1,0,0,0,2935,195,
1,0,0,0,2936,2937,3,198,99,0,2937,2938,6,98,-1,0,2938,2939,5,0,0,1,2939,
197,1,0,0,0,2940,2942,3,202,101,0,2941,2943,3,200,100,0,2942,2941,1,0,0,
0,2942,2943,1,0,0,0,2943,199,1,0,0,0,2944,2945,5,115,0,0,2945,2949,6,100,
-1,0,2946,2947,5,63,0,0,2947,2949,6,100,-1,0,2948,2944,1,0,0,0,2948,2946,
1,0,0,0,2949,2950,1,0,0,0,2950,2951,3,202,101,0,2951,2952,6,100,-1,0,2952,
2954,1,0,0,0,2953,2948,1,0,0,0,2954,2955,1,0,0,0,2955,2953,1,0,0,0,2955,
2956,1,0,0,0,2956,2966,1,0,0,0,2957,2958,5,16,0,0,2958,2959,6,100,-1,0,2959,
2960,3,208,104,0,2960,2961,6,100,-1,0,2961,2962,5,5,0,0,2962,2963,6,100,
-1,0,2963,2964,3,208,104,0,2964,2965,6,100,-1,0,2965,2967,1,0,0,0,2966,2957,
1,0,0,0,2966,2967,1,0,0,0,2967,2978,1,0,0,0,2968,2969,5,16,0,0,2969,2970,
6,100,-1,0,2970,2971,3,208,104,0,2971,2972,6,100,-1,0,2972,2973,5,5,0,0,
2973,2974,6,100,-1,0,2974,2975,3,208,104,0,2975,2976,6,100,-1,0,2976,2978,
1,0,0,0,2977,2953,1,0,0,0,2977,2968,1,0,0,0,2978,201,1,0,0,0,2979,2980,3,
204,102,0,2980,2981,6,101,-1,0,2981,2990,1,0,0,0,2982,2984,3,214,107,0,2983,
2985,3,210,105,0,2984,2983,1,0,0,0,2984,2985,1,0,0,0,2985,2987,1,0,0,0,2986,
2988,3,206,103,0,2987,2986,1,0,0,0,2987,2988,1,0,0,0,2988,2990,1,0,0,0,2989,
2979,1,0,0,0,2989,2982,1,0,0,0,2990,203,1,0,0,0,2991,2992,5,50,0,0,2992,
2993,6,102,-1,0,2993,2994,3,202,101,0,2994,2995,6,102,-1,0,2995,3021,1,0,
0,0,2996,2997,5,45,0,0,2997,3009,6,102,-1,0,2998,2999,5,6,0,0,2999,3000,
3,144,72,0,3000,3001,5,7,0,0,3001,3002,6,102,-1,0,3002,3010,1,0,0,0,3003,
3004,7,4,0,0,3004,3010,6,102,-1,0,3005,3006,3,220,110,0,3006,3007,6,102,
-1,0,3007,3008,6,102,-1,0,3008,3010,1,0,0,0,3009,2998,1,0,0,0,3009,3003,
1,0,0,0,3009,3005,1,0,0,0,3010,3021,1,0,0,0,3011,3013,3,212,106,0,3012,3014,
3,210,105,0,3013,3012,1,0,0,0,3013,3014,1,0,0,0,3014,3016,1,0,0,0,3015,3017,
3,206,103,0,3016,3015,1,0,0,0,3016,3017,1,0,0,0,3017,3018,1,0,0,0,3018,3019,
6,102,-1,0,3019,3021,1,0,0,0,3020,2991,1,0,0,0,3020,2996,1,0,0,0,3020,3011,
1,0,0,0,3021,205,1,0,0,0,3022,3023,7,5,0,0,3023,3026,6,103,-1,0,3024,3025,
7,6,0,0,3025,3027,6,103,-1,0,3026,3024,1,0,0,0,3026,3027,1,0,0,0,3027,3028,
1,0,0,0,3028,3029,3,208,104,0,3029,3030,6,103,-1,0,3030,3071,1,0,0,0,3031,
3032,5,101,0,0,3032,3035,6,103,-1,0,3033,3034,5,50,0,0,3034,3036,6,103,-1,
0,3035,3033,1,0,0,0,3035,3036,1,0,0,0,3036,3037,1,0,0,0,3037,3038,5,51,0,
0,3038,3071,6,103,-1,0,3039,3040,5,50,0,0,3040,3042,6,103,-1,0,3041,3039,
1,0,0,0,3041,3042,1,0,0,0,3042,3068,1,0,0,0,3043,3044,5,47,0,0,3044,3045,
6,103,-1,0,3045,3046,3,208,104,0,3046,3047,6,103,-1,0,3047,3069,1,0,0,0,
3048,3049,5,70,0,0,3049,3050,6,103,-1,0,3050,3051,3,208,104,0,3051,3052,
6,103,-1,0,3052,3053,5,63,0,0,3053,3054,6,103,-1,0,3054,3055,3,208,104,0,
3055,3056,6,103,-1,0,3056,3069,1,0,0,0,3057,3058,5,105,0,0,3058,3059,6,103,
-1,0,3059,3060,3,208,104,0,3060,3066,6,103,-1,0,3061,3062,5,86,0,0,3062,
3063,6,103,-1,0,3063,3064,3,208,104,0,3064,3065,6,103,-1,0,3065,3067,1,0,
0,0,3066,3061,1,0,0,0,3066,3067,1,0,0,0,3067,3069,1,0,0,0,3068,3043,1,0,
0,0,3068,3048,1,0,0,0,3068,3057,1,0,0,0,3069,3071,1,0,0,0,3070,3022,1,0,
0,0,3070,3031,1,0,0,0,3070,3041,1,0,0,0,3071,207,1,0,0,0,3072,3073,3,212,
106,0,3073,3074,6,104,-1,0,3074,3079,1,0,0,0,3075,3076,3,214,107,0,3076,
3077,6,104,-1,0,3077,3079,1,0,0,0,3078,3072,1,0,0,0,3078,3075,1,0,0,0,3079,
3083,1,0,0,0,3080,3081,3,210,105,0,3081,3082,6,104,-1,0,3082,3084,1,0,0,
0,3083,3080,1,0,0,0,3083,3084,1,0,0,0,3084,209,1,0,0,0,3085,3086,5,23,0,
0,3086,3096,6,105,-1,0,3087,3088,5,9,0,0,3088,3096,6,105,-1,0,3089,3090,
5,10,0,0,3090,3096,6,105,-1,0,3091,3092,5,12,0,0,3092,3096,6,105,-1,0,3093,
3094,5,24,0,0,3094,3096,6,105,-1,0,3095,3085,1,0,0,0,3095,3087,1,0,0,0,3095,
3089,1,0,0,0,3095,3091,1,0,0,0,3095,3093,1,0,0,0,3096,3103,1,0,0,0,3097,
3098,3,212,106,0,3098,3099,6,105,-1,0,3099,3104,1,0,0,0,3100,3101,3,214,
107,0,3101,3102,6,105,-1,0,3102,3104,1,0,0,0,3103,3097,1,0,0,0,3103,3100,
1,0,0,0,3104,3106,1,0,0,0,3105,3095,1,0,0,0,3106,3107,1,0,0,0,3107,3105,
1,0,0,0,3107,3108,1,0,0,0,3108,211,1,0,0,0,3109,3110,7,7,0,0,3110,3117,6,
106,-1,0,3111,3112,3,212,106,0,3112,3113,6,106,-1,0,3113,3118,1,0,0,0,3114,
3115,3,214,107,0,3115,3116,6,106,-1,0,3116,3118,1,0,0,0,3117,3111,1,0,0,
0,3117,3114,1,0,0,0,3118,3199,1,0,0,0,3119,3120,3,276,138,0,3120,3121,6,
106,-1,0,3121,3199,1,0,0,0,3122,3123,3,216,108,0,3123,3124,6,106,-1,0,3124,
3199,1,0,0,0,3125,3126,5,42,0,0,3126,3155,6,106,-1,0,3127,3128,3,208,104,
0,3128,3138,6,106,-1,0,3129,3130,5,56,0,0,3130,3131,6,106,-1,0,3131,3132,
3,208,104,0,3132,3133,6,106,-1,0,3133,3134,5,129,0,0,3134,3135,6,106,-1,
0,3135,3136,3,208,104,0,3136,3137,6,106,-1,0,3137,3139,1,0,0,0,3138,3129,
1,0,0,0,3139,3140,1,0,0,0,3140,3138,1,0,0,0,3140,3141,1,0,0,0,3141,3156,
1,0,0,0,3142,3143,5,56,0,0,3143,3144,6,106,-1,0,3144,3145,3,198,99,0,3145,
3146,6,106,-1,0,3146,3147,5,129,0,0,3147,3148,6,106,-1,0,3148,3149,3,208,
104,0,3149,3150,6,106,-1,0,3150,3152,1,0,0,0,3151,3142,1,0,0,0,3152,3153,
1,0,0,0,3153,3151,1,0,0,0,3153,3154,1,0,0,0,3154,3156,1,0,0,0,3155,3127,
1,0,0,0,3155,3151,1,0,0,0,3156,3162,1,0,0,0,3157,3158,5,81,0,0,3158,3159,
6,106,-1,0,3159,3160,3,208,104,0,3160,3161,6,106,-1,0,3161,3163,1,0,0,0,
3162,3157,1,0,0,0,3162,3163,1,0,0,0,3163,3164,1,0,0,0,3164,3165,5,82,0,0,
3165,3166,6,106,-1,0,3166,3199,1,0,0,0,3167,3168,5,49,0,0,3168,3169,6,106,
-1,0,3169,3170,3,220,110,0,3170,3171,6,106,-1,0,3171,3172,6,106,-1,0,3172,
3199,1,0,0,0,3173,3174,3,220,110,0,3174,3175,6,106,-1,0,3175,3184,6,106,
-1,0,3176,3177,6,106,-1,0,3177,3178,5,143,0,0,3178,3179,6,106,-1,0,3179,
3180,5,6,0,0,3180,3181,3,228,114,0,3181,3182,5,7,0,0,3182,3183,6,106,-1,
0,3183,3185,1,0,0,0,3184,3176,1,0,0,0,3184,3185,1,0,0,0,3185,3199,1,0,0,
0,3186,3187,5,5,0,0,3187,3188,6,106,-1,0,3188,3194,6,106,-1,0,3189,3190,
3,220,110,0,3190,3191,6,106,-1,0,3191,3195,1,0,0,0,3192,3193,5,59,0,0,3193,
3195,6,106,-1,0,3194,3189,1,0,0,0,3194,3192,1,0,0,0,3195,3199,1,0,0,0,3196,
3197,5,16,0,0,3197,3199,6,106,-1,0,3198,3109,1,0,0,0,3198,3119,1,0,0,0,3198,
3122,1,0,0,0,3198,3125,1,0,0,0,3198,3167,1,0,0,0,3198,3173,1,0,0,0,3198,
3186,1,0,0,0,3198,3196,1,0,0,0,3199,213,1,0,0,0,3200,3249,5,6,0,0,3201,3203,
3,150,75,0,3202,3204,3,146,73,0,3203,3202,1,0,0,0,3203,3204,1,0,0,0,3204,
3205,1,0,0,0,3205,3206,6,107,-1,0,3206,3250,1,0,0,0,3207,3209,3,204,102,
0,3208,3210,3,200,100,0,3209,3208,1,0,0,0,3209,3210,1,0,0,0,3210,3211,1,
0,0,0,3211,3219,6,107,-1,0,3212,3213,5,3,0,0,3213,3214,6,107,-1,0,3214,3215,
3,198,99,0,3215,3216,6,107,-1,0,3216,3218,1,0,0,0,3217,3212,1,0,0,0,3218,
3221,1,0,0,0,3219,3217,1,0,0,0,3219,3220,1,0,0,0,3220,3250,1,0,0,0,3221,
3219,1,0,0,0,3222,3223,3,214,107,0,3223,3247,6,107,-1,0,3224,3225,3,146,
73,0,3225,3226,6,107,-1,0,3226,3248,1,0,0,0,3227,3229,3,210,105,0,3228,3227,
1,0,0,0,3228,3229,1,0,0,0,3229,3231,1,0,0,0,3230,3232,3,206,103,0,3231,3230,
1,0,0,0,3231,3232,1,0,0,0,3232,3234,1,0,0,0,3233,3235,3,200,100,0,3234,3233,
1,0,0,0,3234,3235,1,0,0,0,3235,3236,1,0,0,0,3236,3244,6,107,-1,0,3237,3238,
5,3,0,0,3238,3239,6,107,-1,0,3239,3240,3,198,99,0,3240,3241,6,107,-1,0,3241,
3243,1,0,0,0,3242,3237,1,0,0,0,3243,3246,1,0,0,0,3244,3242,1,0,0,0,3244,
3245,1,0,0,0,3245,3248,1,0,0,0,3246,3244,1,0,0,0,3247,3224,1,0,0,0,3247,
3228,1,0,0,0,3248,3250,1,0,0,0,3249,3201,1,0,0,0,3249,3207,1,0,0,0,3249,
3222,1,0,0,0,3250,3251,1,0,0,0,3251,3252,5,7,0,0,3252,3253,6,107,-1,0,3253,
215,1,0,0,0,3254,3255,5,43,0,0,3255,3256,5,6,0,0,3256,3257,6,108,-1,0,3257,
3258,3,208,104,0,3258,3259,5,40,0,0,3259,3260,3,130,65,0,3260,3261,6,108,
-1,0,3261,3262,5,7,0,0,3262,3263,6,108,-1,0,3263,217,1,0,0,0,3264,3265,3,
280,140,0,3265,3272,6,109,-1,0,3266,3267,5,15,0,0,3267,3268,3,280,140,0,
3268,3269,6,109,-1,0,3269,3271,1,0,0,0,3270,3266,1,0,0,0,3271,3274,1,0,0,
0,3272,3270,1,0,0,0,3272,3273,1,0,0,0,3273,219,1,0,0,0,3274,3272,1,0,0,0,
3275,3276,3,280,140,0,3276,3282,6,110,-1,0,3277,3279,3,222,111,0,3278,3280,
3,244,122,0,3279,3278,1,0,0,0,3279,3280,1,0,0,0,3280,3283,1,0,0,0,3281,3283,
3,244,122,0,3282,3277,1,0,0,0,3282,3281,1,0,0,0,3282,3283,1,0,0,0,3283,3296,
1,0,0,0,3284,3285,5,15,0,0,3285,3286,3,280,140,0,3286,3292,6,110,-1,0,3287,
3289,3,222,111,0,3288,3290,3,244,122,0,3289,3288,1,0,0,0,3289,3290,1,0,0,
0,3290,3293,1,0,0,0,3291,3293,3,244,122,0,3292,3287,1,0,0,0,3292,3291,1,
0,0,0,3292,3293,1,0,0,0,3293,3295,1,0,0,0,3294,3284,1,0,0,0,3295,3298,1,
0,0,0,3296,3294,1,0,0,0,3296,3297,1,0,0,0,3297,221,1,0,0,0,3298,3296,1,0,
0,0,3299,3300,6,111,-1,0,3300,3301,5,6,0,0,3301,3348,6,111,-1,0,3302,3303,
6,111,-1,0,3303,3304,5,144,0,0,3304,3305,5,5,0,0,3305,3314,3,224,112,0,3306,
3307,5,3,0,0,3307,3308,6,111,-1,0,3308,3309,3,280,140,0,3309,3310,5,5,0,
0,3310,3311,3,224,112,0,3311,3313,1,0,0,0,3312,3306,1,0,0,0,3313,3316,1,
0,0,0,3314,3312,1,0,0,0,3314,3315,1,0,0,0,3315,3349,1,0,0,0,3316,3314,1,
0,0,0,3317,3318,6,111,-1,0,3318,3319,5,145,0,0,3319,3320,5,25,0,0,3320,3329,
3,224,112,0,3321,3322,5,3,0,0,3322,3323,6,111,-1,0,3323,3324,3,280,140,0,
3324,3325,5,25,0,0,3325,3326,3,224,112,0,3326,3328,1,0,0,0,3327,3321,1,0,
0,0,3328,3331,1,0,0,0,3329,3327,1,0,0,0,3329,3330,1,0,0,0,3330,3349,1,0,
0,0,3331,3329,1,0,0,0,3332,3333,6,111,-1,0,3333,3339,3,226,113,0,3334,3335,
5,3,0,0,3335,3336,6,111,-1,0,3336,3338,3,226,113,0,3337,3334,1,0,0,0,3338,
3341,1,0,0,0,3339,3337,1,0,0,0,3339,3340,1,0,0,0,3340,3345,1,0,0,0,3341,
3339,1,0,0,0,3342,3343,3,232,116,0,3343,3344,6,111,-1,0,3344,3346,1,0,0,
0,3345,3342,1,0,0,0,3345,3346,1,0,0,0,3346,3349,1,0,0,0,3347,3349,6,111,
-1,0,3348,3302,1,0,0,0,3348,3317,1,0,0,0,3348,3332,1,0,0,0,3348,3347,1,0,
0,0,3349,3350,1,0,0,0,3350,3351,5,7,0,0,3351,3352,6,111,-1,0,3352,223,1,
0,0,0,3353,3354,3,208,104,0,3354,3355,6,112,-1,0,3355,225,1,0,0,0,3356,3357,
3,208,104,0,3357,3358,6,113,-1,0,3358,3370,1,0,0,0,3359,3360,5,147,0,0,3360,
3370,6,113,-1,0,3361,3362,5,149,0,0,3362,3363,6,113,-1,0,3363,3364,3,208,
104,0,3364,3365,6,113,-1,0,3365,3370,1,0,0,0,3366,3367,6,113,-1,0,3367,3368,
7,8,0,0,3368,3370,6,113,-1,0,3369,3356,1,0,0,0,3369,3359,1,0,0,0,3369,3361,
1,0,0,0,3369,3366,1,0,0,0,3370,3392,1,0,0,0,3371,3375,6,113,-1,0,3372,3376,
5,148,0,0,3373,3374,6,113,-1,0,3374,3376,7,9,0,0,3375,3372,1,0,0,0,3375,
3373,1,0,0,0,3376,3377,1,0,0,0,3377,3386,6,113,-1,0,3378,3379,3,208,104,
0,3379,3380,6,113,-1,0,3380,3387,1,0,0,0,3381,3382,5,147,0,0,3382,3387,6,
113,-1,0,3383,3384,6,113,-1,0,3384,3385,7,10,0,0,3385,3387,6,113,-1,0,3386,
3378,1,0,0,0,3386,3381,1,0,0,0,3386,3383,1,0,0,0,3387,3389,1,0,0,0,3388,
3371,1,0,0,0,3389,3390,1,0,0,0,3390,3388,1,0,0,0,3390,3391,1,0,0,0,3391,
3393,1,0,0,0,3392,3388,1,0,0,0,3392,3393,1,0,0,0,3393,227,1,0,0,0,3394,3395,
5,119,0,0,3395,3396,6,114,-1,0,3396,3397,5,41,0,0,3397,3398,6,114,-1,0,3398,
3399,3,230,115,0,3399,3400,6,114,-1,0,3400,3402,1,0,0,0,3401,3394,1,0,0,
0,3401,3402,1,0,0,0,3402,3410,1,0,0,0,3403,3404,5,116,0,0,3404,3405,6,114,
-1,0,3405,3406,5,41,0,0,3406,3407,6,114,-1,0,3407,3408,3,234,117,0,3408,
3409,6,114,-1,0,3409,3411,1,0,0,0,3410,3403,1,0,0,0,3410,3411,1,0,0,0,3411,
3417,1,0,0,0,3412,3413,5,126,0,0,3413,3414,6,114,-1,0,3414,3415,3,238,119,
0,3415,3416,6,114,-1,0,3416,3418,1,0,0,0,3417,3412,1,0,0,0,3417,3418,1,0,
0,0,3418,229,1,0,0,0,3419,3420,3,208,104,0,3420,3428,6,115,-1,0,3421,3422,
5,3,0,0,3422,3423,6,115,-1,0,3423,3424,3,208,104,0,3424,3425,6,115,-1,0,
3425,3427,1,0,0,0,3426,3421,1,0,0,0,3427,3430,1,0,0,0,3428,3426,1,0,0,0,
3428,3429,1,0,0,0,3429,231,1,0,0,0,3430,3428,1,0,0,0,3431,3432,5,116,0,0,
3432,3433,6,116,-1,0,3433,3434,5,41,0,0,3434,3435,6,116,-1,0,3435,3436,3,
234,117,0,3436,3437,6,116,-1,0,3437,233,1,0,0,0,3438,3444,3,236,118,0,3439,
3440,5,3,0,0,3440,3441,6,117,-1,0,3441,3443,3,236,118,0,3442,3439,1,0,0,
0,3443,3446,1,0,0,0,3444,3442,1,0,0,0,3444,3445,1,0,0,0,3445,235,1,0,0,0,
3446,3444,1,0,0,0,3447,3448,3,208,104,0,3448,3453,6,118,-1,0,3449,3450,5,
67,0,0,3450,3454,6,118,-1,0,3451,3452,5,79,0,0,3452,3454,6,118,-1,0,3453,
3449,1,0,0,0,3453,3451,1,0,0,0,3453,3454,1,0,0,0,3454,3459,1,0,0,0,3455,
3456,5,112,0,0,3456,3457,6,118,-1,0,3457,3458,7,3,0,0,3458,3460,6,118,-1,
0,3459,3455,1,0,0,0,3459,3460,1,0,0,0,3460,237,1,0,0,0,3461,3470,3,242,121,
0,3462,3463,5,70,0,0,3463,3464,6,119,-1,0,3464,3465,3,240,120,0,3465,3466,
5,63,0,0,3466,3467,6,119,-1,0,3467,3468,3,240,120,0,3468,3470,1,0,0,0,3469,
3461,1,0,0,0,3469,3462,1,0,0,0,3470,239,1,0,0,0,3471,3472,5,133,0,0,3472,
3473,6,120,-1,0,3473,3474,7,11,0,0,3474,3484,6,120,-1,0,3475,3476,5,59,0,
0,3476,3477,6,120,-1,0,3477,3478,7,11,0,0,3478,3484,6,120,-1,0,3479,3480,
5,75,0,0,3480,3481,6,120,-1,0,3481,3482,5,125,0,0,3482,3484,6,120,-1,0,3483,
3471,1,0,0,0,3483,3475,1,0,0,0,3483,3479,1,0,0,0,3484,241,1,0,0,0,3485,3486,
5,133,0,0,3486,3487,6,121,-1,0,3487,3488,5,120,0,0,3488,3498,6,121,-1,0,
3489,3490,5,59,0,0,3490,3491,6,121,-1,0,3491,3492,5,120,0,0,3492,3498,6,
121,-1,0,3493,3494,5,75,0,0,3494,3495,6,121,-1,0,3495,3496,5,125,0,0,3496,
3498,6,121,-1,0,3497,3485,1,0,0,0,3497,3489,1,0,0,0,3497,3493,1,0,0,0,3498,
243,1,0,0,0,3499,3500,6,122,-1,0,3500,3502,5,11,0,0,3501,3503,3,246,123,
0,3502,3501,1,0,0,0,3502,3503,1,0,0,0,3503,3504,1,0,0,0,3504,3520,3,248,
124,0,3505,3506,5,96,0,0,3506,3507,5,41,0,0,3507,3508,3,208,104,0,3508,3515,
6,122,-1,0,3509,3510,5,3,0,0,3510,3511,3,208,104,0,3511,3512,6,122,-1,0,
3512,3514,1,0,0,0,3513,3509,1,0,0,0,3514,3517,1,0,0,0,3515,3513,1,0,0,0,
3515,3516,1,0,0,0,3516,3518,1,0,0,0,3517,3515,1,0,0,0,3518,3519,6,122,-1,
0,3519,3521,1,0,0,0,3520,3505,1,0,0,0,3520,3521,1,0,0,0,3521,3527,1,0,0,
0,3522,3523,5,97,0,0,3523,3524,3,198,99,0,3524,3525,6,122,-1,0,3525,3526,
6,122,-1,0,3526,3528,1,0,0,0,3527,3522,1,0,0,0,3527,3528,1,0,0,0,3528,3534,
1,0,0,0,3529,3530,6,122,-1,0,3530,3531,3,186,93,0,3531,3532,6,122,-1,0,3532,
3533,6,122,-1,0,3533,3535,1,0,0,0,3534,3529,1,0,0,0,3534,3535,1,0,0,0,3535,
3541,1,0,0,0,3536,3537,6,122,-1,0,3537,3538,3,188,94,0,3538,3539,6,122,-1,
0,3539,3540,6,122,-1,0,3540,3542,1,0,0,0,3541,3536,1,0,0,0,3541,3542,1,0,
0,0,3542,3543,1,0,0,0,3543,3544,5,14,0,0,3544,245,1,0,0,0,3545,3546,6,123,
-1,0,3546,3547,5,59,0,0,3547,3548,6,123,-1,0,3548,3549,5,5,0,0,3549,247,
1,0,0,0,3550,3551,6,124,-1,0,3551,3552,3,250,125,0,3552,3553,3,198,99,0,
3553,3554,6,124,-1,0,3554,249,1,0,0,0,3555,3556,6,125,-1,0,3556,3557,5,57,
0,0,3557,251,1,0,0,0,3558,3559,5,26,0,0,3559,3569,6,126,-1,0,3560,3570,3,
258,129,0,3561,3562,6,126,-1,0,3562,3565,3,262,131,0,3563,3564,5,27,0,0,
3564,3566,3,264,132,0,3565,3563,1,0,0,0,3565,3566,1,0,0,0,3566,3567,1,0,
0,0,3567,3568,6,126,-1,0,3568,3570,1,0,0,0,3569,3560,1,0,0,0,3569,3561,1,
0,0,0,3570,253,1,0,0,0,3571,3572,5,26,0,0,3572,3585,6,127,-1,0,3573,3586,
3,258,129,0,3574,3575,6,127,-1,0,3575,3578,3,262,131,0,3576,3577,5,27,0,
0,3577,3579,3,264,132,0,3578,3576,1,0,0,0,3578,3579,1,0,0,0,3579,3583,1,
0,0,0,3580,3581,5,5,0,0,3581,3582,6,127,-1,0,3582,3584,3,266,133,0,3583,
3580,1,0,0,0,3583,3584,1,0,0,0,3584,3586,1,0,0,0,3585,3573,1,0,0,0,3585,
3574,1,0,0,0,3586,255,1,0,0,0,3587,3588,5,26,0,0,3588,3615,6,128,-1,0,3589,
3616,3,258,129,0,3590,3591,6,128,-1,0,3591,3592,3,262,131,0,3592,3595,6,
128,-1,0,3593,3594,5,144,0,0,3594,3596,3,264,132,0,3595,3593,1,0,0,0,3595,
3596,1,0,0,0,3596,3597,1,0,0,0,3597,3613,6,128,-1,0,3598,3599,5,145,0,0,
3599,3611,6,128,-1,0,3600,3612,3,268,134,0,3601,3602,5,26,0,0,3602,3605,
3,262,131,0,3603,3605,3,262,131,0,3604,3601,1,0,0,0,3604,3603,1,0,0,0,3605,
3606,1,0,0,0,3606,3609,6,128,-1,0,3607,3608,5,144,0,0,3608,3610,3,264,132,
0,3609,3607,1,0,0,0,3609,3610,1,0,0,0,3610,3612,1,0,0,0,3611,3600,1,0,0,
0,3611,3604,1,0,0,0,3612,3614,1,0,0,0,3613,3598,1,0,0,0,3613,3614,1,0,0,
0,3614,3616,1,0,0,0,3615,3589,1,0,0,0,3615,3590,1,0,0,0,3616,257,1,0,0,0,
3617,3618,5,6,0,0,3618,3619,6,129,-1,0,3619,3625,3,260,130,0,3620,3621,5,
3,0,0,3621,3622,6,129,-1,0,3622,3624,3,260,130,0,3623,3620,1,0,0,0,3624,
3627,1,0,0,0,3625,3623,1,0,0,0,3625,3626,1,0,0,0,3626,3628,1,0,0,0,3627,
3625,1,0,0,0,3628,3629,5,7,0,0,3629,259,1,0,0,0,3630,3633,3,262,131,0,3631,
3632,5,27,0,0,3632,3634,3,264,132,0,3633,3631,1,0,0,0,3633,3634,1,0,0,0,
3634,3638,1,0,0,0,3635,3636,5,5,0,0,3636,3637,6,130,-1,0,3637,3639,3,266,
133,0,3638,3635,1,0,0,0,3638,3639,1,0,0,0,3639,261,1,0,0,0,3640,3641,3,280,
140,0,3641,3651,6,131,-1,0,3642,3644,5,15,0,0,3643,3645,5,26,0,0,3644,3643,
1,0,0,0,3644,3645,1,0,0,0,3645,3646,1,0,0,0,3646,3647,3,280,140,0,3647,3648,
6,131,-1,0,3648,3650,1,0,0,0,3649,3642,1,0,0,0,3650,3653,1,0,0,0,3651,3649,
1,0,0,0,3651,3652,1,0,0,0,3652,263,1,0,0,0,3653,3651,1,0,0,0,3654,3655,6,
132,-1,0,3655,3656,3,218,109,0,3656,3657,6,132,-1,0,3657,265,1,0,0,0,3658,
3668,3,268,134,0,3659,3661,5,26,0,0,3660,3659,1,0,0,0,3660,3661,1,0,0,0,
3661,3662,1,0,0,0,3662,3665,3,262,131,0,3663,3664,5,27,0,0,3664,3666,3,264,
132,0,3665,3663,1,0,0,0,3665,3666,1,0,0,0,3666,3668,1,0,0,0,3667,3658,1,
0,0,0,3667,3660,1,0,0,0,3668,267,1,0,0,0,3669,3670,5,2,0,0,3670,3671,6,134,
-1,0,3671,3677,3,270,135,0,3672,3673,5,3,0,0,3673,3674,6,134,-1,0,3674,3676,
3,270,135,0,3675,3672,1,0,0,0,3676,3679,1,0,0,0,3677,3675,1,0,0,0,3677,3678,
1,0,0,0,3678,3680,1,0,0,0,3679,3677,1,0,0,0,3680,3681,5,4,0,0,3681,3737,
1,0,0,0,3682,3683,5,11,0,0,3683,3684,6,134,-1,0,3684,3718,6,134,-1,0,3685,
3686,3,274,137,0,3686,3687,6,134,-1,0,3687,3696,1,0,0,0,3688,3692,5,28,0,
0,3689,3690,5,134,0,0,3690,3691,5,130,0,0,3691,3693,3,274,137,0,3692,3689,
1,0,0,0,3692,3693,1,0,0,0,3693,3694,1,0,0,0,3694,3696,6,134,-1,0,3695,3685,
1,0,0,0,3695,3688,1,0,0,0,3696,3715,1,0,0,0,3697,3698,5,3,0,0,3698,3699,
6,134,-1,0,3699,3711,6,134,-1,0,3700,3701,3,274,137,0,3701,3702,6,134,-1,
0,3702,3712,1,0,0,0,3703,3704,6,134,-1,0,3704,3708,5,28,0,0,3705,3706,5,
134,0,0,3706,3707,5,130,0,0,3707,3709,3,274,137,0,3708,3705,1,0,0,0,3708,
3709,1,0,0,0,3709,3710,1,0,0,0,3710,3712,6,134,-1,0,3711,3700,1,0,0,0,3711,
3703,1,0,0,0,3712,3714,1,0,0,0,3713,3697,1,0,0,0,3714,3717,1,0,0,0,3715,
3713,1,0,0,0,3715,3716,1,0,0,0,3716,3719,1,0,0,0,3717,3715,1,0,0,0,3718,
3695,1,0,0,0,3718,3719,1,0,0,0,3719,3720,1,0,0,0,3720,3721,5,14,0,0,3721,
3737,6,134,-1,0,3722,3723,3,276,138,0,3723,3724,6,134,-1,0,3724,3737,1,0,
0,0,3725,3728,5,9,0,0,3726,3728,5,10,0,0,3727,3725,1,0,0,0,3727,3726,1,0,
0,0,3728,3729,1,0,0,0,3729,3730,5,59,0,0,3730,3737,6,134,-1,0,3731,3732,
5,6,0,0,3732,3733,3,198,99,0,3733,3734,6,134,-1,0,3734,3735,5,7,0,0,3735,
3737,1,0,0,0,3736,3669,1,0,0,0,3736,3682,1,0,0,0,3736,3722,1,0,0,0,3736,
3727,1,0,0,0,3736,3731,1,0,0,0,3737,269,1,0,0,0,3738,3740,5,26,0,0,3739,
3738,1,0,0,0,3739,3740,1,0,0,0,3740,3741,1,0,0,0,3741,3744,3,262,131,0,3742,
3743,5,27,0,0,3743,3745,3,264,132,0,3744,3742,1,0,0,0,3744,3745,1,0,0,0,
3745,3749,1,0,0,0,3746,3747,5,5,0,0,3747,3748,6,135,-1,0,3748,3750,3,266,
133,0,3749,3746,1,0,0,0,3749,3750,1,0,0,0,3750,3751,1,0,0,0,3751,3752,6,
135,-1,0,3752,271,1,0,0,0,3753,3755,5,26,0,0,3754,3753,1,0,0,0,3754,3755,
1,0,0,0,3755,3756,1,0,0,0,3756,3762,3,262,131,0,3757,3758,5,5,0,0,3758,3759,
6,136,-1,0,3759,3760,3,274,137,0,3760,3761,6,136,-1,0,3761,3763,1,0,0,0,
3762,3757,1,0,0,0,3762,3763,1,0,0,0,3763,3764,1,0,0,0,3764,3765,6,136,-1,
0,3765,273,1,0,0,0,3766,3767,5,2,0,0,3767,3768,6,137,-1,0,3768,3769,6,137,
-1,0,3769,3775,3,272,136,0,3770,3771,5,3,0,0,3771,3772,6,137,-1,0,3772,3774,
3,272,136,0,3773,3770,1,0,0,0,3774,3777,1,0,0,0,3775,3773,1,0,0,0,3775,3776,
1,0,0,0,3776,3778,1,0,0,0,3777,3775,1,0,0,0,3778,3779,5,4,0,0,3779,3822,
1,0,0,0,3780,3781,5,11,0,0,3781,3782,6,137,-1,0,3782,3796,6,137,-1,0,3783,
3784,3,274,137,0,3784,3793,6,137,-1,0,3785,3786,5,3,0,0,3786,3787,6,137,
-1,0,3787,3788,6,137,-1,0,3788,3789,3,274,137,0,3789,3790,6,137,-1,0,3790,
3792,1,0,0,0,3791,3785,1,0,0,0,3792,3795,1,0,0,0,3793,3791,1,0,0,0,3793,
3794,1,0,0,0,3794,3797,1,0,0,0,3795,3793,1,0,0,0,3796,3783,1,0,0,0,3796,
3797,1,0,0,0,3797,3798,1,0,0,0,3798,3822,5,14,0,0,3799,3800,3,276,138,0,
3800,3801,6,137,-1,0,3801,3822,1,0,0,0,3802,3805,5,9,0,0,3803,3805,5,10,
0,0,3804,3802,1,0,0,0,3804,3803,1,0,0,0,3805,3806,1,0,0,0,3806,3807,5,59,
0,0,3807,3822,6,137,-1,0,3808,3810,5,26,0,0,3809,3808,1,0,0,0,3809,3810,
1,0,0,0,3810,3811,1,0,0,0,3811,3814,3,262,131,0,3812,3813,5,27,0,0,3813,
3815,3,264,132,0,3814,3812,1,0,0,0,3814,3815,1,0,0,0,3815,3822,1,0,0,0,3816,
3817,5,6,0,0,3817,3818,3,198,99,0,3818,3819,6,137,-1,0,3819,3820,5,7,0,0,
3820,3822,1,0,0,0,3821,3766,1,0,0,0,3821,3780,1,0,0,0,3821,3799,1,0,0,0,
3821,3804,1,0,0,0,3821,3809,1,0,0,0,3821,3816,1,0,0,0,3822,275,1,0,0,0,3823,
3824,5,27,0,0,3824,3825,6,138,-1,0,3825,3826,3,280,140,0,3826,3827,6,138,
-1,0,3827,3839,1,0,0,0,3828,3829,5,51,0,0,3829,3839,6,138,-1,0,3830,3831,
5,37,0,0,3831,3839,6,138,-1,0,3832,3833,5,59,0,0,3833,3839,6,138,-1,0,3834,
3835,5,33,0,0,3835,3839,6,138,-1,0,3836,3837,5,34,0,0,3837,3839,6,138,-1,
0,3838,3823,1,0,0,0,3838,3828,1,0,0,0,3838,3830,1,0,0,0,3838,3832,1,0,0,
0,3838,3834,1,0,0,0,3838,3836,1,0,0,0,3839,277,1,0,0,0,3840,3841,5,138,0,
0,3841,279,1,0,0,0,3842,3843,7,12,0,0,3843,281,1,0,0,0,503,285,291,293,299,
301,304,322,333,341,343,355,361,365,376,386,391,398,403,408,412,420,432,
438,447,453,461,476,486,490,499,501,509,521,526,533,541,545,554,557,564,
575,580,584,595,600,604,615,620,624,626,631,634,641,651,655,658,661,665,
672,683,688,696,707,712,720,726,730,736,745,750,758,764,774,782,787,793,
805,815,823,833,837,843,846,854,862,866,871,876,883,891,898,905,911,915,
942,949,953,957,960,966,975,981,983,985,997,1005,1008,1018,1027,1033,1040,
1043,1053,1062,1068,1075,1078,1082,1088,1092,1096,1100,1102,1123,1131,1144,
1157,1168,1177,1191,1194,1204,1209,1213,1215,1223,1229,1235,1243,1249,1255,
1266,1274,1278,1284,1288,1292,1299,1310,1315,1323,1328,1336,1342,1353,1356,
1366,1371,1379,1384,1388,1400,1408,1421,1424,1428,1430,1438,1446,1459,1472,
1478,1481,1487,1495,1502,1510,1516,1521,1533,1539,1546,1551,1557,1562,1577,
1585,1594,1598,1600,1608,1620,1631,1639,1647,1655,1661,1669,1680,1687,1691,
1699,1707,1715,1721,1729,1738,1746,1753,1758,1766,1772,1774,1778,1786,1792,
1794,1796,1803,1812,1818,1821,1832,1839,1846,1850,1853,1859,1868,1874,1876,
1880,1884,1890,1899,1905,1916,1923,1932,1937,1940,1950,1958,1960,1962,1964,
1971,1982,1993,1997,2001,2009,2015,2017,2021,2029,2035,2037,2039,2043,2049,
2053,2065,2068,2073,2080,2090,2093,2098,2105,2111,2130,2142,2144,2146,2161,
2163,2165,2173,2178,2184,2191,2203,2212,2226,2230,2239,2242,2254,2268,2273,
2284,2290,2294,2297,2303,2315,2318,2324,2329,2334,2341,2346,2350,2354,2358,
2360,2367,2372,2377,2384,2389,2399,2411,2417,2421,2424,2427,2431,2440,2446,
2452,2464,2467,2473,2484,2486,2493,2508,2510,2518,2526,2535,2545,2552,2559,
2561,2574,2583,2589,2596,2604,2611,2615,2631,2646,2662,2665,2675,2681,2685,
2688,2701,2707,2715,2719,2721,2725,2731,2737,2750,2753,2760,2770,2778,2787,
2793,2795,2805,2808,2821,2824,2835,2839,2852,2863,2871,2876,2882,2888,2891,
2897,2900,2906,2909,2913,2918,2924,2928,2934,2942,2948,2955,2966,2977,2984,
2987,2989,3009,3013,3016,3020,3026,3035,3041,3066,3068,3070,3078,3083,3095,
3103,3107,3117,3140,3153,3155,3162,3184,3194,3198,3203,3209,3219,3228,3231,
3234,3244,3247,3249,3272,3279,3282,3289,3292,3296,3314,3329,3339,3345,3348,
3369,3375,3386,3390,3392,3401,3410,3417,3428,3444,3453,3459,3469,3483,3497,
3502,3515,3520,3527,3534,3541,3565,3569,3578,3583,3585,3595,3604,3609,3611,
3613,3615,3625,3633,3638,3644,3651,3660,3665,3667,3677,3692,3695,3708,3711,
3715,3718,3727,3736,3739,3744,3749,3754,3762,3775,3793,3796,3804,3809,3814,
3821,3838];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class languageParser extends genericAntlrParser {

    static grammarFileName = "language.g4";
    static literalNames = [ null, "';'", "'{'", "','", "'}'", "':'", "'('", 
                            "')'", "'='", "'+'", "'-'", "'['", "'*'", "'..'", 
                            "']'", "'.'", "'?'", "'<>'", "'>'", "'>='", 
                            "'<'", "'<='", "'!='", "'||'", "'/'", "'=>'", 
                            "'@'", "'#'", "'...'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, "WhiteSpace", 
                             "DocComment", "Comment", "LineComment", "String", 
                             "QuotedLiteral", "UnterminatedLiteral", "UnterminatedDelimitedIdentifier", 
                             "Boolean", "ALL", "ANY", "AS", "BY", "CASE", 
                             "CAST", "DISTINCT", "EXISTS", "FROM", "IN", 
                             "KEY", "NEW", "NOT", "NULL", "OF", "ON", "SELECT", 
                             "SOME", "WHEN", "WHERE", "WITH", "Number", 
                             "ABSTRACT", "ACTION", "ACTIONS", "AND", "ANNOTATE", 
                             "ANNOTATION", "ARRAY", "ASC", "ASPECT", "ASSOCIATION", 
                             "BETWEEN", "COLUMNS", "COMPOSITION", "CONTEXT", 
                             "CROSS", "CURRENT", "DEFAULT", "DEFINE", "DEFINITIONS", 
                             "DESC", "ELEMENTS", "ELSE", "END", "ENTITY", 
                             "ENUM", "EVENT", "ESCAPE", "EXACT", "EXCEPT", 
                             "EXCLUDING", "EXTEND", "FIRST", "FLOATING", 
                             "FOLLOWING", "FULL", "FUNCTION", "GROUP", "HAVING", 
                             "INNER", "INTERSECT", "INTO", "IS", "JOIN", 
                             "LAST", "LEFT", "LIKE", "LIMIT", "LOCALIZED", 
                             "MANY", "MINUS", "MIXIN", "NAMESPACE", "NULLS", 
                             "OFFSET", "ONE", "OR", "ORDER", "OUTER", "PARAMETERS", 
                             "PARTITION", "PRECEDING", "PROJECTION", "REDIRECTED", 
                             "RETURNS", "RIGHT", "ROW", "ROWS", "SERVICE", 
                             "STORED", "THEN", "TO", "TYPE", "UNION", "UNBOUNDED", 
                             "UP", "USING", "VARIABLE", "VIEW", "Identifier", 
                             "IllegalToken", "ELEMENT", "MASKED", "VIRTUAL", 
                             "OVER", "HelperToken1", "HelperToken2", "HideAlternatives", 
                             "GenericExpr", "GenericSeparator", "GenericIntro", 
                             "DOTbeforeBRACE", "COMPOSITIONofBRACE", "SemicolonTopLevel" ];
    static ruleNames = [ "start", "namespaceDeclaration", "usingDeclaration", 
                         "usingProxy", "artifactDefOrExtend", "optArtifactsBlock", 
                         "requiredSemi", "optionalSemi", "annotationDef", 
                         "serviceDef", "contextDef", "eventDef", "viewDef", 
                         "entityDef", "aspectDef", "elementsAndOptActions", 
                         "typeDef", "actionFunctionMainDef", "actionFunctionDef", 
                         "parameterDef", "parameterListDef", "enumSymbolDef", 
                         "elementDef", "elementDefInner", "elementType", 
                         "elementProperties", "defaultAndNullability", "defaultValue", 
                         "extendArtifact", "extendService", "extendContext", 
                         "extendEntityOrAspect", "extendForEntity", "extendProjection", 
                         "extendType", "extendWithOptElementsOrType", "extendWithOptElementsNoWith", 
                         "elementDefOrExtend", "extendElement", "annotateArtifact", 
                         "annotateArtifactActions", "annotateArtifactElements", 
                         "annotateElement", "annotateAction", "annotateReturns", 
                         "annotateParam", "includeRef", "typeSpec", "returnTypeSpec", 
                         "typeSpecCont", "typeSpecSemi", "typeStruct", "typeCompoStruct", 
                         "typeArray", "typeAssociationBase", "typeAssociationCont", 
                         "typeAssociationElementCont", "typeToOne", "typeToMany", 
                         "cardinality", "targetCardinality", "optInvisibleNullability", 
                         "nullability", "foreignKey", "typeTypeOf", "typeRefOptArgs", 
                         "typeRefArgs", "typeNamedArgList", "typeNamedArg", 
                         "queryEOF", "projectionSpec", "projectionClauses", 
                         "queryExpression", "queryExpressionCont", "queryPrimary", 
                         "selectQuery", "querySource", "tableExpression", 
                         "tableExpressionCont", "tableTerm", "fromRefWithOptAlias", 
                         "tableOrQueryParenthesis", "tableOrQueryExpressionCont", 
                         "fromPath", "fromArguments", "excludingClause", 
                         "projectionExclusion", "mixinElementDef", "selectItemDef", 
                         "selectItemDefBody", "bracedSelectItemListDef", 
                         "selectItemInlineList", "selectItemInlineDef", 
                         "orderByClause", "limitClause", "orderBySpec", 
                         "joinOp", "joinCardinality", "conditionEOF", "condition", 
                         "conditionCont", "conditionTerm", "conditionPrimary", 
                         "comparisonCont", "expression", "expressionCont", 
                         "expressionPrimary", "conditionOrQueryParenthesis", 
                         "specialFunction", "simplePath", "valuePath", "pathArguments", 
                         "namedExpression", "funcExpression", "overClause", 
                         "partitionByClause", "funcOrderByClause", "exprOrderByClause", 
                         "orderBySpecInExpr", "windowFrameClause", "windowFrameBoundSpec", 
                         "windowFrameStartSpec", "cardinalityAndFilter", 
                         "optionalCardinality", "filterWhereClause", "optionalWhereForFilter", 
                         "annotationAssignment_fix", "annotationAssignment_ll1", 
                         "annotationAssignment_atn", "annotationAssignment_paren", 
                         "annotationAssignment_1", "annotationPath", "annotationPathVariant", 
                         "annoValue", "annoValueBase", "flattenedValue", 
                         "namedValue", "annoSubValue", "literalValue", "identNoKeyword", 
                         "ident" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = languageParser.ruleNames;
        this.literalNames = languageParser.literalNames;
        this.symbolicNames = languageParser.symbolicNames;
    }



	start() {
	    let localctx = new StartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, languageParser.RULE_start);
	     localctx.source =  this.createSource() 
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===135) {
	            this.state = 282;
	            this.usingDeclaration(localctx.source);
	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 304;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 111:
	        	this.state = 288;
	        	this.namespaceDeclaration(localctx.source);
	        	this.state = 293;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 1115824435) !== 0) || _la===95 || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 525585) !== 0)) {
	        	    this.state = 291;
	        	    this._errHandler.sync(this);
	        	    switch(this._input.LA(1)) {
	        	    case 135:
	        	        this.state = 289;
	        	        this.usingDeclaration(localctx.source);
	        	        break;
	        	    case 26:
	        	    case 60:
	        	    case 61:
	        	    case 64:
	        	    case 65:
	        	    case 68:
	        	    case 73:
	        	    case 77:
	        	    case 83:
	        	    case 85:
	        	    case 90:
	        	    case 95:
	        	    case 127:
	        	    case 131:
	        	    case 137:
	        	    case 146:
	        	        this.state = 290;
	        	        this.artifactDefOrExtend(localctx.source);
	        	        break;
	        	    default:
	        	        throw new antlr4.error.NoViableAltException(this);
	        	    }
	        	    this.state = 295;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	break;
	        case 26:
	        case 60:
	        case 61:
	        case 64:
	        case 65:
	        case 68:
	        case 73:
	        case 77:
	        case 83:
	        case 85:
	        case 90:
	        case 95:
	        case 127:
	        case 131:
	        case 137:
	        case 146:
	        	this.state = 296;
	        	this.artifactDefOrExtend(localctx.source);
	        	this.state = 301;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 1115824435) !== 0) || _la===95 || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 525585) !== 0)) {
	        	    this.state = 299;
	        	    this._errHandler.sync(this);
	        	    switch(this._input.LA(1)) {
	        	    case 135:
	        	        this.state = 297;
	        	        this.usingDeclaration(localctx.source);
	        	        break;
	        	    case 26:
	        	    case 60:
	        	    case 61:
	        	    case 64:
	        	    case 65:
	        	    case 68:
	        	    case 73:
	        	    case 77:
	        	    case 83:
	        	    case 85:
	        	    case 90:
	        	    case 95:
	        	    case 127:
	        	    case 131:
	        	    case 137:
	        	    case 146:
	        	        this.state = 298;
	        	        this.artifactDefOrExtend(localctx.source);
	        	        break;
	        	    default:
	        	        throw new antlr4.error.NoViableAltException(this);
	        	    }
	        	    this.state = 303;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	break;
	        case -1:
	        	break;
	        default:
	        	break;
	        }
	         this.markAsSkippedUntilEOF(); 
	        this.state = 307;
	        this.match(languageParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDeclaration(source) {
	    let localctx = new NamespaceDeclarationContext(this, this._ctx, this.state, source);
	    this.enterRule(localctx, 2, languageParser.RULE_namespaceDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        this.match(languageParser.NAMESPACE);
	        this.state = 310;
	        this.simplePath( localctx.decl, 'Namespace' );
	        this.state = 311;
	        this.match(languageParser.T__0);
	        this._ctx.stop = this._input.LT(-1);

	          localctx.source.namespace = { kind: 'namespace', name: localctx.decl };
	          this.attachLocation( localctx.source.namespace );

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingDeclaration(source) {
	    let localctx = new UsingDeclarationContext(this, this._ctx, this.state, source);
	    this.enterRule(localctx, 4, languageParser.RULE_usingDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.decl.location = this.startLocation(); 
	        this.state = 314;
	        this.match(languageParser.USING);
	        this.state = 343;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	            this.state = 315;
	            this.match(languageParser.FROM);
	            this.state = 316;
	            localctx.str = this.match(languageParser.String);
	             localctx.source.dependencies.push( this.quotedLiteral( localctx.str, 'string' ) ); 
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.state = 318;
	            this.usingProxy( localctx.source, localctx.decl );
	            this.state = 322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46) {
	                this.state = 319;
	                this.match(languageParser.FROM);
	                this.state = 320;
	                localctx.str = this.match(languageParser.String);
	                 localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) ); 
	            }

	            break;
	        case 2:
	             this.addItem( localctx.decl, localctx.source, 'usings', 'using' ); 
	            this.state = 325;
	            this.match(languageParser.T__1);
	             localctx.decl.usings = this.createArray(); 
	            this.state = 327;
	            this.usingProxy( localctx.decl, {} );
	            this.state = 333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 328;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 330;
	                this.usingProxy( localctx.decl, {} );
	                this.state = 335;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 336;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.decl.usings ); 
	            this.state = 341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46) {
	                this.state = 338;
	                this.match(languageParser.FROM);
	                this.state = 339;
	                localctx.str = this.match(languageParser.String);
	                 localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) ); 
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 345;
	        this.match(languageParser.T__0);
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.decl); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingProxy(outer, proxy) {
	    let localctx = new UsingProxyContext(this, this._ctx, this.state, outer, proxy);
	    this.enterRule(localctx, 6, languageParser.RULE_usingProxy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         if (!localctx.proxy.location) localctx.proxy.location = this.startLocation();
	              localctx.proxy.extern = {}; 
	        this.state = 348;
	        this.simplePath( localctx.proxy.extern, 'global' );
	         this.addItem( localctx.proxy, localctx.outer, 'usings', 'using' ); 
	        this.state = 355;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.state = 350;
	            this.match(languageParser.AS);
	            this.state = 351;
	            localctx.name = this.ident('UsingAlias');
	             localctx.proxy.name = localctx.name.id; 
	            break;
	        case 1:
	        case 3:
	        case 4:
	        case 46:
	             this.classifyImplicitName( 'Using' ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.proxy); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	artifactDefOrExtend(outer, defOnly) {
	    let localctx = new ArtifactDefOrExtendContext(this, this._ctx, this.state, outer, defOnly);
	    this.enterRule(localctx, 8, languageParser.RULE_artifactDefOrExtend);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation(); this.docComment( localctx.art ); 
	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 358;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 391;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 61:
	        case 65:
	        case 68:
	        case 73:
	        case 77:
	        case 83:
	        case 85:
	        case 95:
	        case 127:
	        case 131:
	        case 137:
	        case 146:
	            this.state = 365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 364;
	                this.match(languageParser.DEFINE);
	            }

	            this.state = 376;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 127:
	                this.state = 367;
	                this.serviceDef( localctx.art, localctx.outer, localctx.defOnly );
	                break;
	            case 73:
	                this.state = 368;
	                this.contextDef( localctx.art, localctx.outer, localctx.defOnly );
	                break;
	            case 83:
	                this.state = 369;
	                this.entityDef( localctx.art, localctx.outer );
	                break;
	            case 131:
	                this.state = 370;
	                this.typeDef( localctx.art, localctx.outer );
	                break;
	            case 60:
	            case 68:
	            case 146:
	                this.state = 371;
	                this.aspectDef( localctx.art, localctx.outer );
	                break;
	            case 65:
	                this.state = 372;
	                this.annotationDef( localctx.art, localctx.outer );
	                break;
	            case 137:
	                this.state = 373;
	                this.viewDef( localctx.art, localctx.outer );
	                break;
	            case 85:
	                this.state = 374;
	                this.eventDef( localctx.art, localctx.outer );
	                break;
	            case 61:
	            case 95:
	                this.state = 375;
	                this.actionFunctionMainDef( localctx.art, localctx.outer );
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 90:
	            this.state = 378;
	            localctx.extend = this.match(languageParser.EXTEND);
	             this.reportUnexpectedExtension( localctx.defOnly, localctx.extend );
	                    if (!localctx.outer.extensions) localctx.outer.extensions = [];
	                  
	            this.state = 386;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 380;
	                this.extendService( localctx.art, localctx.outer );
	                break;

	            case 2:
	                this.state = 381;
	                this.extendContext( localctx.art, localctx.outer );
	                break;

	            case 3:
	                this.state = 382;
	                this.extendEntityOrAspect( localctx.art, localctx.outer );
	                break;

	            case 4:
	                this.state = 383;
	                this.extendProjection( localctx.art, localctx.outer );
	                break;

	            case 5:
	                this.state = 384;
	                this.extendType( localctx.art, localctx.outer );
	                break;

	            case 6:
	                this.state = 385;
	                this.extendArtifact( localctx.art, localctx.outer );
	                break;

	            }
	            break;
	        case 64:
	            this.state = 388;
	            localctx.annotate = this.match(languageParser.ANNOTATE);
	             this.reportUnexpectedExtension( localctx.defOnly, localctx.annotate );
	                    if (!localctx.outer.extensions) localctx.outer.extensions = [];
	                    this.meltKeywordToIdentifier();
	                  
	            this.state = 390;
	            this.annotateArtifact( localctx.art, localctx.outer );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optArtifactsBlock(art, defOnly) {
	    let localctx = new OptArtifactsBlockContext(this, this._ctx, this.state, art, defOnly);
	    this.enterRule(localctx, 10, languageParser.RULE_optArtifactsBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 393;
	            this.match(languageParser.T__1);
	             localctx.art.artifacts = this.createDict(); localctx.art.extensions = []; 
	            this.state = 398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 1115824435) !== 0) || _la===95 || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 525329) !== 0)) {
	                this.state = 395;
	                this.artifactDefOrExtend( localctx.art, defOnly );
	                this.state = 400;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 401;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.artifacts ); this.insertSemicolon(); 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiredSemi() {
	    let localctx = new RequiredSemiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, languageParser.RULE_requiredSemi);
	    try {
	        this.state = 408;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 405;
	            this.match(languageParser.T__0);
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	             return localctx; 
	            this.state = 407;
	            this.match(languageParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalSemi() {
	    let localctx = new OptionalSemiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, languageParser.RULE_optionalSemi);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.noAssignmentInSameLine(); 
	        this.state = 412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 411;
	            this.match(languageParser.T__0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationDef(art, outer) {
	    let localctx = new AnnotationDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 16, languageParser.RULE_annotationDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        localctx.annotation = this.match(languageParser.ANNOTATION);
	        this.state = 415;
	        this.simplePath( localctx.name, 'AnnoDef' );
	         if (localctx.outer.kind !== 'source') { // this is a syntax restriction to avoid confusion
	                this.error( 'syntax-unexpected-vocabulary', localctx.annotation, { '#': localctx.outer.kind } );
	                localctx.art =  new this.XsnArtifact() }
	              else {
	                if (!localctx.outer.vocabularies) localctx.outer.vocabularies = Object.create(null);
	                this.addDef( localctx.art, localctx.outer, 'vocabularies', 'annotation', localctx.name );
	              }
	              this.docComment( localctx.art ); 
	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 417;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 423;
	        this.typeSpecSemi( localctx.art );
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serviceDef(art, outer, defOnly) {
	    let localctx = new ServiceDefContext(this, this._ctx, this.state, art, outer, defOnly);
	    this.enterRule(localctx, 18, languageParser.RULE_serviceDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(languageParser.SERVICE);
	        this.state = 426;
	        this.simplePath( localctx.name, 'Service' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'service', localctx.name ); 
	         this.docComment( localctx.art ); 
	        this.state = 432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 429;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 435;
	        this.optArtifactsBlock( localctx.art, defOnly );
	        this.state = 438;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 436;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 437;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextDef(art, outer, defOnly) {
	    let localctx = new ContextDefContext(this, this._ctx, this.state, art, outer, defOnly);
	    this.enterRule(localctx, 20, languageParser.RULE_contextDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(languageParser.CONTEXT);
	        this.state = 441;
	        this.simplePath( localctx.name, 'Context' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'context', localctx.name ); 
	         this.docComment( localctx.art ); 
	        this.state = 447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 444;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 450;
	        this.optArtifactsBlock( localctx.art, defOnly );
	        this.state = 453;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 451;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 452;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventDef(art, outer) {
	    let localctx = new EventDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 22, languageParser.RULE_eventDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this.match(languageParser.EVENT);
	        this.state = 456;
	        this.simplePath( localctx.name, 'Event' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'event', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 458;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 464;
	            this.typeStruct( localctx.art );
	            this.state = 465;
	            this.optionalSemi();
	            break;
	        case 5:
	            this.state = 467;
	            this.match(languageParser.T__4);
	            this.state = 499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            switch(la_) {
	            case 1:
	                 localctx.art.type = {}; 
	                this.state = 469;
	                this.simplePath( localctx.art.type, 'artref' );
	                this.state = 490;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 2:
	                case 3:
	                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
	                    this.state = 476;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===3) {
	                        this.state = 471;
	                        this.match(languageParser.T__2);
	                         if (this.isStraightBefore('{')) break; 
	                        this.state = 473;
	                        this.includeRef( localctx.art );
	                        this.state = 478;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 479;
	                    this.typeStruct( localctx.art );
	                    this.state = 480;
	                    this.optionalSemi();
	                    break;
	                case 1:
	                case 4:
	                case 26:
	                     this.docComment( localctx.art ); 
	                    this.state = 486;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===26) {
	                        this.state = 483;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 488;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 489;
	                    this.requiredSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 492;
	                this.typeStruct( localctx.art );
	                this.state = 493;
	                this.optionalSemi();
	                break;

	            case 3:
	                this.state = 495;
	                localctx.qp = this.projectionSpec();
	                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
	                this.state = 497;
	                this.requiredSemi();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewDef(art, outer) {
	    let localctx = new ViewDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 24, languageParser.RULE_viewDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        localctx.v = this.match(languageParser.VIEW);
	        this.state = 504;
	        this.simplePath( localctx.name, 'Entity' );
	         localctx.art['$'+'syntax'] = 'view';
	              this.addDef( localctx.art, localctx.outer, 'artifacts', 'entity', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 506;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 526;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 6:
	        	this.state = 512;
	        	this.parameterListDef( localctx.art );
	        	break;
	        case 58:
	        case 146:
	        	this.state = 513;
	        	_la = this._input.LA(1);
	        	if(!(_la===58 || _la===146)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	 localctx.art.params = this.createDict(); 
	        	this.state = 515;
	        	this.match(languageParser.PARAMETERS);
	        	this.state = 516;
	        	this.parameterDef( localctx.art );
	        	this.state = 521;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===3) {
	        	    this.state = 517;
	        	    this.match(languageParser.T__2);
	        	    this.state = 518;
	        	    this.parameterDef( localctx.art );
	        	    this.state = 523;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	 this.finalizeDictOrArray( localctx.art.params ); 
	        	break;
	        case 40:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 528;
	        this.match(languageParser.AS);
	        this.state = 529;
	        localctx.qe = this.queryExpression();
	         localctx.art.query = localctx.qe.query; 
	        this.state = 533;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 531;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 532;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityDef(art, outer) {
	    let localctx = new EntityDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 26, languageParser.RULE_entityDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.match(languageParser.ENTITY);
	        this.state = 536;
	        this.simplePath( localctx.name, 'Entity' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'entity', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 538;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 544;
	            this.parameterListDef( localctx.art );
	        }

	        this.state = 626;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 5:
	            this.state = 557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 547;
	                this.match(languageParser.T__4);
	                this.state = 548;
	                this.includeRef( localctx.art );
	                this.state = 554;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 549;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore('{')) break; 
	                    this.state = 551;
	                    this.includeRef( localctx.art );
	                    this.state = 556;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 559;
	            this.match(languageParser.T__1);
	             localctx.art.elements = this.createDict(); 
	            this.state = 564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	                this.state = 561;
	                this.elementDef( localctx.art );
	                this.state = 566;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 567;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.elements ); this.insertSemicolon(); 
	            this.state = 580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===62) {
	                this.state = 569;
	                this.match(languageParser.ACTIONS);
	                this.state = 570;
	                this.match(languageParser.T__1);
	                 localctx.art.actions = this.createDict(); 
	                this.state = 575;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || _la===61 || _la===95) {
	                    this.state = 572;
	                    this.actionFunctionDef( localctx.art );
	                    this.state = 577;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 578;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	            }

	            this.state = 584;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	                this.state = 582;
	                this.requiredSemi();
	                break;
	            case 152:
	                this.state = 583;
	                this.match(languageParser.SemicolonTopLevel);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 40:
	            this.state = 586;
	            this.match(languageParser.AS);
	            this.state = 624;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	            case 54:
	                this.state = 587;
	                localctx.qe = this.queryExpression();
	                 localctx.art.query = localctx.qe.query; localctx.art['$'+'syntax'] = 'entity' 
	                this.state = 600;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===62) {
	                    this.state = 589;
	                    this.match(languageParser.ACTIONS);
	                    this.state = 590;
	                    this.match(languageParser.T__1);
	                     localctx.art.actions = this.createDict(); 
	                    this.state = 595;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===26 || _la===61 || _la===95) {
	                        this.state = 592;
	                        this.actionFunctionDef( localctx.art );
	                        this.state = 597;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 598;
	                    this.match(languageParser.T__3);
	                     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	                }

	                this.state = 604;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 1:
	                case 4:
	                    this.state = 602;
	                    this.requiredSemi();
	                    break;
	                case 152:
	                    this.state = 603;
	                    this.match(languageParser.SemicolonTopLevel);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case 121:
	                this.state = 606;
	                localctx.qp = this.projectionSpec();
	                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
	                this.state = 608;
	                this.projectionClauses( localctx.qp.query );
	                this.state = 620;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===62) {
	                    this.state = 609;
	                    this.match(languageParser.ACTIONS);
	                    this.state = 610;
	                    this.match(languageParser.T__1);
	                     localctx.art.actions = this.createDict(); 
	                    this.state = 615;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===26 || _la===61 || _la===95) {
	                        this.state = 612;
	                        this.actionFunctionDef( localctx.art );
	                        this.state = 617;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 618;
	                    this.match(languageParser.T__3);
	                     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	                }

	                this.state = 622;
	                this.optionalSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aspectDef(art, outer) {
	    let localctx = new AspectDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 28, languageParser.RULE_aspectDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	            this.state = 628;
	            this.match(languageParser.ASPECT);
	            break;
	        case 60:
	        case 146:
	            this.state = 631;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 60:
	                this.state = 629;
	                localctx.abs = this.match(languageParser.ABSTRACT);
	                break;
	            case 146:
	                this.state = 630;
	                this.match(languageParser.HideAlternatives);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 633;
	            localctx.ent = this.match(languageParser.ENTITY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 636;
	        this.simplePath( localctx.name, 'Type' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'aspect', localctx.name );
	              if (localctx.ent)
	                this.warning( 'syntax-deprecated-abstract', this.tokenLocation( localctx.abs, localctx.ent ) );
	              this.docComment( localctx.art ); 
	        this.state = 641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 638;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 661;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 5:
	        	this.state = 644;
	        	this.match(languageParser.T__4);
	        	this.state = 658;
	        	this._errHandler.sync(this);
	        	switch(this._input.LA(1)) {
	        	case 60:
	        	case 61:
	        	case 62:
	        	case 63:
	        	case 64:
	        	case 65:
	        	case 66:
	        	case 67:
	        	case 68:
	        	case 69:
	        	case 70:
	        	case 71:
	        	case 72:
	        	case 73:
	        	case 74:
	        	case 75:
	        	case 76:
	        	case 77:
	        	case 78:
	        	case 79:
	        	case 80:
	        	case 81:
	        	case 82:
	        	case 83:
	        	case 84:
	        	case 85:
	        	case 86:
	        	case 87:
	        	case 88:
	        	case 89:
	        	case 90:
	        	case 91:
	        	case 92:
	        	case 93:
	        	case 94:
	        	case 95:
	        	case 96:
	        	case 97:
	        	case 98:
	        	case 99:
	        	case 100:
	        	case 101:
	        	case 102:
	        	case 103:
	        	case 104:
	        	case 105:
	        	case 106:
	        	case 107:
	        	case 108:
	        	case 109:
	        	case 110:
	        	case 111:
	        	case 112:
	        	case 113:
	        	case 114:
	        	case 115:
	        	case 116:
	        	case 117:
	        	case 118:
	        	case 119:
	        	case 120:
	        	case 121:
	        	case 122:
	        	case 123:
	        	case 124:
	        	case 125:
	        	case 126:
	        	case 127:
	        	case 128:
	        	case 129:
	        	case 130:
	        	case 131:
	        	case 132:
	        	case 133:
	        	case 134:
	        	case 135:
	        	case 136:
	        	case 137:
	        	case 138:
	        	    this.state = 645;
	        	    this.includeRef( localctx.art );
	        	    this.state = 651;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===3) {
	        	        this.state = 646;
	        	        this.match(languageParser.T__2);
	        	         if (this.isStraightBefore('{')) break; 
	        	        this.state = 648;
	        	        this.includeRef( localctx.art );
	        	        this.state = 653;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	    this.state = 655;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    if(_la===2) {
	        	        this.state = 654;
	        	        this.elementsAndOptActions( localctx.art );
	        	    }

	        	    break;
	        	case 2:
	        	    this.state = 657;
	        	    this.elementsAndOptActions( localctx.art );
	        	    break;
	        	default:
	        	    throw new antlr4.error.NoViableAltException(this);
	        	}
	        	break;
	        case 2:
	        	this.state = 660;
	        	this.elementsAndOptActions( localctx.art );
	        	break;
	        case 1:
	        case 4:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 663;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 664;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementsAndOptActions(art) {
	    let localctx = new ElementsAndOptActionsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 30, languageParser.RULE_elementsAndOptActions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        this.match(languageParser.T__1);
	         localctx.art.elements = this.createDict(); 

	        this.state = 672;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	            this.state = 669;
	            this.elementDef( localctx.art );
	            this.state = 674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 675;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); this.insertSemicolon(); 
	        this.state = 688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 677;
	            this.match(languageParser.ACTIONS);
	            this.state = 678;
	            this.match(languageParser.T__1);
	             localctx.art.actions = this.createDict(); 
	            this.state = 683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26 || _la===61 || _la===95) {
	                this.state = 680;
	                this.actionFunctionDef( localctx.art );
	                this.state = 685;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 686;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDef(art, outer) {
	    let localctx = new TypeDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 32, languageParser.RULE_typeDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 690;
	        this.match(languageParser.TYPE);
	        this.state = 691;
	        this.simplePath( localctx.name, 'Type' );
	         this.addDef( localctx.art, localctx.outer, 'artifacts', 'type', localctx.name );
	              this.docComment( localctx.art ); 
	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 693;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 699;
	        this.typeSpecSemi( localctx.art );
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionFunctionMainDef(art, outer) {
	    let localctx = new ActionFunctionMainDefContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 34, languageParser.RULE_actionFunctionMainDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 726;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	            this.state = 701;
	            this.match(languageParser.ACTION);
	            this.state = 702;
	            this.simplePath( localctx.name, 'Action' );
	             this.addDef( localctx.art, localctx.outer, 'artifacts', 'action', localctx.name );
	                  this.docComment( localctx.art ); 
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 704;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 709;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 710;
	            this.parameterListDef( localctx.art );
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===123) {
	                this.state = 711;
	                this.returnTypeSpec( localctx.art );
	            }

	            break;
	        case 95:
	            this.state = 714;
	            this.match(languageParser.FUNCTION);
	            this.state = 715;
	            this.simplePath( localctx.name, 'Action' );
	             this.addDef( localctx.art, localctx.outer, 'artifacts', 'function', localctx.name );
	                  this.docComment( localctx.art ); 
	            this.state = 720;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 717;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 722;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 723;
	            this.parameterListDef( localctx.art );
	            this.state = 724;
	            this.returnTypeSpec( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 730;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 728;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 729;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actionFunctionDef(outer) {
	    let localctx = new ActionFunctionDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 36, languageParser.RULE_actionFunctionDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 733;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 764;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	            this.state = 739;
	            this.match(languageParser.ACTION);
	            this.state = 740;
	            localctx.name = this.ident('BoundAction');
	             this.addDef( localctx.art, localctx.outer, 'actions', 'action', localctx.name.id );
	                    this.docComment( localctx.art ); 
	            this.state = 745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 742;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 747;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 748;
	            this.parameterListDef( localctx.art );
	            this.state = 750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===123) {
	                this.state = 749;
	                this.returnTypeSpec( localctx.art );
	            }

	            break;
	        case 95:
	            this.state = 752;
	            this.match(languageParser.FUNCTION);
	            this.state = 753;
	            localctx.name = this.ident('BoundAction');
	             this.addDef( localctx.art, localctx.outer, 'actions', 'function', localctx.name.id );
	                    this.docComment( localctx.art ); 
	            this.state = 758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 755;
	                this.annotationAssignment_fix( localctx.art );
	                this.state = 760;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 761;
	            this.parameterListDef( localctx.art );
	            this.state = 762;
	            this.returnTypeSpec( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 766;
	        this.requiredSemi();
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDef(outer) {
	    let localctx = new ParameterDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 38, languageParser.RULE_parameterDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.meltKeywordToIdentifier();; this.docComment( localctx.art ); 
	        this.state = 774;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 769;
	            this.annotationAssignment_ll1( localctx.art );
	             this.meltKeywordToIdentifier(); 
	            this.state = 776;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 777;
	        localctx.name = this.ident('Param');
	         this.addDef( localctx.art, localctx.outer, 'params', 'param', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 779;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 785;
	        this.typeSpec( localctx.art );
	        this.state = 787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 786;
	            this.defaultValue( localctx.art );
	        }

	         this.docComment( localctx.art ); 
	        this.state = 793;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 790;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 795;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterListDef(art) {
	    let localctx = new ParameterListDefContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 40, languageParser.RULE_parameterListDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this.match(languageParser.T__5);
	         localctx.art.params = this.createDict(); 

	              if (this.isStraightBefore(')')) {
	                this.matchWildcard();   // we know it is the ')' - we do not reach the final match
	                this.finalizeDictOrArray( localctx.art.params );
	                return localctx;
	              }
	            
	        this.state = 799;
	        this.parameterDef( localctx.art );
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 800;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore(')')) break; 
	            this.state = 802;
	            this.parameterDef( localctx.art );
	            this.state = 807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 808;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.art.params ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumSymbolDef(outer) {
	    let localctx = new EnumSymbolDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 42, languageParser.RULE_enumSymbolDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 812;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 818;
	        localctx.name = this.ident('Enum');
	         this.addDef( localctx.art, localctx.outer, 'enum', 'enum', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 820;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 826;
	            this.match(languageParser.T__7);
	             this.excludeExpected( ['Boolean', 'QuotedLiteral', "'#'", 'NULL'] ); 
	            this.state = 837;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 27:
	            case 33:
	            case 34:
	            case 37:
	            case 51:
	            case 59:
	                this.state = 828;
	                localctx.val = this.literalValue();
	                 localctx.art.value = localctx.val.val; 
	                break;
	            case 9:
	            case 10:
	                this.state = 833;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 9:
	                    this.state = 831;
	                    localctx.plus = this.match(languageParser.T__8);
	                    break;
	                case 10:
	                    this.state = 832;
	                    localctx.min = this.match(languageParser.T__9);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 835;
	                this.match(languageParser.Number);
	                 localctx.art.value = this.numberLiteral( localctx.plus||localctx.min ); 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	             this.docComment( localctx.art ); 
	            this.state = 843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 840;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 845;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 848;
	        this.requiredSemi();
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementDef(outer) {
	    let localctx = new ElementDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 44, languageParser.RULE_elementDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 851;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 856;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 857;
	        this.elementDefInner( localctx.art, localctx.outer );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementDefInner(art, outer, explicitElement) {
	    let localctx = new ElementDefInnerContext(this, this._ctx, this.state, art, outer, explicitElement);
	    this.enterRule(localctx, 46, languageParser.RULE_elementDefInner);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^[;:{@=}]$/ ); 
	        this.state = 862;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===142) {
	            this.state = 860;
	            localctx.virtual = this.match(languageParser.VIRTUAL);
	             localctx.art.virtual = this.valueWithTokenLocation( true, localctx.virtual ); 
	        }

	        this.state = 866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===48) {
	            this.state = 864;
	            localctx.key = this.match(languageParser.KEY);
	             localctx.art.key = this.valueWithTokenLocation( true, localctx.key ); 
	        }

	         this.setLocalToken( 'MASKED', 'MASKED', /^[;:{@=}]$/ ); 
	        this.state = 871;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===141) {
	            this.state = 869;
	            localctx.masked = this.match(languageParser.MASKED);

	                    localctx.art.masked = this.valueWithTokenLocation( true, localctx.masked ) ;
	                    this.message( 'syntax-unsupported-masked', localctx.masked, { keyword: 'masked' } );
	                  
	        }

	         this.setLocalToken( 'ELEMENT', 'ELEMENT', /^[;:{@=}]$/ ); 
	        this.state = 876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 874;
	            this.match(languageParser.ELEMENT);
	             localctx.explicitElement =  true 
	        }

	        this.state = 878;
	        localctx.name = this.ident('Element');
	         this.addDef( localctx.art, localctx.outer, 'elements', 'element', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 880;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 911;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 886;
	            this.typeStruct( localctx.art );
	            this.state = 891;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 50:
	            case 51:
	                this.state = 887;
	                this.nullability( localctx.art );
	                this.state = 888;
	                this.requiredSemi();
	                break;
	            case 1:
	            case 4:
	            case 26:
	            case 48:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 140:
	            case 141:
	            case 142:
	                this.state = 890;
	                this.optionalSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 5:
	            this.state = 893;
	            this.match(languageParser.T__4);
	            this.state = 894;
	            this.elementType( localctx.art );
	            break;
	        case 8:
	            this.state = 895;
	            localctx.eq = this.match(languageParser.T__7);
	            this.state = 896;
	            localctx.e = this.expression();
	            this.state = 898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===128) {
	                this.state = 897;
	                localctx.stored = this.match(languageParser.STORED);
	            }

	             localctx.art.value = localctx.e.expr;
	                    // this.setIntroLocation( eq );  -- future
	                    if (localctx.stored)
	                      localctx.art.value.stored = this.valueWithTokenLocation( true, localctx.stored );
	                    if (localctx.explicitElement)
	                      localctx.art['$'+'syntax'] = 'element';
	                  
	             this.docComment( localctx.art ); 
	            this.state = 905;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 902;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 907;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 908;
	            this.requiredSemi();
	            break;
	        case 1:
	        case 4:
	            this.state = 910;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementType(art) {
	    let localctx = new ElementTypeContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 48, languageParser.RULE_elementType);
	    var _la = 0;
	    try {
	        this.state = 1082;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 913;
	            this.typeStruct( localctx.art );
	            this.state = 915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 914;
	                this.nullability( localctx.art );
	            }

	            this.state = 917;
	            this.requiredSemi();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 919;
	            this.typeAssociationBase( localctx.art, true );
	            this.state = 942;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 920;
	                this.typeStruct( localctx.art.target, true );
	                this.state = 921;
	                this.optionalSemi();
	                break;

	            case 2:
	                this.state = 923;
	                localctx.one = this.match(languageParser.ONE);
	                 this.setMaxCardinality( localctx.art, { literal: 'number', val: 1 }, localctx.one ); 
	                this.state = 925;
	                this.typeCompoStruct( localctx.art.target );
	                this.state = 926;
	                this.optionalSemi();
	                break;

	            case 3:
	                this.state = 928;
	                localctx.many = this.match(languageParser.MANY);
	                 this.setMaxCardinality( localctx.art, { literal: 'string', val: '*' }, localctx.many ); 
	                this.state = 930;
	                this.typeCompoStruct( localctx.art.target );
	                this.state = 931;
	                this.optionalSemi();
	                break;

	            case 4:
	                this.state = 933;
	                this.typeToMany( localctx.art );
	                this.state = 934;
	                this.typeAssociationElementCont( localctx.art );
	                break;

	            case 5:
	                this.state = 936;
	                this.typeToOne( localctx.art );
	                this.state = 937;
	                this.typeAssociationElementCont( localctx.art );
	                break;

	            case 6:
	                this.state = 939;
	                this.simplePath( localctx.art.target, 'artref' );
	                this.state = 940;
	                this.typeAssociationElementCont( localctx.art );
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 949;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 66:
	                this.state = 944;
	                localctx.array = this.match(languageParser.ARRAY);
	                this.state = 945;
	                localctx.of = this.match(languageParser.OF);
	                 localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
	                break;
	            case 108:
	                this.state = 947;
	                localctx.many = this.match(languageParser.MANY);
	                 localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 985;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 951;
	                this.typeStruct( localctx.art.items );
	                this.state = 953;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===50 || _la===51) {
	                    this.state = 952;
	                    this.nullability( localctx.art.items );
	                }

	                break;
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	                this.state = 957;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 955;
	                    this.typeTypeOf( localctx.art.items );
	                    break;

	                case 2:
	                    this.state = 956;
	                    this.typeRefOptArgs( localctx.art.items );
	                    break;

	                }
	                this.state = 960;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===50 || _la===51) {
	                    this.state = 959;
	                    this.nullability( localctx.art.items );
	                }

	                 this.docComment( localctx.art ); 
	                this.state = 966;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26) {
	                    this.state = 963;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 968;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 983;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===84) {
	                    this.state = 969;
	                    this.match(languageParser.ENUM);
	                    this.state = 970;
	                    this.match(languageParser.T__1);
	                     localctx.art.items.enum = this.createDict(); 
	                    this.state = 975;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                        this.state = 972;
	                        this.enumSymbolDef( localctx.art.items );
	                        this.state = 977;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 978;
	                    this.match(languageParser.T__3);
	                     this.finalizeDictOrArray( localctx.art.items.enum ); 
	                    this.state = 981;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===50 || _la===51) {
	                        this.state = 980;
	                        this.nullability( localctx.art.items );
	                    }

	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 987;
	            this.requiredSemi();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 989;
	            localctx.l = this.match(languageParser.LOCALIZED);
	             localctx.art.localized = this.valueWithTokenLocation( true, localctx.l ); 
	            this.state = 991;
	            this.typeRefOptArgs( localctx.art );
	            this.state = 992;
	            this.optInvisibleNullability( localctx.art );
	             this.docComment( localctx.art ); 
	            this.state = 997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 994;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 999;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===8 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	                this.state = 1000;
	                this.elementProperties( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 1005;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26) {
	                    this.state = 1002;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 1007;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1010;
	            this.requiredSemi();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1012;
	            this.typeTypeOf( localctx.art );
	            this.state = 1013;
	            this.optInvisibleNullability( localctx.art );
	             this.docComment( localctx.art ); 
	            this.state = 1018;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1015;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1020;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1043;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 84:
	            	this.state = 1021;
	            	this.match(languageParser.ENUM);
	            	this.state = 1022;
	            	this.match(languageParser.T__1);
	            	 localctx.art.enum = this.createDict(); 
	            	this.state = 1027;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	            	    this.state = 1024;
	            	    this.enumSymbolDef( localctx.art );
	            	    this.state = 1029;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1030;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.enum ); 
	            	this.state = 1033;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===8 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	            	    this.state = 1032;
	            	    this.elementProperties( localctx.art );
	            	}

	            	break;
	            case 8:
	            case 50:
	            case 51:
	            case 76:
	            	this.state = 1035;
	            	this.elementProperties( localctx.art );
	            	 this.docComment( localctx.art ); 
	            	this.state = 1040;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26) {
	            	    this.state = 1037;
	            	    this.annotationAssignment_ll1( localctx.art );
	            	    this.state = 1042;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case 1:
	            case 4:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1045;
	            this.requiredSemi();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1047;
	            this.typeRefOptArgs( localctx.art );
	            this.state = 1048;
	            this.optInvisibleNullability( localctx.art );
	             this.docComment( localctx.art ); 
	            this.state = 1053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1050;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1055;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1078;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 84:
	            	this.state = 1056;
	            	this.match(languageParser.ENUM);
	            	this.state = 1057;
	            	this.match(languageParser.T__1);
	            	 localctx.art.enum = this.createDict(); 
	            	this.state = 1062;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	            	    this.state = 1059;
	            	    this.enumSymbolDef( localctx.art );
	            	    this.state = 1064;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1065;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.enum ); 
	            	this.state = 1068;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===8 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	            	    this.state = 1067;
	            	    this.elementProperties( localctx.art );
	            	}

	            	break;
	            case 8:
	            case 50:
	            case 51:
	            case 76:
	            	this.state = 1070;
	            	this.elementProperties( localctx.art );
	            	 this.docComment( localctx.art ); 
	            	this.state = 1075;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26) {
	            	    this.state = 1072;
	            	    this.annotationAssignment_ll1( localctx.art );
	            	    this.state = 1077;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case 1:
	            case 4:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1080;
	            this.requiredSemi();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 3 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementProperties(elem) {
	    let localctx = new ElementPropertiesContext(this, this._ctx, this.state, elem);
	    this.enterRule(localctx, 50, languageParser.RULE_elementProperties);
	    var _la = 0;
	    try {
	        this.state = 1092;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	        case 51:
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1084;
	            this.defaultAndNullability( localctx.elem );
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1085;
	            this.match(languageParser.T__7);
	            this.state = 1086;
	            localctx.e = this.expression();
	            this.state = 1088;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===128) {
	                this.state = 1087;
	                localctx.stored = this.match(languageParser.STORED);
	            }

	             localctx.elem.value = localctx.e.expr;
	                  if (localctx.stored)
	                    localctx.elem.value.stored = this.valueWithTokenLocation( true, localctx.stored );
	                
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultAndNullability(elem) {
	    let localctx = new DefaultAndNullabilityContext(this, this._ctx, this.state, elem);
	    this.enterRule(localctx, 52, languageParser.RULE_defaultAndNullability);
	    var _la = 0;
	    try {
	        this.state = 1102;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1094;
	            this.defaultValue( localctx.elem );
	            this.state = 1096;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 1095;
	                this.nullability( localctx.elem );
	            }

	            break;
	        case 50:
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1098;
	            this.nullability( localctx.elem );
	            this.state = 1100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===76) {
	                this.state = 1099;
	                this.defaultValue( localctx.elem );
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue(art) {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 54, languageParser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1104;
	        this.match(languageParser.DEFAULT);
	        this.state = 1105;
	        localctx.expr = this.expression();
	         localctx.art.default = localctx.expr.expr; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendArtifact(art, outer) {
	    let localctx = new ExtendArtifactContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 56, languageParser.RULE_extendArtifact);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108;
	        this.simplePath( localctx.name, 'Ext' );
	        this.state = 1215;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.state = 1109;
	            this.match(languageParser.T__4);
	            this.state = 1110;
	            this.simplePath( localctx.elemName, 'ExtElement');
	             this.addExtension( localctx.art, localctx.outer, 'extend', localctx.name, localctx.elemName.path ); 
	            this.state = 1112;
	            this.extendWithOptElementsOrType( art );
	            break;
	        case 1:
	        case 2:
	        case 4:
	        case 26:
	             this.addExtension( localctx.art, localctx.outer, 'extend', localctx.name ); 
	            this.state = 1115;
	            this.extendWithOptElementsNoWith( art );
	            break;
	        case 58:
	             this.addExtension( localctx.art, localctx.outer, 'extend', localctx.name ); 
	            this.state = 1117;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	             this.docComment( localctx.art ); 
	            this.state = 1123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1120;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1125;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1209;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	            if(la_===1) {
	                this.state = 1126;
	                this.match(languageParser.T__1);
	                 localctx.art.elements = this.createDict(); 
	                this.state = 1131;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	                    this.state = 1128;
	                    this.elementDefOrExtend( localctx.art );
	                    this.state = 1133;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1134;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.elements ); 
	                 this.checkExtensionDict( localctx.art.elements ); 
	                 this.insertSemicolon(); 

	            } else if(la_===2) {
	                this.state = 1138;
	                this.match(languageParser.ELEMENTS);
	                 localctx.art.elements = this.createDict(); 
	                this.state = 1140;
	                this.match(languageParser.T__1);
	                this.state = 1144;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	                    this.state = 1141;
	                    this.elementDefOrExtend( localctx.art, true );
	                    this.state = 1146;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1147;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.elements ); 
	                 this.checkExtensionDict( localctx.art.elements ); 
	                 this.insertSemicolon(); 

	            } else if(la_===3) {
	                this.state = 1151;
	                this.match(languageParser.ENUM);
	                 localctx.art.enum = this.createDict(); 
	                this.state = 1153;
	                this.match(languageParser.T__1);
	                this.state = 1157;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                    this.state = 1154;
	                    this.enumSymbolDef( localctx.art );
	                    this.state = 1159;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1160;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 

	            } else if(la_===4) {
	                this.state = 1162;
	                this.typeNamedArgList( localctx.art );

	            } else if(la_===5) {
	                this.state = 1163;
	                this.includeRef( localctx.art );
	                this.state = 1168;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1164;
	                    this.match(languageParser.T__2);
	                    this.state = 1165;
	                    this.includeRef( localctx.art );
	                    this.state = 1170;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            } else if(la_===6) {
	                this.state = 1171;
	                this.match(languageParser.DEFINITIONS);
	                 localctx.art.artifacts = this.createDict(); 
	                this.state = 1173;
	                this.match(languageParser.T__1);
	                this.state = 1177;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 1115824435) !== 0) || _la===95 || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 525329) !== 0)) {
	                    this.state = 1174;
	                    this.artifactDefOrExtend( localctx.art, 'definitions' );
	                    this.state = 1179;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1180;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.artifacts ); this.insertSemicolon(); 

	            } else if(la_===7) {
	                this.state = 1182;
	                this.match(languageParser.COLUMNS);
	                 localctx.art.columns = this.createArray(); 
	                this.state = 1184;
	                this.match(languageParser.T__1);
	                this.state = 1194;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 201397860) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4228220435) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 9215) !== 0)) {
	                    this.state = 1185;
	                    this.selectItemDef( localctx.art.columns );
	                    this.state = 1191;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===3) {
	                        this.state = 1186;
	                        this.match(languageParser.T__2);
	                         if (this.isStraightBefore("}")) break; 
	                        this.state = 1188;
	                        this.selectItemDef( localctx.art.columns );
	                        this.state = 1193;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 1196;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.columns ); this.insertSemicolon(); 

	            } else if(la_===8) {
	                this.state = 1198;
	                this.match(languageParser.ACTIONS);
	                 localctx.art.actions = this.createDict(); 
	                this.state = 1200;
	                this.match(languageParser.T__1);
	                this.state = 1204;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || _la===61 || _la===95) {
	                    this.state = 1201;
	                    this.actionFunctionDef( localctx.art );
	                    this.state = 1206;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1207;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 

	            }
	            this.state = 1213;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	                this.state = 1211;
	                this.requiredSemi();
	                break;
	            case 152:
	                this.state = 1212;
	                this.match(languageParser.SemicolonTopLevel);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendService(art, outer) {
	    let localctx = new ExtendServiceContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 58, languageParser.RULE_extendService);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1217;
	        this.match(languageParser.SERVICE);
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1219;
	        this.simplePath( localctx.name, 'ExtService' );
	         localctx.art.name = localctx.name; this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' ); 
	        this.state = 1223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 1221;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	        }

	         this.docComment( localctx.art ); 
	        this.state = 1229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1226;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 1231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1232;
	        this.optArtifactsBlock( art, 'service' );
	        this.state = 1235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 1233;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 1234;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendContext(art, outer) {
	    let localctx = new ExtendContextContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 60, languageParser.RULE_extendContext);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1237;
	        this.match(languageParser.CONTEXT);
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1239;
	        this.simplePath( localctx.name, 'ExtContext' );
	         localctx.art.name = localctx.name; this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' ); 
	        this.state = 1243;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 1241;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	        }

	         this.docComment( localctx.art ); 
	        this.state = 1249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1246;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 1251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1252;
	        this.optArtifactsBlock( art, 'context' );
	        this.state = 1255;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 1253;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 1254;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendEntityOrAspect(art, outer) {
	    let localctx = new ExtendEntityOrAspectContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 62, languageParser.RULE_extendEntityOrAspect);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1257;
	        _la = this._input.LA(1);
	        if(!(_la===68 || _la===83)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1259;
	        this.simplePath( localctx.name, 'Ext' );
	         localctx.art.name = localctx.name;
	              this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' );
	            
	        this.state = 1288;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 58:
	            this.state = 1261;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); this.docComment( localctx.art ); 
	            this.state = 1266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1263;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1268;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1278;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1269;
	                this.includeRef( localctx.art );
	                this.state = 1274;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1270;
	                    this.match(languageParser.T__2);
	                    this.state = 1271;
	                    this.includeRef( localctx.art );
	                    this.state = 1276;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 1277;
	                this.extendForEntity( localctx.art );
	                break;

	            }
	            break;
	        case 1:
	        case 2:
	        case 4:
	        case 26:
	        case 62:
	        case 152:
	             this.docComment( localctx.art ); 
	            this.state = 1284;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1281;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1286;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1287;
	            this.extendForEntity( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1292;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 1290;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 1291;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendForEntity(art) {
	    let localctx = new ExtendForEntityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 64, languageParser.RULE_extendForEntity);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1328;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 2:
	        	this.state = 1294;
	        	this.match(languageParser.T__1);
	        	 localctx.art.elements = this.createDict(); 
	        	this.state = 1299;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	        	    this.state = 1296;
	        	    this.elementDefOrExtend( localctx.art );
	        	    this.state = 1301;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1302;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.elements );
	        	            this.checkExtensionDict( localctx.art.elements );
	        	            this.insertSemicolon();
	        	      
	        	this.state = 1315;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===62) {
	        	    this.state = 1304;
	        	    this.match(languageParser.ACTIONS);
	        	     localctx.art.actions = this.createDict(); 
	        	    this.state = 1306;
	        	    this.match(languageParser.T__1);
	        	    this.state = 1310;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===26 || _la===61 || _la===95) {
	        	        this.state = 1307;
	        	        this.actionFunctionDef( localctx.art );
	        	        this.state = 1312;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	    this.state = 1313;
	        	    this.match(languageParser.T__3);
	        	     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        	}

	        	break;
	        case 62:
	        	this.state = 1317;
	        	this.match(languageParser.ACTIONS);
	        	 localctx.art.actions = this.createDict(); 
	        	this.state = 1319;
	        	this.match(languageParser.T__1);
	        	this.state = 1323;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===26 || _la===61 || _la===95) {
	        	    this.state = 1320;
	        	    this.actionFunctionDef( localctx.art );
	        	    this.state = 1325;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1326;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        	break;
	        case 1:
	        case 4:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendProjection(art, outer) {
	    let localctx = new ExtendProjectionContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 66, languageParser.RULE_extendProjection);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1330;
	        this.match(languageParser.PROJECTION);
	         localctx.art.expectedKind = this.valueWithTokenLocation( 'entity' ); 
	        this.state = 1332;
	        this.simplePath( localctx.name, 'Ext' );
	         localctx.art.name = localctx.name;
	              this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' );
	            
	        this.state = 1336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 1334;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); 
	        }

	         this.docComment( localctx.art ); 
	        this.state = 1342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1339;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1384;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 2:
	        	this.state = 1345;
	        	this.match(languageParser.T__1);
	        	 localctx.art.columns = this.createArray(); 
	        	this.state = 1356;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if((((_la) & ~0x1f) === 0 && ((1 << _la) & 201397860) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4228220435) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 9215) !== 0)) {
	        	    this.state = 1347;
	        	    this.selectItemDef( localctx.art.columns );
	        	    this.state = 1353;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===3) {
	        	        this.state = 1348;
	        	        this.match(languageParser.T__2);
	        	         if (this.isStraightBefore("}")) break; 
	        	        this.state = 1350;
	        	        this.selectItemDef( localctx.art.columns );
	        	        this.state = 1355;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	}

	        	this.state = 1358;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.columns ); this.insertSemicolon(); 
	        	this.state = 1371;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===62) {
	        	    this.state = 1360;
	        	    this.match(languageParser.ACTIONS);
	        	     localctx.art.actions = this.createDict(); 
	        	    this.state = 1362;
	        	    this.match(languageParser.T__1);
	        	    this.state = 1366;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===26 || _la===61 || _la===95) {
	        	        this.state = 1363;
	        	        this.actionFunctionDef( localctx.art );
	        	        this.state = 1368;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	    this.state = 1369;
	        	    this.match(languageParser.T__3);
	        	     this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon(); 
	        	}

	        	break;
	        case 62:
	        	this.state = 1373;
	        	this.match(languageParser.ACTIONS);
	        	 localctx.art.actions = this.createDict(); 
	        	this.state = 1375;
	        	this.match(languageParser.T__1);
	        	this.state = 1379;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===26 || _la===61 || _la===95) {
	        	    this.state = 1376;
	        	    this.actionFunctionDef( localctx.art );
	        	    this.state = 1381;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1382;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.actions ); this.insertSemicolon();
	        	break;
	        case 1:
	        case 4:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1388;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 4:
	            this.state = 1386;
	            this.requiredSemi();
	            break;
	        case 152:
	            this.state = 1387;
	            this.match(languageParser.SemicolonTopLevel);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendType(art, outer) {
	    let localctx = new ExtendTypeContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 68, languageParser.RULE_extendType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1390;
	        this.match(languageParser.TYPE);
	         localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        this.state = 1392;
	        this.simplePath( localctx.name, 'Ext' );
	         localctx.art.name = localctx.name;
	              this.addItem( localctx.art, localctx.outer, 'extensions', 'extend' );
	            
	        this.state = 1430;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 4:
	        case 26:
	            this.state = 1394;
	            this.extendWithOptElementsNoWith( art );
	            break;
	        case 58:
	            this.state = 1395;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); this.docComment( localctx.art ); 
	            this.state = 1400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1397;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1402;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1424;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 2:
	            	this.state = 1403;
	            	this.match(languageParser.T__1);
	            	 localctx.art.elements = this.createDict(); 
	            	this.state = 1408;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	            	    this.state = 1405;
	            	    this.elementDefOrExtend( localctx.art );
	            	    this.state = 1410;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1411;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.elements ); 
	            	 this.checkExtensionDict( localctx.art.elements ); 
	            	 this.insertSemicolon(); 
	            	break;
	            case 6:
	            	this.state = 1415;
	            	this.typeNamedArgList( localctx.art );
	            	break;
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            	this.state = 1416;
	            	this.includeRef( localctx.art );
	            	this.state = 1421;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===3) {
	            	    this.state = 1417;
	            	    this.match(languageParser.T__2);
	            	    this.state = 1418;
	            	    this.includeRef( localctx.art );
	            	    this.state = 1423;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case 1:
	            case 4:
	            case 152:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1428;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 4:
	                this.state = 1426;
	                this.requiredSemi();
	                break;
	            case 152:
	                this.state = 1427;
	                this.match(languageParser.SemicolonTopLevel);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendWithOptElementsOrType(art) {
	    let localctx = new ExtendWithOptElementsOrTypeContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 70, languageParser.RULE_extendWithOptElementsOrType);
	    var _la = 0;
	    try {
	        this.state = 1481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 4:
	        case 26:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1432;
	            this.extendWithOptElementsNoWith( art );
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1433;
	            this.match(languageParser.WITH);
	             this.noSemicolonHere(); this.docComment( localctx.art ); 
	            this.state = 1438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1435;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1440;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1478;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 2:
	            	this.state = 1441;
	            	this.match(languageParser.T__1);
	            	 localctx.art.elements = this.createDict(); 
	            	this.state = 1446;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	            	    this.state = 1443;
	            	    this.elementDefOrExtend( localctx.art );
	            	    this.state = 1448;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1449;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.elements ); 
	            	 this.checkExtensionDict( localctx.art.elements ); 
	            	 this.insertSemicolon(); 
	            	break;
	            case 80:
	            	this.state = 1453;
	            	this.match(languageParser.ELEMENTS);
	            	 localctx.art.elements = this.createDict(); 
	            	this.state = 1455;
	            	this.match(languageParser.T__1);
	            	this.state = 1459;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	            	    this.state = 1456;
	            	    this.elementDefOrExtend( localctx.art, true );
	            	    this.state = 1461;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1462;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.elements ); 
	            	 this.checkExtensionDict( localctx.art.elements ); 
	            	 this.insertSemicolon(); 
	            	break;
	            case 84:
	            	this.state = 1466;
	            	this.match(languageParser.ENUM);
	            	 localctx.art.enum = this.createDict(); 
	            	this.state = 1468;
	            	this.match(languageParser.T__1);
	            	this.state = 1472;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	            	    this.state = 1469;
	            	    this.enumSymbolDef( localctx.art );
	            	    this.state = 1474;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	this.state = 1475;
	            	this.match(languageParser.T__3);
	            	 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	            	break;
	            case 6:
	            	this.state = 1477;
	            	this.typeNamedArgList( localctx.art );
	            	break;
	            case 1:
	            case 4:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1480;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendWithOptElementsNoWith(art) {
	    let localctx = new ExtendWithOptElementsNoWithContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 72, languageParser.RULE_extendWithOptElementsNoWith);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.docComment( localctx.art ); 
	        this.state = 1487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1484;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1490;
	            this.match(languageParser.T__1);
	             localctx.art.elements = this.createDict(); 
	            this.state = 1495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	                this.state = 1492;
	                this.elementDefOrExtend( localctx.art );
	                this.state = 1497;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1498;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.elements ); 
	             this.checkExtensionDict( localctx.art.elements ); 
	             this.insertSemicolon(); 
	        }

	        this.state = 1504;
	        this.requiredSemi();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementDefOrExtend(outer, explicitElement) {
	    let localctx = new ElementDefOrExtendContext(this, this._ctx, this.state, outer, explicitElement);
	    this.enterRule(localctx, 74, languageParser.RULE_elementDefOrExtend);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1507;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1512;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1516;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1513;
	            this.match(languageParser.EXTEND);
	            this.state = 1514;
	            this.extendElement( localctx.art, localctx.outer );
	            break;

	        case 2:
	            this.state = 1515;
	            this.elementDefInner( localctx.art, localctx.outer, localctx.explicitElement );
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendElement(art, outer) {
	    let localctx = new ExtendElementContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 76, languageParser.RULE_extendElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.setLocalToken( 'ELEMENT', 'ELEMENT', /^([:{@=}()]|WITH)$/i ); 
	        this.state = 1521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 1519;
	            this.match(languageParser.ELEMENT);
	             localctx.art.expectedKind = this.valueWithTokenLocation(); 
	        }

	        this.state = 1523;
	        localctx.name = this.ident('ExtElement');
	         this.addDef( localctx.art, localctx.outer, 'elements', 'extend', localctx.name.id ); 
	        this.state = 1525;
	        this.extendWithOptElementsOrType( localctx.art, localctx.art );
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateArtifact(art, outer) {
	    let localctx = new AnnotateArtifactContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 78, languageParser.RULE_annotateArtifact);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1527;
	        this.simplePath( localctx.name, 'Ext' );
	        this.state = 1600;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.state = 1528;
	            this.match(languageParser.T__4);
	            this.state = 1529;
	            this.simplePath( localctx.elemName, 'ExtElement');
	             this.addExtension( localctx.art, localctx.outer, 'annotate', localctx.name, localctx.elemName.path ); 
	            this.state = 1533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===58) {
	                this.state = 1531;
	                this.match(languageParser.WITH);
	                 this.noSemicolonHere(); 
	            }

	             this.docComment( localctx.art ); 
	            this.state = 1539;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1536;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1541;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1546;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 1542;
	                this.annotateArtifactElements( localctx.art );
	                this.state = 1543;
	                this.optionalSemi();
	                break;
	            case 1:
	            case 4:
	                this.state = 1545;
	                this.requiredSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 1:
	        case 2:
	        case 4:
	        case 6:
	        case 26:
	        case 58:
	        case 62:
	        case 123:
	             this.addExtension( localctx.art, localctx.outer, 'annotate', localctx.name ); 
	            this.state = 1551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===58) {
	                this.state = 1549;
	                this.match(languageParser.WITH);
	                 this.noSemicolonHere(); 
	            }

	             this.docComment( localctx.art ); 
	            this.state = 1557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 1554;
	                this.annotationAssignment_ll1( localctx.art );
	                this.state = 1559;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1598;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 1560;
	                this.annotateArtifactElements( localctx.art );
	                this.state = 1562;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===62) {
	                    this.state = 1561;
	                    this.annotateArtifactActions( localctx.art );
	                }

	                this.state = 1564;
	                this.optionalSemi();
	                break;
	            case 62:
	                this.state = 1566;
	                this.annotateArtifactActions( localctx.art );
	                this.state = 1567;
	                this.optionalSemi();
	                break;
	            case 6:
	                this.state = 1569;
	                this.match(languageParser.T__5);
	                 localctx.art.params = this.createDict(); 
	                this.state = 1571;
	                this.annotateParam( localctx.art );
	                this.state = 1577;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1572;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore(')')) break; 
	                    this.state = 1574;
	                    this.annotateParam( localctx.art );
	                    this.state = 1579;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1580;
	                this.match(languageParser.T__6);
	                 this.finalizeDictOrArray( localctx.art.params ); 
	                 this.checkExtensionDict( localctx.art.params ); 
	                this.state = 1594;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 2:
	                    this.state = 1583;
	                    this.annotateArtifactElements( localctx.art );
	                    this.state = 1585;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===62) {
	                        this.state = 1584;
	                        this.annotateArtifactActions( localctx.art );
	                    }

	                    this.state = 1587;
	                    this.optionalSemi();
	                    break;
	                case 62:
	                    this.state = 1589;
	                    this.annotateArtifactActions( localctx.art );
	                    this.state = 1590;
	                    this.optionalSemi();
	                    break;
	                case 123:
	                    this.state = 1592;
	                    this.annotateReturns( localctx.art );
	                    break;
	                case 1:
	                case 4:
	                    this.state = 1593;
	                    this.requiredSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            case 123:
	                this.state = 1596;
	                this.annotateReturns( localctx.art );
	                break;
	            case 1:
	            case 4:
	                this.state = 1597;
	                this.requiredSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateArtifactActions(art) {
	    let localctx = new AnnotateArtifactActionsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 80, languageParser.RULE_annotateArtifactActions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        this.match(languageParser.ACTIONS);
	         localctx.art.actions = this.createDict(); 
	        this.state = 1604;
	        this.match(languageParser.T__1);
	        this.state = 1608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	            this.state = 1605;
	            this.annotateAction( localctx.art );
	            this.state = 1610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1611;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.actions ); 
	         this.checkExtensionDict( localctx.art.actions ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateArtifactElements(art) {
	    let localctx = new AnnotateArtifactElementsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 82, languageParser.RULE_annotateArtifactElements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1615;
	        this.match(languageParser.T__1);
	         localctx.art.elements = this.createDict(); 
	        this.state = 1620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	            this.state = 1617;
	            this.annotateElement( localctx.art );
	            this.state = 1622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1623;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); 
	         this.checkExtensionDict( localctx.art.elements ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateElement(outer) {
	    let localctx = new AnnotateElementContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 84, languageParser.RULE_annotateElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1628;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1634;
	        localctx.name = this.ident('ExtElement');
	         this.addDef( localctx.art, localctx.outer, 'elements', 'annotate', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 1639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1636;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1655;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 1642;
	            this.match(languageParser.T__1);
	             localctx.art.elements = this.createDict(); 
	            this.state = 1647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                this.state = 1644;
	                this.annotateElement( localctx.art );
	                this.state = 1649;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1650;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.elements ); 
	             this.checkExtensionDict( localctx.art.elements ); 
	            this.state = 1653;
	            this.optionalSemi();
	            break;
	        case 1:
	        case 4:
	            this.state = 1654;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateAction(outer) {
	    let localctx = new AnnotateActionContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 86, languageParser.RULE_annotateAction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1658;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1664;
	        localctx.name = this.ident('ExtBoundAction');
	         this.addDef( localctx.art, localctx.outer, 'actions', 'annotate', localctx.name.id );
	              this.docComment( localctx.art ); 
	        this.state = 1669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1666;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 1672;
	            this.match(languageParser.T__5);
	             localctx.art.params = this.createDict(); 
	            this.state = 1674;
	            this.annotateParam( localctx.art );
	            this.state = 1680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1675;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 1677;
	                this.annotateParam( localctx.art );
	                this.state = 1682;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1683;
	            this.match(languageParser.T__6);
	             this.finalizeDictOrArray( localctx.art.params ); 
	             this.checkExtensionDict( localctx.art.params ); 
	        }

	        this.state = 1691;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 123:
	            this.state = 1689;
	            this.annotateReturns( localctx.art );
	            break;
	        case 1:
	        case 4:
	            this.state = 1690;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateReturns(art) {
	    let localctx = new AnnotateReturnsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 88, languageParser.RULE_annotateReturns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1693;
	        localctx.ret = this.match(languageParser.RETURNS);
	         localctx.art.returns = { location: this.tokenLocation( localctx.ret ), kind: 'annotate' };
	                          localctx.art.returns.location.tokenIndex = localctx.ret.tokenIndex; 
	         this.docComment( localctx.art.returns ); 
	        this.state = 1699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1696;
	            this.annotationAssignment_ll1( localctx.art.returns );
	            this.state = 1701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1715;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 1702;
	            this.match(languageParser.T__1);
	             localctx.art.returns.elements = this.createDict(); 
	            this.state = 1707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                this.state = 1704;
	                this.annotateElement( localctx.art.returns );
	                this.state = 1709;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1710;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.returns.elements ); 
	             this.checkExtensionDict( localctx.art.returns.elements ); 
	            this.state = 1713;
	            this.optionalSemi();
	            break;
	        case 1:
	        case 4:
	            this.state = 1714;
	            this.requiredSemi();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art.returns ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotateParam(outer) {
	    let localctx = new AnnotateParamContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 90, languageParser.RULE_annotateParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.art.location = this.startLocation();; this.docComment( localctx.art ); 
	        this.state = 1721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1718;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1723;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1724;
	        localctx.param = this.ident('ExtParam');
	         this.addDef( localctx.art, localctx.outer, 'params', 'annotate', localctx.param.id );
	              this.docComment( localctx.art ); 
	        this.state = 1729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1726;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 1731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	includeRef(art) {
	    let localctx = new IncludeRefContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 92, languageParser.RULE_includeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1732;
	        this.simplePath( localctx.incl, 'artref' );
	         localctx.art.includes ??= []; localctx.art.includes.push(localctx.incl); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpec(art) {
	    let localctx = new TypeSpecContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 94, languageParser.RULE_typeSpec);
	    try {
	        this.state = 1738;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1735;
	            this.typeStruct( localctx.art );
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1736;
	            this.match(languageParser.T__4);
	            this.state = 1737;
	            this.typeSpecCont( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnTypeSpec(art) {
	    let localctx = new ReturnTypeSpecContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 96, languageParser.RULE_returnTypeSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1740;
	        localctx.ret = this.match(languageParser.RETURNS);
	         localctx.art.returns = { location: this.tokenLocation( localctx.ret ), kind: 'param' };
	              localctx.art.returns.location.tokenIndex = localctx.ret.tokenIndex; 
	         this.docComment( localctx.art.returns ); 
	        this.state = 1746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 1743;
	            this.annotationAssignment_ll1( localctx.art.returns );
	            this.state = 1748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1749;
	        this.typeSpecCont( localctx.art.returns );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecCont(art) {
	    let localctx = new TypeSpecContContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 98, languageParser.RULE_typeSpecCont);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1796;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1751;
	            this.typeStruct( localctx.art );
	            this.state = 1753;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 1752;
	                this.nullability( localctx.art );
	            }

	            break;

	        case 2:
	            this.state = 1755;
	            this.typeArray( localctx.art );
	            break;

	        case 3:
	            this.state = 1756;
	            this.typeTypeOf( localctx.art );
	            this.state = 1758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 1757;
	                this.nullability( localctx.art );
	            }

	            this.state = 1774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===84) {
	                this.state = 1760;
	                this.match(languageParser.ENUM);
	                this.state = 1761;
	                this.match(languageParser.T__1);
	                 localctx.art.enum = this.createDict(); 
	                this.state = 1766;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                    this.state = 1763;
	                    this.enumSymbolDef( localctx.art );
	                    this.state = 1768;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1769;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	                this.state = 1772;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===50 || _la===51) {
	                    this.state = 1771;
	                    this.nullability( localctx.art );
	                }

	            }

	            break;

	        case 4:
	            this.state = 1776;
	            this.typeRefOptArgs( localctx.art );
	            this.state = 1778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 1777;
	                this.nullability( localctx.art );
	            }

	            this.state = 1794;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===84) {
	                this.state = 1780;
	                this.match(languageParser.ENUM);
	                this.state = 1781;
	                this.match(languageParser.T__1);
	                 localctx.art.enum = this.createDict(); 
	                this.state = 1786;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                    this.state = 1783;
	                    this.enumSymbolDef( localctx.art );
	                    this.state = 1788;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1789;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	                this.state = 1792;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===50 || _la===51) {
	                    this.state = 1791;
	                    this.nullability( localctx.art );
	                }

	            }

	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecSemi(art) {
	    let localctx = new TypeSpecSemiContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 100, languageParser.RULE_typeSpecSemi);
	    var _la = 0;
	    try {
	        this.state = 1964;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1798;
	            this.typeStruct( localctx.art );
	            this.state = 1803;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 50:
	            case 51:
	                this.state = 1799;
	                this.nullability( localctx.art );
	                this.state = 1800;
	                this.requiredSemi();
	                break;
	            case -1:
	            case 1:
	            case 4:
	            case 26:
	            case 60:
	            case 61:
	            case 64:
	            case 65:
	            case 68:
	            case 73:
	            case 77:
	            case 83:
	            case 85:
	            case 90:
	            case 95:
	            case 127:
	            case 131:
	            case 135:
	            case 137:
	            case 146:
	                this.state = 1802;
	                this.optionalSemi();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1805;
	            this.match(languageParser.T__4);
	             this.setLocalToken( 'MANY', 'HelperToken1', /^[^\{]/ ); 
	            this.state = 1962;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1807;
	                this.typeStruct( localctx.art );
	                this.state = 1812;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 50:
	                case 51:
	                    this.state = 1808;
	                    this.nullability( localctx.art );
	                    this.state = 1809;
	                    this.requiredSemi();
	                    break;
	                case -1:
	                case 1:
	                case 4:
	                case 26:
	                case 60:
	                case 61:
	                case 64:
	                case 65:
	                case 68:
	                case 73:
	                case 77:
	                case 83:
	                case 85:
	                case 90:
	                case 95:
	                case 127:
	                case 131:
	                case 135:
	                case 137:
	                case 146:
	                    this.state = 1811;
	                    this.optionalSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 1814;
	                this.typeAssociationBase( localctx.art, false );
	                this.state = 1818;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1815;
	                    this.typeToMany( localctx.art );
	                    break;

	                case 2:
	                    this.state = 1816;
	                    this.typeToOne( localctx.art );
	                    break;

	                case 3:
	                    this.state = 1817;
	                    this.simplePath( localctx.art.target, 'artref' );
	                    break;

	                }
	                this.state = 1821;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===2 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108875) !== 0)) {
	                    this.state = 1820;
	                    this.typeAssociationCont( localctx.art );
	                }

	                this.state = 1823;
	                this.requiredSemi();
	                break;

	            case 3:
	                this.state = 1825;
	                localctx.many = this.match(languageParser.HelperToken1);
	                 localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	                this.state = 1827;
	                this.typeStruct( localctx.art.items );
	                this.state = 1832;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 50:
	                case 51:
	                    this.state = 1828;
	                    this.nullability( localctx.art.items );
	                    this.state = 1829;
	                    this.requiredSemi();
	                    break;
	                case -1:
	                case 1:
	                case 4:
	                case 26:
	                case 60:
	                case 61:
	                case 64:
	                case 65:
	                case 68:
	                case 73:
	                case 77:
	                case 83:
	                case 85:
	                case 90:
	                case 95:
	                case 127:
	                case 131:
	                case 135:
	                case 137:
	                case 146:
	                    this.state = 1831;
	                    this.optionalSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 4:
	                this.state = 1839;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 66:
	                    this.state = 1834;
	                    localctx.array = this.match(languageParser.ARRAY);
	                    this.state = 1835;
	                    localctx.of = this.match(languageParser.OF);
	                     localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
	                    break;
	                case 108:
	                    this.state = 1837;
	                    localctx.many = this.match(languageParser.MANY);
	                     localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 1880;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 2:
	                    this.state = 1841;
	                    this.typeStruct( localctx.art.items );
	                    this.state = 1846;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 50:
	                    case 51:
	                        this.state = 1842;
	                        this.nullability( localctx.art.items );
	                        this.state = 1843;
	                        this.requiredSemi();
	                        break;
	                    case -1:
	                    case 1:
	                    case 4:
	                    case 26:
	                    case 60:
	                    case 61:
	                    case 64:
	                    case 65:
	                    case 68:
	                    case 73:
	                    case 77:
	                    case 83:
	                    case 85:
	                    case 90:
	                    case 95:
	                    case 127:
	                    case 131:
	                    case 135:
	                    case 137:
	                    case 146:
	                        this.state = 1845;
	                        this.optionalSemi();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 118:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 132:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                    this.state = 1850;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1848;
	                        this.typeTypeOf( localctx.art.items );
	                        break;

	                    case 2:
	                        this.state = 1849;
	                        this.typeRefOptArgs( localctx.art.items );
	                        break;

	                    }
	                    this.state = 1853;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===50 || _la===51) {
	                        this.state = 1852;
	                        this.nullability( localctx.art.items );
	                    }

	                     this.docComment( localctx.art ); 
	                    this.state = 1859;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===26) {
	                        this.state = 1856;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 1861;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1876;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===84) {
	                        this.state = 1862;
	                        this.match(languageParser.ENUM);
	                        this.state = 1863;
	                        this.match(languageParser.T__1);
	                         localctx.art.items.enum = this.createDict(); 
	                        this.state = 1868;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                            this.state = 1865;
	                            this.enumSymbolDef( localctx.art.items );
	                            this.state = 1870;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1871;
	                        this.match(languageParser.T__3);
	                         this.finalizeDictOrArray( localctx.art.items.enum ); this.insertSemicolon(); 
	                        this.state = 1874;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===50 || _la===51) {
	                            this.state = 1873;
	                            this.nullability( localctx.art.items );
	                        }

	                    }

	                    this.state = 1878;
	                    this.requiredSemi();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 5:
	                this.state = 1882;
	                this.typeTypeOf( localctx.art );
	                this.state = 1884;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	                    this.state = 1883;
	                    this.defaultAndNullability( localctx.art );
	                }

	                 this.docComment( localctx.art ); 
	                this.state = 1890;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26) {
	                    this.state = 1887;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 1892;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1893;
	                this.requiredSemi();
	                break;

	            case 6:
	                this.state = 1895;
	                localctx.l = this.match(languageParser.LOCALIZED);
	                 localctx.art.localized = this.valueWithTokenLocation( true, localctx.l ); 
	                this.state = 1897;
	                this.typeRefOptArgs( localctx.art );
	                this.state = 1899;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	                    this.state = 1898;
	                    this.defaultAndNullability( localctx.art );
	                }

	                 this.docComment( localctx.art ); 
	                this.state = 1905;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26) {
	                    this.state = 1902;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 1907;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1908;
	                this.requiredSemi();
	                break;

	            case 7:
	                 localctx.art.type = {}; 
	                this.state = 1911;
	                this.simplePath( localctx.art.type, 'artref' );
	                this.state = 1960;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 1:
	                case 4:
	                case 5:
	                case 6:
	                case 26:
	                case 50:
	                case 51:
	                case 76:
	                case 84:
	                case 144:
	                case 145:
	                    this.state = 1916;
	                    this._errHandler.sync(this);
	                    switch (this._input.LA(1)) {
	                    case 6:
	                    	this.state = 1912;
	                    	this.typeRefArgs( localctx.art );
	                    	break;
	                    case 5:
	                    	this.state = 1913;
	                    	this.match(languageParser.T__4);
	                    	 localctx.art.type.scope = localctx.art.type.path.length; 
	                    	this.state = 1915;
	                    	this.simplePath( localctx.art.type, 'ref');
	                    	break;
	                    case 1:
	                    case 4:
	                    case 26:
	                    case 50:
	                    case 51:
	                    case 76:
	                    case 84:
	                    case 144:
	                    case 145:
	                    	break;
	                    default:
	                    	break;
	                    }
	                    this.state = 1918;
	                    this.optInvisibleNullability( localctx.art );
	                     this.docComment( localctx.art ); 
	                    this.state = 1923;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===26) {
	                        this.state = 1920;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 1925;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1937;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===84) {
	                        this.state = 1926;
	                        this.match(languageParser.ENUM);
	                        this.state = 1927;
	                        this.match(languageParser.T__1);
	                         localctx.art.enum = this.createDict(); 
	                        this.state = 1932;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                            this.state = 1929;
	                            this.enumSymbolDef( localctx.art );
	                            this.state = 1934;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                        }
	                        this.state = 1935;
	                        this.match(languageParser.T__3);
	                         this.finalizeDictOrArray( localctx.art.enum ); this.insertSemicolon(); 
	                    }

	                    this.state = 1940;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	                        this.state = 1939;
	                        this.defaultAndNullability( localctx.art );
	                    }

	                    this.state = 1942;
	                    this.requiredSemi();
	                    break;
	                case 2:
	                case 3:
	                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
	                    this.state = 1950;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===3) {
	                        this.state = 1945;
	                        this.match(languageParser.T__2);
	                         if (this.isStraightBefore('{')) break; 
	                        this.state = 1947;
	                        this.includeRef( localctx.art );
	                        this.state = 1952;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    this.state = 1953;
	                    this.typeStruct( localctx.art );
	                    this.state = 1958;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case -1:
	                    case 1:
	                    case 4:
	                    case 26:
	                    case 60:
	                    case 61:
	                    case 64:
	                    case 65:
	                    case 68:
	                    case 73:
	                    case 77:
	                    case 83:
	                    case 85:
	                    case 90:
	                    case 95:
	                    case 127:
	                    case 131:
	                    case 135:
	                    case 137:
	                    case 146:
	                        this.state = 1954;
	                        this.optionalSemi();
	                        break;
	                    case 50:
	                    case 51:
	                        this.state = 1955;
	                        this.nullability( localctx.art );
	                        this.state = 1956;
	                        this.requiredSemi();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 3 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeStruct(art, attachLoc) {
	    let localctx = new TypeStructContext(this, this._ctx, this.state, art, attachLoc);
	    this.enterRule(localctx, 102, languageParser.RULE_typeStruct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1966;
	        this.match(languageParser.T__1);
	         localctx.art.elements = this.createDict(); 
	        this.state = 1971;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	            this.state = 1968;
	            this.elementDef( localctx.art );
	            this.state = 1973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1974;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); 
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.attachLoc) this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeCompoStruct(art) {
	    let localctx = new TypeCompoStructContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 104, languageParser.RULE_typeCompoStruct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1977;
	        this.match(languageParser.COMPOSITIONofBRACE);
	         localctx.art.elements = this.createDict(); 
	        this.state = 1982;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || ((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 4294963201) !== 0) || ((((_la - 80)) & ~0x1f) === 0 && ((1 << (_la - 80)) & 4294967295) !== 0) || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 2013265919) !== 0)) {
	            this.state = 1979;
	            this.elementDef( localctx.art );
	            this.state = 1984;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1985;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art.elements ); 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArray(art) {
	    let localctx = new TypeArrayContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 106, languageParser.RULE_typeArray);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1993;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	            this.state = 1988;
	            localctx.array = this.match(languageParser.ARRAY);
	            this.state = 1989;
	            localctx.of = this.match(languageParser.OF);
	             localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
	            break;
	        case 108:
	            this.state = 1991;
	            localctx.many = this.match(languageParser.MANY);
	             localctx.art.items = { location: this.tokenLocation( localctx.many ) };
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2039;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1995;
	            this.typeStruct( localctx.art.items );
	            this.state = 1997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 1996;
	                this.nullability( localctx.art.items );
	            }

	            break;

	        case 2:
	            this.state = 1999;
	            this.typeTypeOf( localctx.art.items );
	            this.state = 2001;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 2000;
	                this.nullability( localctx.art.items );
	            }

	            this.state = 2017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===84) {
	                this.state = 2003;
	                this.match(languageParser.ENUM);
	                this.state = 2004;
	                this.match(languageParser.T__1);
	                 localctx.art.items.enum = this.createDict(); 
	                this.state = 2009;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                    this.state = 2006;
	                    this.enumSymbolDef( localctx.art.items );
	                    this.state = 2011;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2012;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.items.enum ); 
	                this.state = 2015;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===50 || _la===51) {
	                    this.state = 2014;
	                    this.nullability( localctx.art.items );
	                }

	            }

	            break;

	        case 3:
	            this.state = 2019;
	            this.typeRefOptArgs( localctx.art.items );
	            this.state = 2021;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50 || _la===51) {
	                this.state = 2020;
	                this.nullability( localctx.art.items );
	            }

	            this.state = 2037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===84) {
	                this.state = 2023;
	                this.match(languageParser.ENUM);
	                this.state = 2024;
	                this.match(languageParser.T__1);
	                 localctx.art.items.enum = this.createDict(); 
	                this.state = 2029;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                    this.state = 2026;
	                    this.enumSymbolDef( localctx.art.items );
	                    this.state = 2031;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2032;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.art.items.enum ); 
	                this.state = 2035;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===50 || _la===51) {
	                    this.state = 2034;
	                    this.nullability( localctx.art.items );
	                }

	            }

	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssociationBase(art, handleTypeCompo) {
	    let localctx = new TypeAssociationBaseContext(this, this._ctx, this.state, art, handleTypeCompo);
	    this.enterRule(localctx, 108, languageParser.RULE_typeAssociationBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2053;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 69:
	            this.state = 2041;
	            localctx.assoc = this.match(languageParser.ASSOCIATION);
	            this.state = 2043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===11) {
	                this.state = 2042;
	                this.cardinality(localctx.art);
	            }

	            this.state = 2045;
	            this.match(languageParser.TO);
	            {
	                    let location = this.tokenLocation(localctx.assoc);
	                    localctx.art.type = { path: [{ id: 'cds.Association', location }], scope: 'global', location };
	                    this.handleComposition( localctx.art.cardinality, false );
	                  }
	            break;
	        case 72:
	            this.state = 2047;
	            localctx.compo = this.match(languageParser.COMPOSITION);
	            this.state = 2049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===11) {
	                this.state = 2048;
	                this.cardinality(localctx.art);
	            }

	            this.state = 2051;
	            this.match(languageParser.OF);
	            {
	                    let location = this.tokenLocation(localctx.compo);
	                    localctx.art.type = { path: [{ id: 'cds.Composition', location }], scope: 'global', location };
	                    this.handleComposition( localctx.art.cardinality, handleTypeCompo );
	                  }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	         localctx.art.target = {}; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssociationCont(art) {
	    let localctx = new TypeAssociationContContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 110, languageParser.RULE_typeAssociationCont);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2080;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 2057;
	            this.match(languageParser.T__1);
	             localctx.art.foreignKeys = this.createDict(); 
	            this.state = 2068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                this.state = 2059;
	                this.foreignKey( localctx.art );
	                this.state = 2065;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 2060;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore("}")) break; 
	                    this.state = 2062;
	                    this.foreignKey( localctx.art );
	                    this.state = 2067;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 2070;
	            this.match(languageParser.T__3);
	             this.finalizeDictOrArray( localctx.art.foreignKeys ); 
	            this.state = 2073;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	                this.state = 2072;
	                this.defaultAndNullability( localctx.art );
	            }

	            break;
	        case 53:
	            this.state = 2075;
	            this.match(languageParser.ON);
	            this.state = 2076;
	            localctx.cond = this.condition();
	             localctx.art.on=localctx.cond.expr; 
	            break;
	        case 50:
	        case 51:
	        case 76:
	            this.state = 2079;
	            this.defaultAndNullability( localctx.art );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssociationElementCont(art) {
	    let localctx = new TypeAssociationElementContContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 112, languageParser.RULE_typeAssociationElementCont);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2105;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 2:
	        	this.state = 2082;
	        	this.match(languageParser.T__1);
	        	 localctx.art.foreignKeys = this.createDict(); 
	        	this.state = 2093;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===26 || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	        	    this.state = 2084;
	        	    this.foreignKey( localctx.art );
	        	    this.state = 2090;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	    while(_la===3) {
	        	        this.state = 2085;
	        	        this.match(languageParser.T__2);
	        	         if (this.isStraightBefore("}")) break; 
	        	        this.state = 2087;
	        	        this.foreignKey( localctx.art );
	        	        this.state = 2092;
	        	        this._errHandler.sync(this);
	        	        _la = this._input.LA(1);
	        	    }
	        	}

	        	this.state = 2095;
	        	this.match(languageParser.T__3);
	        	 this.finalizeDictOrArray( localctx.art.foreignKeys ); 
	        	this.state = 2098;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108867) !== 0)) {
	        	    this.state = 2097;
	        	    this.defaultAndNullability( localctx.art );
	        	}

	        	break;
	        case 53:
	        	this.state = 2100;
	        	this.match(languageParser.ON);
	        	this.state = 2101;
	        	localctx.cond = this.condition();
	        	 localctx.art.on=localctx.cond.expr; 
	        	break;
	        case 50:
	        case 51:
	        case 76:
	        	this.state = 2104;
	        	this.defaultAndNullability( localctx.art );
	        	break;
	        case 1:
	        case 4:
	        case 26:
	        	break;
	        default:
	        	break;
	        }
	         this.docComment( localctx.art ); 
	        this.state = 2111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 2108;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 2113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2114;
	        this.requiredSemi();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeToOne(art) {
	    let localctx = new TypeToOneContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 114, languageParser.RULE_typeToOne);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2116;
	        localctx.one = this.match(languageParser.ONE);
	         this.setMaxCardinality( localctx.art, { literal: 'number', val: 1 }, localctx.one ); 
	        this.state = 2118;
	        this.simplePath( localctx.art.target, 'artref' );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeToMany(art) {
	    let localctx = new TypeToManyContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 116, languageParser.RULE_typeToMany);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2120;
	        localctx.many = this.match(languageParser.MANY);
	         this.setMaxCardinality( localctx.art, { literal: 'string', val: '*' }, localctx.many ); 
	        this.state = 2122;
	        this.simplePath( localctx.art.target, 'artref' );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinality(art) {
	    let localctx = new CardinalityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 118, languageParser.RULE_cardinality);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2124;
	        localctx.lbrack = this.match(languageParser.T__10);
	         localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	        this.state = 2146;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 12:
	        	this.state = 2126;
	        	this.match(languageParser.T__11);
	        	 localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	        	this.state = 2130;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===3) {
	        	    this.state = 2128;
	        	    this.match(languageParser.T__2);
	        	    this.state = 2129;
	        	    this.targetCardinality( localctx.card );
	        	}

	        	break;
	        case 59:
	        	this.state = 2132;
	        	this.match(languageParser.Number);
	        	 localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	        	this.state = 2144;
	        	this._errHandler.sync(this);
	        	switch (this._input.LA(1)) {
	        	case 3:
	        		this.state = 2134;
	        		this.match(languageParser.T__2);
	        		this.state = 2135;
	        		this.targetCardinality( localctx.card );
	        		break;
	        	case 13:
	        		this.state = 2136;
	        		this.match(languageParser.T__12);
	        		 localctx.card.targetMin = localctx.card.targetMax; 
	        		this.state = 2142;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case 12:
	        		    this.state = 2138;
	        		    this.match(languageParser.T__11);
	        		     localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	        		    break;
	        		case 59:
	        		    this.state = 2140;
	        		    this.match(languageParser.Number);
	        		     localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	case 14:
	        		break;
	        	default:
	        		break;
	        	}
	        	break;
	        case 14:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2148;
	        this.match(languageParser.T__13);
	        this._ctx.stop = this._input.LT(-1);
	         localctx.art.cardinality = this.attachLocation(localctx.card); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	targetCardinality(card) {
	    let localctx = new TargetCardinalityContext(this, this._ctx, this.state, card);
	    this.enterRule(localctx, 120, languageParser.RULE_targetCardinality);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.card.sourceMax = localctx.card.targetMax; 
	        this.state = 2165;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	            this.state = 2151;
	            this.match(languageParser.T__11);
	             localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	            break;
	        case 59:
	            this.state = 2153;
	            this.match(languageParser.Number);
	             localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	            this.state = 2163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 2155;
	                this.match(languageParser.T__12);
	                 localctx.card.targetMin = localctx.card.targetMax; 
	                this.state = 2161;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 12:
	                    this.state = 2157;
	                    this.match(languageParser.T__11);
	                     localctx.card.targetMax = this.valueWithTokenLocation( '*' ); 
	                    break;
	                case 59:
	                    this.state = 2159;
	                    this.match(languageParser.Number);
	                     localctx.card.targetMax = this.unsignedIntegerLiteral(); 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optInvisibleNullability(art) {
	    let localctx = new OptInvisibleNullabilityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 122, languageParser.RULE_optInvisibleNullability);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.setLocalTokenForId( 1, { 'NOT': 'HelperToken1', 'NULL': 'HelperToken2' } ); 
	        this.state = 2173;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 144:
	        	this.state = 2168;
	        	localctx.n1 = this.match(languageParser.HelperToken1);
	        	this.state = 2169;
	        	localctx.n2 = this.match(languageParser.NULL);
	        	 this.setNullability( localctx.art, localctx.n1, localctx.n2 ); 
	        	break;
	        case 145:
	        	this.state = 2171;
	        	localctx.n1 = this.match(languageParser.HelperToken2);
	        	 this.setNullability( localctx.art, localctx.n1, null ); 
	        	break;
	        case 1:
	        case 4:
	        case 8:
	        case 26:
	        case 50:
	        case 51:
	        case 76:
	        case 84:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullability(art) {
	    let localctx = new NullabilityContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 124, languageParser.RULE_nullability);
	    try {
	        this.state = 2178;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2175;
	            localctx.n1 = this.match(languageParser.NOT);
	            this.state = 2176;
	            localctx.n2 = this.match(languageParser.NULL);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2177;
	            localctx.n1 = this.match(languageParser.NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.setNullability( localctx.art, localctx.n1, localctx.n2 ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreignKey(outer) {
	    let localctx = new ForeignKeyContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 126, languageParser.RULE_foreignKey);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.docComment( localctx.art ); 
	        this.state = 2184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 2181;
	            this.annotationAssignment_ll1( localctx.art );
	            this.state = 2186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2187;
	        this.simplePath( localctx.elem, 'ref' );
	         localctx.art.targetElement = localctx.elem; 
	        this.state = 2191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40) {
	            this.state = 2189;
	            this.match(languageParser.AS);
	            this.state = 2190;
	            localctx.name = this.ident('Key');
	        }

	         if (!localctx.name) this.classifyImplicitName( 'KeyImplicit', localctx.art.targetElement ); 
	         this.addDef( localctx.art, localctx.outer, 'foreignKeys', 'key', (localctx.name) ? localctx.name.id : localctx.elem.path ); 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeTypeOf(art) {
	    let localctx = new TypeTypeOfContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 128, languageParser.RULE_typeTypeOf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2196;
	        localctx.t = this.match(languageParser.TYPE);
	        this.state = 2197;
	        localctx.o = this.match(languageParser.OF);
	         localctx.art.type = { scope: 'typeOf' }; 
	        this.state = 2199;
	        this.simplePath( localctx.art.type, 'ref' );
	        this.state = 2203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 2200;
	            this.match(languageParser.T__4);
	             localctx.art.type.scope = localctx.art.type.path.length; 
	            this.state = 2202;
	            this.simplePath( localctx.art.type, 'ref');
	        }

	         if (localctx.art.type.scope === 'typeOf')
	              // Better error locations and much simpler code if we consider it as a path breakout:
	              localctx.art.type.path.unshift( { id: 'type of', location: this.tokenLocation( localctx.t, localctx.o )} );
	            
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art.type); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeRefOptArgs(art) {
	    let localctx = new TypeRefOptArgsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 130, languageParser.RULE_typeRefOptArgs);
	     localctx.art.type = {}; 
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2207;
	        this.simplePath( localctx.art.type, 'artref' );
	        this.state = 2212;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 6:
	        	this.state = 2208;
	        	this.typeRefArgs( localctx.art );
	        	break;
	        case 5:
	        	this.state = 2209;
	        	this.match(languageParser.T__4);
	        	 localctx.art.type.scope = localctx.art.type.path.length; 
	        	this.state = 2211;
	        	this.simplePath( localctx.art.type, 'ref');
	        	break;
	        case 1:
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 26:
	        case 40:
	        case 46:
	        case 50:
	        case 51:
	        case 76:
	        case 84:
	        case 144:
	        case 145:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeRefArgs(art) {
	    let localctx = new TypeRefArgsContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 132, languageParser.RULE_typeRefArgs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2214;
	        localctx.paren = this.match(languageParser.T__5);
	         localctx.art['$'+'typeArgs'] = this.createArray(); 
	        this.state = 2242;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.state = 2216;
	            localctx.head = this.match(languageParser.Number);
	             localctx.art['$'+'typeArgs'].push( this.unsignedIntegerLiteral() ); 
	            this.state = 2230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2218;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 2226;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 136:
	                    this.state = 2220;
	                    localctx.v = this.match(languageParser.VARIABLE);
	                     localctx.art['$'+'typeArgs'].push(
	                                { literal: 'string', val: 'variable', location: this.tokenLocation(localctx.v) } );
	                              
	                    break;
	                case 92:
	                    this.state = 2222;
	                    localctx.f = this.match(languageParser.FLOATING);
	                     localctx.art['$'+'typeArgs'].push(
	                                { literal: 'string', val: 'floating', location: this.tokenLocation(localctx.f) } );
	                              
	                    break;
	                case 59:
	                    this.state = 2224;
	                    localctx.tail = this.match(languageParser.Number);
	                     localctx.art['$'+'typeArgs'].push( this.unsignedIntegerLiteral() ); 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2232;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.state = 2233;
	            this.typeNamedArg( localctx.art );
	            this.state = 2239;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2234;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 2236;
	                this.typeNamedArg( localctx.art );
	                this.state = 2241;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2244;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.art['$'+'typeArgs']); 
	        this._ctx.stop = this._input.LT(-1);
	         this.checkTypeArgs(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNamedArgList(art) {
	    let localctx = new TypeNamedArgListContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 134, languageParser.RULE_typeNamedArgList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2247;
	        localctx.paren = this.match(languageParser.T__5);
	        this.state = 2248;
	        this.typeNamedArg( localctx.art );
	        this.state = 2254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2249;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore(')')) break; 
	            this.state = 2251;
	            this.typeNamedArg( localctx.art );
	            this.state = 2256;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2257;
	        this.match(languageParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNamedArg(art) {
	    let localctx = new TypeNamedArgContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 136, languageParser.RULE_typeNamedArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2259;
	        localctx.name = this.ident('typeparamname');
	        this.state = 2260;
	        this.match(languageParser.T__4);
	         if (localctx.name.id && this.checkTypeFacet( localctx.art, localctx.name.id ))
	                localctx.arg =  localctx.name.id.id
	            
	        this.state = 2268;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.state = 2262;
	            this.match(languageParser.Number);
	             if (localctx.arg && localctx.art && localctx.name.id) {
	                      localctx.art[localctx.arg] = this.unsignedIntegerLiteral();
	                    }
	                  
	            break;
	        case 136:
	            this.state = 2264;
	            localctx.v = this.match(languageParser.VARIABLE);
	             if (localctx.arg && localctx.art && localctx.name.id) {
	                      localctx.art[localctx.arg] = { literal: 'string', val: 'variable', location: this.tokenLocation(localctx.v) };
	                    }
	                  
	            break;
	        case 92:
	            this.state = 2266;
	            localctx.f = this.match(languageParser.FLOATING);
	             if (localctx.arg && localctx.art && localctx.name.id) {
	                      localctx.art[localctx.arg] = { literal: 'string', val: 'floating', location: this.tokenLocation(localctx.f) };
	                    }
	                  
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryEOF() {
	    let localctx = new QueryEOFContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, languageParser.RULE_queryEOF);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2270;
	        localctx.q = this.queryExpression();
	         localctx.query =  localctx.q.query 
	        this.state = 2273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 2272;
	            this.match(languageParser.T__0);
	        }

	        this.state = 2275;
	        this.match(languageParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionSpec() {
	    let localctx = new ProjectionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, languageParser.RULE_projectionSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2277;
	        localctx.proj = this.match(languageParser.PROJECTION);
	        this.state = 2278;
	        this.match(languageParser.ON);

	              localctx.src =  { path: [] }
	              localctx.query =  { op: this.valueWithTokenLocation( 'SELECT', localctx.proj ), from: localctx.src, location: this.startLocation() }
	            
	        this.state = 2280;
	        this.fromPath( localctx.src, 'artref');
	        this.state = 2284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 2281;
	            this.match(languageParser.T__4);
	             localctx.src.scope = localctx.src.path.length; 
	            this.state = 2283;
	            this.fromPath( localctx.src, 'ref');
	        }

	        this.state = 2290;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40) {
	            this.state = 2286;
	            this.match(languageParser.AS);
	            this.state = 2287;
	            localctx.aliasName = this.ident('FromAlias');
	             localctx.src.name = localctx.aliasName.id 
	        }

	         if (!localctx.src.name) this.classifyImplicitName( localctx.src.scope ? 'FromElemImplicit' : 'FromImplicit', localctx.src ); 
	        this.state = 2294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 2293;
	            this.bracedSelectItemListDef( localctx.query, 'columns' );
	        }

	        this.state = 2297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 2296;
	            this.excludingClause( localctx.query );
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionClauses(query) {
	    let localctx = new ProjectionClausesContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 142, languageParser.RULE_projectionClauses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 2299;
	            this.match(languageParser.WHERE);
	            this.state = 2300;
	            localctx.cond = this.condition();
	             localctx.query.where = localctx.cond.expr; 
	        }

	        this.state = 2318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===96) {
	            this.state = 2305;
	            this.match(languageParser.GROUP);
	            this.state = 2306;
	            this.match(languageParser.BY);
	            this.state = 2307;
	            localctx.e1 = this.expression();
	             localctx.query.groupBy = [ localctx.e1.expr ]; 
	            this.state = 2315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2309;
	                this.match(languageParser.T__2);
	                this.state = 2310;
	                localctx.en = this.expression();
	                 localctx.query.groupBy.push( localctx.en.expr ); 
	                this.state = 2317;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 2320;
	            this.match(languageParser.HAVING);
	            this.state = 2321;
	            localctx.having = this.condition();
	             localctx.query.having = localctx.having.expr; 
	        }

	        this.state = 2329;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 2326;
	            localctx.ob = this.orderByClause( localctx.query );
	             localctx.query =  localctx.ob.query 
	        }

	        this.state = 2334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	            this.state = 2331;
	            localctx.lc = this.limitClause( localctx.query );
	             localctx.query =  localctx.lc.query 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, languageParser.RULE_queryExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2336;
	        localctx.qt1 = this.queryPrimary();
	         localctx.query =  localctx.qt1.query 
	        this.state = 2341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 270796801) !== 0) || _la===132) {
	            this.state = 2338;
	            localctx.qec = this.queryExpressionCont( localctx.query );
	             if (localctx.qec.query) localctx.query =  localctx.qec.query 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionCont(inQuery) {
	    let localctx = new QueryExpressionContContext(this, this._ctx, this.state, inQuery);
	    this.enterRule(localctx, 146, languageParser.RULE_queryExpressionCont);
	    var _la = 0;
	    try {
	        this.state = 2389;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	        case 99:
	        case 109:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	             if (!localctx.inQuery) return localctx; 
	            this.state = 2365; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2360;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 132:
	                    this.state = 2344;
	                    localctx.op = this.match(languageParser.UNION);
	                    this.state = 2346;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===38 || _la===44) {
	                        this.state = 2345;
	                        localctx.quant = this._input.LT(1);
	                        _la = this._input.LA(1);
	                        if(!(_la===38 || _la===44)) {
	                            localctx.quant = this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        }
	                    }

	                    break;
	                case 88:
	                    this.state = 2348;
	                    localctx.op = this.match(languageParser.EXCEPT);
	                    this.state = 2350;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===44) {
	                        this.state = 2349;
	                        localctx.quant = this.match(languageParser.DISTINCT);
	                    }

	                    break;
	                case 109:
	                    this.state = 2352;
	                    localctx.op = this.match(languageParser.MINUS);
	                    this.state = 2354;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===44) {
	                        this.state = 2353;
	                        localctx.quant = this.match(languageParser.DISTINCT);
	                    }

	                    break;
	                case 99:
	                    this.state = 2356;
	                    localctx.op = this.match(languageParser.INTERSECT);
	                    this.state = 2358;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===44) {
	                        this.state = 2357;
	                        localctx.quant = this.match(languageParser.DISTINCT);
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2362;
	                localctx.qp = this.queryPrimary();
	                 localctx.query =  this.leftAssocBinaryOp( localctx.query, localctx.qp.query, localctx.op, localctx.quant, 'quantifier' )
	                        localctx.quant = null; 
	                this.state = 2367; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 2099201) !== 0) || _la===132);
	            this.state = 2372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 2369;
	                localctx.ob = this.orderByClause( localctx.query );
	                 localctx.query =  localctx.ob.query 
	            }

	            this.state = 2377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 2374;
	                localctx.lc = this.limitClause( localctx.query );
	                 localctx.query =  localctx.lc.query 
	            }

	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2379;
	            localctx.ob = this.orderByClause( localctx.query );
	             localctx.query =  localctx.ob.query 
	            this.state = 2384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 2381;
	                localctx.lc = this.limitClause( localctx.query );
	                 localctx.query =  localctx.lc.query 
	            }

	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2386;
	            localctx.lc = this.limitClause( localctx.query );
	             localctx.query =  localctx.lc.query 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryPrimary() {
	    let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, languageParser.RULE_queryPrimary);
	    try {
	        this.state = 2399;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2391;
	            localctx.open = this.match(languageParser.T__5);
	            this.state = 2392;
	            localctx.qe = this.queryExpression();
	            this.state = 2393;
	            localctx.close = this.match(languageParser.T__6);
	             localctx.query =  this.surroundByParens( localctx.qe.query, localctx.open, localctx.close ) 
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2396;
	            localctx.qpnp = this.selectQuery();
	             localctx.query =  localctx.qpnp.query 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuery() {
	    let localctx = new SelectQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, languageParser.RULE_selectQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2401;
	        localctx.select = this.match(languageParser.SELECT);
	         localctx.query =  { op: this.valueWithTokenLocation( 'SELECT', localctx.select ), location: this.startLocation() } 
	        this.state = 2446;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	            this.state = 2403;
	            this.match(languageParser.FROM);
	            this.state = 2404;
	            this.querySource( localctx.query );
	            this.state = 2417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===110) {
	                this.state = 2405;
	                localctx.mixin = this.match(languageParser.MIXIN);
	                this.state = 2406;
	                this.match(languageParser.T__1);
	                 localctx.query.mixin = this.createDict(); 
	                this.state = 2411;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0)) {
	                    this.state = 2408;
	                    this.mixinElementDef( localctx.query );
	                    this.state = 2413;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2414;
	                this.match(languageParser.T__3);
	                 this.finalizeDictOrArray( localctx.query.mixin ); 
	                this.state = 2416;
	                this.match(languageParser.INTO);
	            }

	            this.state = 2421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38 || _la===44) {
	                this.state = 2419;
	                localctx.ad = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===38 || _la===44)) {
	                    localctx.ad = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 localctx.query.quantifier = this.valueWithTokenLocation( (localctx.ad == null ? null : localctx.ad.text).toLowerCase(), localctx.ad ); 
	            }

	            this.state = 2424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 2423;
	                this.bracedSelectItemListDef( localctx.query, 'columns' );
	            }

	            this.state = 2427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===89) {
	                this.state = 2426;
	                this.excludingClause( localctx.query );
	            }

	            break;
	        case 2:
	        case 5:
	        case 6:
	        case 9:
	        case 10:
	        case 12:
	        case 16:
	        case 26:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 48:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 142:
	            this.state = 2431;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38 || _la===44) {
	                this.state = 2429;
	                localctx.ad = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===38 || _la===44)) {
	                    localctx.ad = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 localctx.query.quantifier = this.valueWithTokenLocation( (localctx.ad == null ? null : localctx.ad.text).toLowerCase(), localctx.ad ); 
	            }

	             localctx.query.columns = []; 
	            this.state = 2434;
	            this.selectItemDef( localctx.query.columns );
	            this.state = 2440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2435;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 2437;
	                this.selectItemDef( localctx.query.columns );
	                this.state = 2442;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2443;
	            this.match(languageParser.FROM);
	            this.state = 2444;
	            this.querySource( localctx.query );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 2448;
	            this.match(languageParser.WHERE);
	            this.state = 2449;
	            localctx.cond = this.condition();
	             localctx.query.where = localctx.cond.expr; 
	        }

	        this.state = 2467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===96) {
	            this.state = 2454;
	            this.match(languageParser.GROUP);
	            this.state = 2455;
	            this.match(languageParser.BY);
	            this.state = 2456;
	            localctx.e1 = this.expression();
	             localctx.query.groupBy = [ localctx.e1.expr ]; 
	            this.state = 2464;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2458;
	                this.match(languageParser.T__2);
	                this.state = 2459;
	                localctx.en = this.expression();
	                 localctx.query.groupBy.push( localctx.en.expr ); 
	                this.state = 2466;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 2469;
	            this.match(languageParser.HAVING);
	            this.state = 2470;
	            localctx.having = this.condition();
	             localctx.query.having = localctx.having.expr; 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySource(query) {
	    let localctx = new QuerySourceContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 152, languageParser.RULE_querySource);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2475;
	        localctx.t1 = this.tableExpression();
	         localctx.query.from = localctx.t1.table; 
	        this.state = 2486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	             const location = this.tokenLocation( this.getCurrentToken() );
	                    localctx.query.from = { op: { val: 'join', location },
	                                    join: { val: 'cross', location },
	                                    args: [localctx.t1.table] }; 
	            this.state = 2482; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2478;
	                this.match(languageParser.T__2);
	                this.state = 2479;
	                localctx.tn = this.tableExpression();
	                 this.pushItem(localctx.query.from.args, localctx.tn.table ); 
	                this.state = 2484; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===3);
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.query.from); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableExpression() {
	    let localctx = new TableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, languageParser.RULE_tableExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2488;
	        localctx.qt = this.tableTerm();
	         localctx.table =  localctx.qt.table 
	        this.state = 2493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 74)) & ~0x1f) === 0 && ((1 << (_la - 74)) & 1360003073) !== 0) || _la===124) {
	            this.state = 2490;
	            localctx.tec = this.tableExpressionCont( localctx.table );
	             if ( localctx.tec.table ) localctx.table =  localctx.tec.table 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.table); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableExpressionCont(inTable) {
	    let localctx = new TableExpressionContContext(this, this._ctx, this.state, inTable);
	    this.enterRule(localctx, 156, languageParser.RULE_tableExpressionCont);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2508; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2508;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 94:
	            case 98:
	            case 102:
	            case 104:
	            case 124:
	                this.state = 2495;
	                localctx.join = this.joinOp( localctx.table );
	                 localctx.table =  localctx.join.table 
	                this.state = 2497;
	                localctx.te = this.tableExpression();
	                 localctx.table ??= {}; this.pushItem(localctx.table.args, localctx.te.table ); 
	                this.state = 2499;
	                this.match(languageParser.ON);
	                this.state = 2500;
	                localctx.cond = this.condition();
	                 localctx.table.on = localctx.cond.expr; 
	                break;
	            case 74:
	                this.state = 2503;
	                localctx.crj = this.match(languageParser.CROSS);
	                this.state = 2504;
	                localctx.jn = this.match(languageParser.JOIN);
	                this.state = 2505;
	                localctx.t = this.tableTerm();
	                 if (!localctx.table) { localctx.table =  {} } localctx.table =  this.leftAssocBinaryOp( localctx.table, localctx.t.table, localctx.jn, localctx.crj, 'join' ) 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2510; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 74)) & ~0x1f) === 0 && ((1 << (_la - 74)) & 1360003073) !== 0) || _la===124);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableTerm() {
	    let localctx = new TableTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, languageParser.RULE_tableTerm);
	    try {
	        this.state = 2518;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2512;
	            localctx.ttnp = this.fromRefWithOptAlias();
	             localctx.table =  localctx.ttnp.table 
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2515;
	            localctx.ttp = this.tableOrQueryParenthesis();
	             localctx.table =  localctx.ttp.table 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.table); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromRefWithOptAlias() {
	    let localctx = new FromRefWithOptAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, languageParser.RULE_fromRefWithOptAlias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.table =  { path: [] } 
	        this.state = 2521;
	        localctx.f = this.fromPath( localctx.table, 'artref');
	         if (localctx.f.dotAfterFilter)
	                this.warning( 'syntax-invalid-path-separator', localctx.f.dotAfterFilter,
	                              { '#': 'dot', code: '.', newcode: ':' } );
	            
	        this.state = 2526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	             if (!localctx.table.scope)
	                      localctx.table.scope = localctx.table.path.length;
	                    else
	                      this.warning( 'syntax-invalid-path-separator', this.getCurrentToken(),
	                                  { '#': 'colon', code: ':', newcode: '.' } );
	                  
	            this.state = 2524;
	            this.match(languageParser.T__4);
	            this.state = 2525;
	            this.fromPath( localctx.table, 'ref');
	        }

	        this.state = 2535;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 40:
	        	this.state = 2528;
	        	this.match(languageParser.AS);
	        	this.state = 2529;
	        	localctx.n1 = this.ident('FromAlias');
	        	 localctx.table.name = localctx.n1.id; 
	        	break;
	        case 138:
	        	this.state = 2532;
	        	localctx.n2 = this.identNoKeyword('FromAlias');
	        	 localctx.table.name = this.fragileAlias( localctx.n2.id ); 
	        	break;
	        case -1:
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 38:
	        case 44:
	        case 53:
	        case 57:
	        case 62:
	        case 74:
	        case 88:
	        case 89:
	        case 94:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 102:
	        case 104:
	        case 106:
	        case 109:
	        case 110:
	        case 116:
	        case 124:
	        case 132:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	         if (!localctx.table.name) this.classifyImplicitName( localctx.table.scope ? 'FromElemImplicit' : 'FromImplicit', localctx.table ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrQueryParenthesis() {
	    let localctx = new TableOrQueryParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, languageParser.RULE_tableOrQueryParenthesis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2539;
	        localctx.open = this.match(languageParser.T__5);
	        this.state = 2561;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.state = 2540;
	            localctx.ttp = this.tableOrQueryParenthesis();
	             localctx.table =  localctx.ttp.table;  localctx.kind =  localctx.ttp.kind; 
	            this.state = 2545;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 74)) & ~0x1f) === 0 && ((1 << (_la - 74)) & 1393573889) !== 0) || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 67372041) !== 0)) {
	                this.state = 2542;
	                localctx.qtec = this.tableOrQueryExpressionCont( localctx.table, localctx.kind );
	                 localctx.table =  localctx.qtec.table;  localctx.kind =  localctx.qtec.kind; 
	            }

	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.state = 2547;
	            localctx.ttnp = this.fromRefWithOptAlias();
	             localctx.table =  localctx.ttnp.table; localctx.kind =  'table-expr' 
	            this.state = 2552;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 74)) & ~0x1f) === 0 && ((1 << (_la - 74)) & 1360003073) !== 0) || _la===124) {
	                this.state = 2549;
	                localctx.tec = this.tableExpressionCont( localctx.table );
	                 if (localctx.tec.table) { localctx.table =  localctx.tec.table } 
	            }

	            break;
	        case 54:
	            this.state = 2554;
	            localctx.qpnp = this.selectQuery();
	             localctx.table =  localctx.qpnp.query; localctx.kind =  'query-expr' 
	            this.state = 2559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 270796801) !== 0) || _la===132) {
	                this.state = 2556;
	                localctx.qec = this.queryExpressionCont( localctx.table );
	                 if (localctx.qec.query) { localctx.table =  localctx.qec.query } 
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2563;
	        localctx.close = this.match(languageParser.T__6);
	         const asQuery = localctx.kind === 'query-expr';
	              localctx.table =  this.surroundByParens( localctx.table.query || localctx.table, localctx.open, localctx.close, asQuery )
	              // alias only for sub-queries; avoids `AS` in code completion
	              if (!asQuery) { return localctx; }
	            
	        this.state = 2574;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 40:
	        	this.state = 2565;
	        	this.match(languageParser.AS);
	        	this.state = 2566;
	        	localctx.a1 = this.ident('FromAlias');
	        	 localctx.table.name = localctx.a1.id 
	        	 localctx.kind =  'table-expr' 
	        	break;
	        case 138:
	        	this.state = 2570;
	        	localctx.a2 = this.identNoKeyword('FromAlias');
	        	 localctx.table.name = this.fragileAlias( localctx.a2.id, true ); 
	        	 localctx.kind =  'table-expr' 
	        	break;
	        case -1:
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 38:
	        case 44:
	        case 53:
	        case 57:
	        case 62:
	        case 74:
	        case 88:
	        case 89:
	        case 94:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 102:
	        case 104:
	        case 106:
	        case 109:
	        case 110:
	        case 116:
	        case 124:
	        case 132:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrQueryExpressionCont(inTable, inKind) {
	    let localctx = new TableOrQueryExpressionContContext(this, this._ctx, this.state, inTable, inKind);
	    this.enterRule(localctx, 164, languageParser.RULE_tableOrQueryExpressionCont);
	    try {
	        this.state = 2583;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	        case 99:
	        case 106:
	        case 109:
	        case 116:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	             if (localctx.inKind !== 'query-expr') { return localctx; }
	                  localctx.table =  localctx.table.query || localctx.table 
	            this.state = 2577;
	            localctx.qec = this.queryExpressionCont( localctx.table );
	             localctx.table =  localctx.qec.query; localctx.kind =  'query-expr'; 
	            break;
	        case 74:
	        case 94:
	        case 98:
	        case 102:
	        case 104:
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2580;
	            localctx.tec = this.tableExpressionCont( localctx.table );
	             localctx.table =  localctx.tec.table; localctx.kind =  'table-expr'; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromPath(qp, idkind) {
	    let localctx = new FromPathContext(this, this._ctx, this.state, qp, idkind);
	    this.enterRule(localctx, 166, languageParser.RULE_fromPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2585;
	        localctx.id = this.ident(localctx.idkind);
	         this.pushIdent( localctx.qp.path, localctx.id.id ); 
	        this.state = 2596;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 6:
	        	this.state = 2587;
	        	this.fromArguments( localctx.id.id );
	        	this.state = 2589;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===11) {
	        	    this.state = 2588;
	        	    this.cardinalityAndFilter( localctx.id.id );
	        	}

	        	 localctx.dotAfterFilter =  false 
	        	break;
	        case 11:
	        	this.state = 2593;
	        	this.cardinalityAndFilter( localctx.id.id );
	        	 localctx.dotAfterFilter =  false 
	        	break;
	        case -1:
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 7:
	        case 15:
	        case 26:
	        case 38:
	        case 40:
	        case 44:
	        case 53:
	        case 57:
	        case 60:
	        case 61:
	        case 62:
	        case 64:
	        case 65:
	        case 68:
	        case 73:
	        case 74:
	        case 77:
	        case 83:
	        case 85:
	        case 88:
	        case 89:
	        case 90:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 102:
	        case 104:
	        case 106:
	        case 109:
	        case 110:
	        case 116:
	        case 124:
	        case 127:
	        case 131:
	        case 132:
	        case 135:
	        case 137:
	        case 138:
	        case 146:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===15) {
	             if (localctx.dotAfterFilter === false) {
	                    localctx.dotAfterFilter =  this.getCurrentToken()
	                    if (!localctx.qp.scope) localctx.qp.scope = localctx.qp.path.length;
	                  } 
	            this.state = 2599;
	            this.match(languageParser.T__14);
	            this.state = 2600;
	            localctx.id = this.ident(localctx.idkind);
	             this.pushIdent( localctx.qp.path, localctx.id.id ); 
	            this.state = 2611;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 6:
	            	this.state = 2602;
	            	this.fromArguments( localctx.id.id );
	            	this.state = 2604;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===11) {
	            	    this.state = 2603;
	            	    this.cardinalityAndFilter( localctx.id.id );
	            	}

	            	 if (!localctx.dotAfterFilter) localctx.dotAfterFilter =  false 
	            	break;
	            case 11:
	            	this.state = 2608;
	            	this.cardinalityAndFilter( localctx.id.id );
	            	 if (!localctx.dotAfterFilter) localctx.dotAfterFilter =  false 
	            	break;
	            case -1:
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 7:
	            case 15:
	            case 26:
	            case 38:
	            case 40:
	            case 44:
	            case 53:
	            case 57:
	            case 60:
	            case 61:
	            case 62:
	            case 64:
	            case 65:
	            case 68:
	            case 73:
	            case 74:
	            case 77:
	            case 83:
	            case 85:
	            case 88:
	            case 89:
	            case 90:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 102:
	            case 104:
	            case 106:
	            case 109:
	            case 110:
	            case 116:
	            case 124:
	            case 127:
	            case 131:
	            case 132:
	            case 135:
	            case 137:
	            case 138:
	            case 146:
	            case 152:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 2617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.qp); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromArguments(pathStep) {
	    let localctx = new FromArgumentsContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 168, languageParser.RULE_fromArguments);
	     if (!localctx.pathStep) localctx.pathStep =  {} 
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2618;
	        this.match(languageParser.T__5);
	         localctx.pathStep.args = this.createDict(); localctx.pathStep['$'+'syntax'] = ':'; 
	        this.state = 2620;
	        localctx.name = this.ident('paramname');
	        this.state = 2621;
	        this.match(languageParser.T__4);
	        this.state = 2622;
	        this.namedExpression( localctx.pathStep, localctx.name.id );
	        this.state = 2631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2623;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore(')')) break; 
	            this.state = 2625;
	            localctx.name = this.ident('paramname');
	            this.state = 2626;
	            this.match(languageParser.T__4);
	            this.state = 2627;
	            this.namedExpression( localctx.pathStep, localctx.name.id );
	            this.state = 2633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2634;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.pathStep.args ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	excludingClause(query) {
	    let localctx = new ExcludingClauseContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 170, languageParser.RULE_excludingClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2637;
	        this.match(languageParser.EXCLUDING);
	        this.state = 2638;
	        this.match(languageParser.T__1);
	         localctx.query.excludingDict = this.createDict(); 
	        this.state = 2640;
	        this.projectionExclusion( localctx.query );
	        this.state = 2646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2641;
	            this.match(languageParser.T__2);
	             if (this.isStraightBefore("}")) break; 
	            this.state = 2643;
	            this.projectionExclusion( localctx.query );
	            this.state = 2648;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2649;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.query.excludingDict ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionExclusion(outer) {
	    let localctx = new ProjectionExclusionContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 172, languageParser.RULE_projectionExclusion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2652;
	        localctx.name = this.ident('ref');
	         this.addDef( localctx.art, localctx.outer, 'excludingDict', '', localctx.name.id ); 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinElementDef(outer) {
	    let localctx = new MixinElementDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 174, languageParser.RULE_mixinElementDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2655;
	        localctx.name = this.ident('Mixin');
	        this.state = 2656;
	        this.match(languageParser.T__4);
	        this.state = 2657;
	        this.typeAssociationBase( localctx.art, false );
	         if (localctx.art.type) this.addDef( localctx.art, localctx.outer, 'mixin', 'mixin', localctx.name.id ); 
	        this.state = 2662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2659;
	            this.typeToMany( localctx.art );
	            break;

	        case 2:
	            this.state = 2660;
	            this.typeToOne( localctx.art );
	            break;

	        case 3:
	            this.state = 2661;
	            this.simplePath( localctx.art.target, 'artref' );
	            break;

	        }
	        this.state = 2665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 67108875) !== 0)) {
	            this.state = 2664;
	            this.typeAssociationCont( localctx.art );
	        }

	        this.state = 2667;
	        this.requiredSemi();
	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 1 */ this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemDef(outer) {
	    let localctx = new SelectItemDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 176, languageParser.RULE_selectItemDef);
	    var _la = 0;
	    try {
	        this.state = 2688;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2669;
	            localctx.star = this.match(languageParser.T__11);
	             localctx.outer.push( this.valueWithTokenLocation( '*', localctx.star ) ); 
	            break;
	        case 2:
	        case 5:
	        case 6:
	        case 9:
	        case 10:
	        case 16:
	        case 26:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 48:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 142:
	            this.enterOuterAlt(localctx, 2);
	             localctx.art =  new this.XsnArtifact(); this.docComment( localctx.art ); 
	            this.state = 2675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 2672;
	                this.annotationAssignment_atn( localctx.art );
	                this.state = 2677;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	             this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^([,.:\[@]|as)$/i ) ; 
	            this.state = 2681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===142) {
	                this.state = 2679;
	                localctx.virtual = this.match(languageParser.VIRTUAL);
	                 localctx.art.virtual = this.valueWithTokenLocation( true, localctx.virtual ); 
	            }

	            this.state = 2685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 2683;
	                localctx.key = this.match(languageParser.KEY);
	                 localctx.art.key = this.valueWithTokenLocation( true, localctx.key ); 
	            }

	            this.state = 2687;
	            this.selectItemDefBody( localctx.art, localctx.outer );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.art) this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemDefBody(art, outer) {
	    let localctx = new SelectItemDefBodyContext(this, this._ctx, this.state, art, outer);
	    this.enterRule(localctx, 178, languageParser.RULE_selectItemDefBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         localctx.outer.push( localctx.art ); 
	        this.state = 2731;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 6:
	        case 9:
	        case 10:
	        case 16:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.state = 2691;
	            localctx.e = this.expression();
	             localctx.art.value = localctx.e.expr; 
	            this.state = 2701;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 40:
	                this.state = 2693;
	                localctx.as = this.match(languageParser.AS);
	                this.state = 2694;
	                localctx.n1 = this.ident('ItemAlias');
	                 localctx.art.name = localctx.n1.id; 
	                break;
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	                this.state = 2697;
	                localctx.n2 = this.ident('ItemAlias');
	                 localctx.art.name = this.fragileAlias( localctx.n2.id, true ); 
	                break;
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 26:
	            case 46:
	            case 150:
	                 localctx.alias =  this.classifyImplicitName( 'ItemImplicit', localctx.e.expr ) 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	             if (localctx.art.value && !localctx.art.value.path) this.excludeExpected( ["'.'", "'{'"] );
	                    else if (localctx.art.name) this.excludeExpected( ["'.'"] );
	                  
	            this.state = 2721;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 2:
	            	 this.reportExpandInline( localctx.art, false ); 
	            	this.state = 2705;
	            	this.selectItemInlineList( localctx.art, 'expand' );
	            	this.state = 2707;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===89) {
	            	    this.state = 2706;
	            	    this.excludingClause( localctx.art );
	            	}

	            	break;
	            case 150:
	            	 if (localctx.alias) localctx.alias.token.isIdentifier = localctx.alias.previous; 
	            	 this.reportExpandInline( localctx.art, localctx.as || this._input.LT(-1) ); 
	            	this.state = 2711;
	            	localctx.dot = this.match(languageParser.DOTbeforeBRACE);
	            	 this.reportUnexpectedSpace( localctx.dot, undefined, true ); 
	            	this.state = 2719;
	            	this._errHandler.sync(this);
	            	switch(this._input.LA(1)) {
	            	case 2:
	            	    this.state = 2713;
	            	    this.selectItemInlineList( localctx.art, 'inline' );
	            	    this.state = 2715;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	    if(_la===89) {
	            	        this.state = 2714;
	            	        this.excludingClause( localctx.art );
	            	    }

	            	    break;
	            	case 12:
	            	    this.state = 2717;
	            	    localctx.star = this.match(languageParser.T__11);
	            	     localctx.art.inline = [ this.valueWithTokenLocation( '*', localctx.star ) ]; 
	            	    break;
	            	default:
	            	    throw new antlr4.error.NoViableAltException(this);
	            	}
	            	break;
	            case 3:
	            case 4:
	            case 5:
	            case 26:
	            case 46:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case 2:
	            this.state = 2723;
	            this.selectItemInlineList( localctx.art, 'expand' );
	            this.state = 2725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===89) {
	                this.state = 2724;
	                this.excludingClause( localctx.art );
	            }

	            this.state = 2727;
	            this.match(languageParser.AS);
	            this.state = 2728;
	            localctx.n1 = this.ident('ItemAlias');
	             localctx.art.name = localctx.n1.id; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	         this.docComment( localctx.art ); 
	        this.state = 2737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 2734;
	            this.annotationAssignment_fix( localctx.art );
	            this.state = 2739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2795;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 2740;
	            this.match(languageParser.T__4);
	            this.state = 2793;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2741;
	                localctx.re = this.match(languageParser.REDIRECTED);
	                this.state = 2742;
	                localctx.to = this.match(languageParser.TO);
	                 localctx.art.target = {}; 
	                this.state = 2744;
	                this.simplePath( localctx.art.target, 'artref' );
	                this.state = 2753;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 2:
	                case 50:
	                case 51:
	                case 53:
	                case 76:
	                    this.state = 2745;
	                    this.typeAssociationCont( localctx.art );
	                    break;
	                case 3:
	                case 4:
	                case 26:
	                case 46:
	                     this.docComment( localctx.art ); 
	                    this.state = 2750;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===26) {
	                        this.state = 2747;
	                        this.annotationAssignment_ll1( localctx.art );
	                        this.state = 2752;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 2755;
	                this.typeTypeOf( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 2760;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26) {
	                    this.state = 2757;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 2762;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 3:
	                this.state = 2763;
	                localctx.l = this.match(languageParser.LOCALIZED);
	                 localctx.art.localized = this.valueWithTokenLocation( true, localctx.l ); 
	                this.state = 2765;
	                this.typeRefOptArgs( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 2770;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26) {
	                    this.state = 2767;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 2772;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 4:
	                this.state = 2773;
	                this.typeRefOptArgs( localctx.art );
	                 this.docComment( localctx.art ); 
	                this.state = 2778;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===26) {
	                    this.state = 2775;
	                    this.annotationAssignment_ll1( localctx.art );
	                    this.state = 2780;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 5:
	                 this.classifyImplicitName( 'ItemAssoc', localctx.art.value ); 
	                 localctx.assoc =  this.associationInSelectItem( localctx.art ) 
	                this.state = 2783;
	                this.typeAssociationBase( localctx.assoc, false );
	                this.state = 2787;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2784;
	                    this.typeToMany( localctx.assoc );
	                    break;

	                case 2:
	                    this.state = 2785;
	                    this.typeToOne( localctx.assoc );
	                    break;

	                case 3:
	                    this.state = 2786;
	                    this.simplePath( localctx.assoc.target, 'artref' );
	                    break;

	                }
	                this.state = 2789;
	                this.match(languageParser.ON);
	                this.state = 2790;
	                localctx.cond = this.condition();
	                 localctx.assoc.on = localctx.cond.expr; 
	                break;

	            }
	        }

	        this._ctx.stop = this._input.LT(-1);
	         /* #ATN 2 */ 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracedSelectItemListDef(query) {
	    let localctx = new BracedSelectItemListDefContext(this, this._ctx, this.state, query);
	    this.enterRule(localctx, 180, languageParser.RULE_bracedSelectItemListDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2797;
	        this.match(languageParser.T__1);
	         localctx.query.columns = this.createArray(); 
	        this.state = 2808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 201397860) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4228220435) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 9215) !== 0)) {
	            this.state = 2799;
	            this.selectItemDef( localctx.query.columns );
	            this.state = 2805;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2800;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 2802;
	                this.selectItemDef( localctx.query.columns );
	                this.state = 2807;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2810;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.query.columns ); this.insertSemicolon(); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemInlineList(art, clause) {
	    let localctx = new SelectItemInlineListContext(this, this._ctx, this.state, art, clause);
	    this.enterRule(localctx, 182, languageParser.RULE_selectItemInlineList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2813;
	        this.match(languageParser.T__1);
	         localctx.art[localctx.clause] = this.createArray(); 
	        this.state = 2824;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 201397860) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4228187667) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 1023) !== 0)) {
	            this.state = 2815;
	            this.selectItemInlineDef( localctx.art[localctx.clause] );
	            this.state = 2821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2816;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore("}")) break; 
	                this.state = 2818;
	                this.selectItemInlineDef( localctx.art[localctx.clause] );
	                this.state = 2823;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2826;
	        this.match(languageParser.T__3);
	         this.finalizeDictOrArray( localctx.art[localctx.clause] ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemInlineDef(outer) {
	    let localctx = new SelectItemInlineDefContext(this, this._ctx, this.state, outer);
	    this.enterRule(localctx, 184, languageParser.RULE_selectItemInlineDef);
	    var _la = 0;
	    try {
	        this.state = 2839;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2829;
	            localctx.star = this.match(languageParser.T__11);
	             localctx.outer.push( this.valueWithTokenLocation( '*', localctx.star ) ); 
	            break;
	        case 2:
	        case 5:
	        case 6:
	        case 9:
	        case 10:
	        case 16:
	        case 26:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.enterOuterAlt(localctx, 2);
	             localctx.art =  new this.XsnArtifact(); this.docComment( localctx.art ); 
	            this.state = 2835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===26) {
	                this.state = 2832;
	                this.annotationAssignment_atn( localctx.art );
	                this.state = 2837;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2838;
	            this.selectItemDefBody( localctx.art, localctx.outer );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.art) this.attachLocation( localctx.art ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause(inQuery) {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state, inQuery);
	    this.enterRule(localctx, 186, languageParser.RULE_orderByClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2841;
	        this.match(languageParser.ORDER);
	        this.state = 2842;
	        this.match(languageParser.BY);
	         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
	        this.state = 2844;
	        localctx.ob1 = this.orderBySpec();
	         localctx.query.orderBy = [ localctx.ob1.ob ]; 
	        this.state = 2852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2846;
	            this.match(languageParser.T__2);
	            this.state = 2847;
	            localctx.obn = this.orderBySpec();
	             localctx.query.orderBy.push( localctx.obn.ob ); 
	            this.state = 2854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause(inQuery) {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state, inQuery);
	    this.enterRule(localctx, 188, languageParser.RULE_limitClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2855;
	        localctx.limkw = this.match(languageParser.LIMIT);
	         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
	        this.state = 2857;
	        localctx.lim = this.expression();
	         localctx.query.limit = { rows: localctx.lim.expr }; 
	        this.state = 2863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===113) {
	            this.state = 2859;
	            this.match(languageParser.OFFSET);
	            this.state = 2860;
	            localctx.off = this.expression();
	             localctx.query.limit.offset = localctx.off.expr; 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderBySpec() {
	    let localctx = new OrderBySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, languageParser.RULE_orderBySpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2865;
	        localctx.e = this.expression();
	         localctx.ob =  localctx.e.expr 
	        this.state = 2871;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 67:
	        	this.state = 2867;
	        	localctx.asc = this.match(languageParser.ASC);
	        	 localctx.ob.sort = this.valueWithTokenLocation( 'asc', localctx.asc ); 
	        	break;
	        case 79:
	        	this.state = 2869;
	        	localctx.desc = this.match(languageParser.DESC);
	        	 localctx.ob.sort = this.valueWithTokenLocation( 'desc', localctx.desc ); 
	        	break;
	        case -1:
	        case 1:
	        case 3:
	        case 4:
	        case 7:
	        case 14:
	        case 26:
	        case 60:
	        case 61:
	        case 62:
	        case 64:
	        case 65:
	        case 68:
	        case 73:
	        case 77:
	        case 83:
	        case 85:
	        case 90:
	        case 95:
	        case 106:
	        case 112:
	        case 127:
	        case 131:
	        case 135:
	        case 137:
	        case 146:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===112) {
	            this.state = 2873;
	            localctx.nb = this.match(languageParser.NULLS);
	            this.state = 2874;
	            localctx.ne = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===91 || _la===103)) {
	                localctx.ne = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             localctx.ob.nulls = this.valueWithTokenLocation( (localctx.ne == null ? null : localctx.ne.text).toLowerCase(), localctx.nb, localctx.ne ); 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinOp(left) {
	    let localctx = new JoinOpContext(this, this._ctx, this.state, left);
	    this.enterRule(localctx, 192, languageParser.RULE_joinOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2913;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.state = 2878;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join =  'inner' 
	            break;
	        case 98:
	            this.state = 2880;
	            localctx.t1 = this.match(languageParser.INNER);
	            this.state = 2882;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 136314881) !== 0)) {
	                this.state = 2881;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2884;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'inner' 
	            break;
	        case 104:
	            this.state = 2886;
	            localctx.t1 = this.match(languageParser.LEFT);
	            this.state = 2888;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 2887;
	                localctx.t2 = this.match(languageParser.OUTER);
	            }

	            this.state = 2891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 136314881) !== 0)) {
	                this.state = 2890;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2893;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'left' 
	            break;
	        case 124:
	            this.state = 2895;
	            localctx.t1 = this.match(languageParser.RIGHT);
	            this.state = 2897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 2896;
	                localctx.t2 = this.match(languageParser.OUTER);
	            }

	            this.state = 2900;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 136314881) !== 0)) {
	                this.state = 2899;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2902;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'right' 
	            break;
	        case 94:
	            this.state = 2904;
	            localctx.t1 = this.match(languageParser.FULL);
	            this.state = 2906;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===117) {
	                this.state = 2905;
	                localctx.t2 = this.match(languageParser.OUTER);
	            }

	            this.state = 2909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 136314881) !== 0)) {
	                this.state = 2908;
	                localctx.c = this.joinCardinality();
	            }

	            this.state = 2911;
	            localctx.op = this.match(languageParser.JOIN);
	             localctx.join = 'full' 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	         localctx.table =  { op: this.valueWithTokenLocation( 'join', localctx.op ),
	                         join: this.valueWithTokenLocation( localctx.join, localctx.t1 || localctx.op, localctx.t2 ),
	                         args: (localctx.left ? [localctx.left] : []),
	                         location: localctx.left && localctx.left.location }
	              if (localctx.c) localctx.table.cardinality = localctx.c.joinCard; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCardinality() {
	    let localctx = new JoinCardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, languageParser.RULE_joinCardinality);
	     localctx.joinCard =  {} 
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2924;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	        case 114:
	            this.state = 2918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===87) {
	                this.state = 2917;
	                localctx.srcExact = this.match(languageParser.EXACT);
	            }

	            this.state = 2920;
	            localctx.srcMaxOne = this.match(languageParser.ONE);
	             if(localctx.srcExact)
	                      localctx.joinCard.sourceMin = { literal: 'number', val: 1,
	                                              location: this.tokenLocation(localctx.srcExact) };
	                    localctx.joinCard.sourceMax = { literal: 'number', val: 1,
	                                              location: this.tokenLocation(localctx.srcMaxOne) }; 
	            break;
	        case 108:
	            this.state = 2922;
	            localctx.srcMaxMany = this.match(languageParser.MANY);
	             localctx.joinCard.sourceMax = { literal: 'string', val: '*',
	                                               location: this.tokenLocation(localctx.srcMaxMany) }; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2926;
	        this.match(languageParser.TO);
	        this.state = 2934;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	        case 114:
	            this.state = 2928;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===87) {
	                this.state = 2927;
	                localctx.tgtExact = this.match(languageParser.EXACT);
	            }

	            this.state = 2930;
	            localctx.tgtMaxOne = this.match(languageParser.ONE);
	             if(localctx.tgtExact)
	                      localctx.joinCard.targetMin = { literal: 'number', val: 1,
	                                              location: this.tokenLocation(localctx.tgtExact) };
	                    localctx.joinCard.targetMax = { literal: 'number', val: 1,
	                                          location: this.tokenLocation(localctx.tgtMaxOne) }; 
	            break;
	        case 108:
	            this.state = 2932;
	            localctx.tgtMaxMany = this.match(languageParser.MANY);
	             localctx.joinCard.targetMax = { literal: 'string', val: '*',
	                                            location: this.tokenLocation(localctx.tgtMaxMany) }; 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.joinCard); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionEOF() {
	    let localctx = new ConditionEOFContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, languageParser.RULE_conditionEOF);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2936;
	        localctx.c = this.condition();
	         localctx.cond =  localctx.c.expr 
	        this.state = 2938;
	        this.match(languageParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, languageParser.RULE_condition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2940;
	        localctx.c1 = this.conditionTerm();
	        this.state = 2942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16 || _la===63 || _la===115) {
	            this.state = 2941;
	            localctx.cc = this.conditionCont( [localctx.c1.expr] );
	        }

	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  (localctx.cc || localctx.c1)?.expr 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionCont(args) {
	    let localctx = new ConditionContContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 200, languageParser.RULE_conditionCont);
	    var _la = 0;
	    try {
	        this.state = 2977;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 63:
	        case 115:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2953; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2948;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 115:
	                    this.state = 2944;
	                    this.match(languageParser.OR);
	                     localctx.right =  this.pushOpToken( localctx.args, 2 ) 
	                    break;
	                case 63:
	                    this.state = 2946;
	                    this.match(languageParser.AND);
	                     localctx.right =  this.pushOpToken( localctx.args, 4 ) 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2950;
	                localctx.c1 = this.conditionTerm();
	                 localctx.right.push(localctx.c1.expr); 
	                this.state = 2955; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===63 || _la===115);
	            this.state = 2966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 2957;
	                this.match(languageParser.T__15);
	                 this.pushOpToken( localctx.args, 0 ); 
	                this.state = 2959;
	                localctx.e2 = this.expression();
	                 localctx.args.push(localctx.e2.expr); 
	                this.state = 2961;
	                localctx.colon = this.match(languageParser.T__4);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 2963;
	                localctx.e3 = this.expression();
	                 localctx.args.push(localctx.e3.expr); 
	            }

	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2968;
	            localctx.q = this.match(languageParser.T__15);
	             localctx.args.nary = '?:';; this.pushOpToken( localctx.args, 0 ); 
	            this.state = 2970;
	            localctx.e2 = this.expression();
	             localctx.args.push(localctx.e2.expr); 
	            this.state = 2972;
	            localctx.colon = this.match(languageParser.T__4);
	             this.pushXprToken( localctx.args ); 
	            this.state = 2974;
	            localctx.e3 = this.expression();
	             localctx.args.push(localctx.e3.expr); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, localctx.args['$'+'opPrecedence'] !== 0 || '?:' ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionTerm() {
	    let localctx = new ConditionTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, languageParser.RULE_conditionTerm);
	    var _la = 0;
	    try {
	        this.state = 2989;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 9:
	        case 10:
	        case 16:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 45:
	        case 49:
	        case 50:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2979;
	            localctx.c1 = this.conditionPrimary();
	             localctx.args.push(localctx.c1.expr); 
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2982;
	            localctx.e1 = this.conditionOrQueryParenthesis();
	            this.state = 2984;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 25171456) !== 0)) {
	                this.state = 2983;
	                localctx.ec = this.expressionCont([localctx.e1.expr]);
	            }

	            this.state = 2987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 8257792) !== 0) || ((((_la - 47)) & ~0x1f) === 0 && ((1 << (_la - 47)) & 8388617) !== 0) || _la===101 || _la===105) {
	                this.state = 2986;
	                localctx.cc = this.comparisonCont([ (localctx.ec || localctx.e1)?.expr ]);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  (localctx.c1 || localctx.cc || localctx.ec || localctx.e1)?.expr 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionPrimary() {
	    let localctx = new ConditionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, languageParser.RULE_conditionPrimary);
	    var _la = 0;
	    try {
	        this.state = 3020;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2991;
	            this.match(languageParser.NOT);
	             this.pushXprToken( localctx.args ); 
	            this.state = 2993;
	            localctx.c1 = this.conditionTerm();
	             localctx.args.push(localctx.c1.expr); 
	            break;
	        case 45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2996;
	            this.match(languageParser.EXISTS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3009;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 6:
	                this.state = 2998;
	                localctx.open = this.match(languageParser.T__5);
	                this.state = 2999;
	                localctx.qe = this.queryExpression();
	                this.state = 3000;
	                localctx.close = this.match(languageParser.T__6);
	                 localctx.args.push( this.surroundByParens( localctx.qe.query, localctx.open, localctx.close, true ) ); 
	                break;
	            case 16:
	            case 146:
	                this.state = 3003;
	                localctx.qm = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===16 || _la===146)) {
	                    localctx.qm = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 localctx.args.push( { param: this.valueWithTokenLocation( '?', localctx.qm ), scope: 'param' } );
	                        this.csnParseOnly( 'syntax-unsupported-param', [ localctx.qm ], { '#': 'dynamic', code: '?' } );
	                      
	                break;
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	                this.state = 3005;
	                localctx.ep = this.valuePath( 'ref' );
	                 localctx.args.push( localctx.ep.qp ); 
	                 localctx.ep.qp['$'+'expected'] = 'exists'; 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 5:
	        case 9:
	        case 10:
	        case 16:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3011;
	            localctx.e1 = this.expressionPrimary();
	            this.state = 3013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 25171456) !== 0)) {
	                this.state = 3012;
	                localctx.ec = this.expressionCont([localctx.e1.expr]);
	            }

	            this.state = 3016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 8257792) !== 0) || ((((_la - 47)) & ~0x1f) === 0 && ((1 << (_la - 47)) & 8388617) !== 0) || _la===101 || _la===105) {
	                this.state = 3015;
	                localctx.cc = this.comparisonCont([ (localctx.ec || localctx.e1)?.expr ]);
	            }

	             localctx.expr =  (localctx.cc || localctx.ec || localctx.e1)?.expr 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr ??= this.argsExpression( localctx.args, false ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonCont(args) {
	    let localctx = new ComparisonContContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 206, languageParser.RULE_comparisonCont);
	    var _la = 0;
	    try {
	        this.state = 3070;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3022;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 8257792) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            this.state = 3026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 131075) !== 0)) {
	                this.state = 3024;
	                _la = this._input.LA(1);
	                if(!(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 131075) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                 this.pushXprToken( localctx.args ); 
	            }

	            this.state = 3028;
	            localctx.e2 = this.expression();
	             this.pushItem( localctx.args, localctx.e2.expr ); 
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3031;
	            this.match(languageParser.IS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3035;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50) {
	                this.state = 3033;
	                this.match(languageParser.NOT);
	                 this.pushXprToken( localctx.args ); 
	            }

	            this.state = 3037;
	            this.match(languageParser.NULL);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case 47:
	        case 50:
	        case 70:
	        case 105:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3041;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50) {
	                this.state = 3039;
	                this.match(languageParser.NOT);
	                 this.pushXprToken( localctx.args ); 
	            }

	            this.state = 3068;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 47:
	                this.state = 3043;
	                this.match(languageParser.IN);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3045;
	                localctx.e1 = this.expression();
	                 localctx.args.push( this.secureParens( localctx.e1.expr ) ); 
	                break;
	            case 70:
	                this.state = 3048;
	                this.match(languageParser.BETWEEN);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3050;
	                localctx.e2 = this.expression();
	                 localctx.args.push( localctx.e2.expr ); 
	                this.state = 3052;
	                this.match(languageParser.AND);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3054;
	                localctx.e3 = this.expression();
	                 localctx.args.push( localctx.e3.expr ); 
	                break;
	            case 105:
	                this.state = 3057;
	                this.match(languageParser.LIKE);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3059;
	                localctx.e4 = this.expression();
	                 localctx.args.push( localctx.e4.expr ); 
	                this.state = 3066;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===86) {
	                    this.state = 3061;
	                    this.match(languageParser.ESCAPE);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3063;
	                    localctx.e5 = this.expression();
	                     localctx.args.push( localctx.e5.expr ); 
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, languageParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3078;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 9:
	        case 10:
	        case 16:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.state = 3072;
	            localctx.e1 = this.expressionPrimary();
	             localctx.expr =  localctx.e1.expr 
	            break;
	        case 6:
	            this.state = 3075;
	            localctx.eq = this.conditionOrQueryParenthesis();
	             localctx.expr =  localctx.eq.expr 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3083;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 25171456) !== 0)) {
	            this.state = 3080;
	            localctx.ec = this.expressionCont( [localctx.expr] );
	             localctx.expr =  localctx.ec.expr 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionCont(args) {
	    let localctx = new ExpressionContContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 210, languageParser.RULE_expressionCont);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3105; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3095;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 23:
	                this.state = 3085;
	                this.match(languageParser.T__22);
	                 localctx.right =  this.pushOpToken( localctx.args, 20 ) 
	                break;
	            case 9:
	                this.state = 3087;
	                this.match(languageParser.T__8);
	                 localctx.right =  this.pushOpToken( localctx.args, 22 ) 
	                break;
	            case 10:
	                this.state = 3089;
	                this.match(languageParser.T__9);
	                 localctx.right =  this.pushOpToken( localctx.args, 22 ) 
	                break;
	            case 12:
	                this.state = 3091;
	                this.match(languageParser.T__11);
	                 localctx.right =  this.pushOpToken( localctx.args, 24 ) 
	                break;
	            case 24:
	                this.state = 3093;
	                this.match(languageParser.T__23);
	                 localctx.right =  this.pushOpToken( localctx.args, 24 ) 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3103;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 5:
	            case 9:
	            case 10:
	            case 16:
	            case 27:
	            case 33:
	            case 34:
	            case 37:
	            case 42:
	            case 43:
	            case 49:
	            case 51:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	                this.state = 3097;
	                localctx.e1 = this.expressionPrimary();
	                 localctx.right.push( localctx.e1.expr ); 
	                break;
	            case 6:
	                this.state = 3100;
	                localctx.eq = this.conditionOrQueryParenthesis();
	                 localctx.right.push( localctx.eq.expr ); 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3107; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 25171456) !== 0));
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, true ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionPrimary() {
	    let localctx = new ExpressionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, languageParser.RULE_expressionPrimary);
	    var _la = 0;
	    try {
	        this.state = 3198;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3109;
	            _la = this._input.LA(1);
	            if(!(_la===9 || _la===10)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            this.state = 3117;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 5:
	            case 9:
	            case 10:
	            case 16:
	            case 27:
	            case 33:
	            case 34:
	            case 37:
	            case 42:
	            case 43:
	            case 49:
	            case 51:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	                this.state = 3111;
	                localctx.e1 = this.expressionPrimary();
	                 this.signedExpression( localctx.args, localctx.e1.expr ); 
	                break;
	            case 6:
	                this.state = 3114;
	                localctx.eq = this.conditionOrQueryParenthesis();
	                 this.signedExpression( localctx.args, localctx.eq.expr ); 
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 51:
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3119;
	            localctx.val = this.literalValue();
	             localctx.args.push( localctx.val.val ); 
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3122;
	            localctx.sf = this.specialFunction();
	             localctx.args.push( localctx.sf.ret ); 
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3125;
	            this.match(languageParser.CASE);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3155;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 5:
	            case 6:
	            case 9:
	            case 10:
	            case 16:
	            case 27:
	            case 33:
	            case 34:
	            case 37:
	            case 42:
	            case 43:
	            case 49:
	            case 51:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	                this.state = 3127;
	                localctx.e2 = this.expression();
	                 localctx.args.push( localctx.e2.expr ); 
	                this.state = 3138; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 3129;
	                    this.match(languageParser.WHEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3131;
	                    localctx.ew = this.expression();
	                     localctx.args.push( localctx.ew.expr ); 
	                    this.state = 3133;
	                    this.match(languageParser.THEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3135;
	                    localctx.e3 = this.expression();
	                     localctx.args.push( localctx.e3.expr ); 
	                    this.state = 3140; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===56);
	                break;
	            case 56:
	                this.state = 3151; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 3142;
	                    this.match(languageParser.WHEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3144;
	                    localctx.c = this.condition();
	                     localctx.args.push( localctx.c.expr ); 
	                    this.state = 3146;
	                    this.match(languageParser.THEN);
	                     this.pushXprToken( localctx.args ); 
	                    this.state = 3148;
	                    localctx.e3 = this.expression();
	                     localctx.args.push( localctx.e3.expr ); 
	                    this.state = 3153; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===56);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3162;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81) {
	                this.state = 3157;
	                this.match(languageParser.ELSE);
	                 this.pushXprToken( localctx.args ); 
	                this.state = 3159;
	                localctx.e4 = this.expression();
	                 localctx.args.push( localctx.e4.expr ); 
	            }

	            this.state = 3164;
	            this.match(languageParser.END);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3167;
	            localctx.ne = this.match(languageParser.NEW);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3169;
	            localctx.nqp = this.valuePath( 'ref', null );
	             localctx.args.push( this.valuePathAst( localctx.nqp.qp ) ); 
	             this.fixNewKeywordPlacement( localctx.args ); 
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3173;
	            localctx.vp = this.valuePath( 'ref', null );
	             localctx.args.push( this.valuePathAst( localctx.vp.qp ) ); 
	             this.setLocalTokenIfBefore( 'OVER', 'OVER', /^\($/i ); 
	            this.state = 3184;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===143) {
	                 localctx.args[0].suffix = []; 
	                this.state = 3177;
	                this.match(languageParser.OVER);
	                 this.pushXprToken( localctx.args[0].suffix ); 
	                this.state = 3179;
	                localctx.open = this.match(languageParser.T__5);
	                this.state = 3180;
	                localctx.over = this.overClause();
	                this.state = 3181;
	                localctx.close = this.match(languageParser.T__6);
	                 localctx.args[0].suffix.push( this.surroundByParens( localctx.over.over, localctx.open, localctx.close ) ); 
	            }

	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3186;
	            localctx.colon = this.match(languageParser.T__4);
	             this.reportUnexpectedSpace( localctx.colon ); 
	             this.meltKeywordToIdentifier(); 
	            this.state = 3194;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	                this.state = 3189;
	                localctx.vp = this.valuePath( 'paramref', this.startLocation() );
	                { const par = localctx.vp.qp;; par.scope = 'param';; localctx.args.push( par ); }
	                break;
	            case 59:
	                this.state = 3192;
	                localctx.pp = this.match(languageParser.Number);
	                 localctx.args.push( { param: this.unsignedIntegerLiteral(), scope: 'param' } );
	                        this.csnParseOnly( 'syntax-unsupported-param', [ localctx.pp ], { '#': 'positional', code: ':' + (localctx.pp == null ? null : localctx.pp.text) } );
	                      
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3196;
	            localctx.qm = this.match(languageParser.T__15);
	             localctx.args.push( { param: this.valueWithTokenLocation( '?', localctx.qm ), scope: 'param' } );
	                  this.csnParseOnly( 'syntax-unsupported-param', [ localctx.qm ], { '#': 'dynamic', code: '?' } );
	                
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionOrQueryParenthesis() {
	    let localctx = new ConditionOrQueryParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, languageParser.RULE_conditionOrQueryParenthesis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3200;
	        localctx.open = this.match(languageParser.T__5);
	        this.state = 3249;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	            this.state = 3201;
	            localctx.q1 = this.selectQuery();
	            this.state = 3203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 270796801) !== 0) || _la===132) {
	                this.state = 3202;
	                localctx.qr = this.queryExpressionCont( localctx.q1.query );
	            }

	             localctx.args.push( localctx.qr ? localctx.qr.query : localctx.q1.query ); 
	            break;
	        case 5:
	        case 9:
	        case 10:
	        case 16:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 45:
	        case 49:
	        case 50:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.state = 3207;
	            localctx.c1 = this.conditionPrimary();
	            this.state = 3209;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16 || _la===63 || _la===115) {
	                this.state = 3208;
	                localctx.cc = this.conditionCont( [localctx.c1.expr] );
	            }

	             this.pushItem( localctx.args, localctx.cc?.expr || localctx.c1.expr ); 
	            this.state = 3219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3212;
	                this.match(languageParser.T__2);
	                 if (localctx.args.length > 1 && this.isStraightBefore(')')) break; 
	                this.state = 3214;
	                localctx.cn = this.condition();
	                 this.pushItem(localctx.args, localctx.cn.expr); 
	                this.state = 3221;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 6:
	            this.state = 3222;
	            localctx.rec = this.conditionOrQueryParenthesis();
	             localctx.args.push( localctx.rec.expr ); 
	            this.state = 3247;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 88:
	            case 99:
	            case 106:
	            case 109:
	            case 116:
	            case 132:
	                this.state = 3224;
	                localctx.qc = this.queryExpressionCont(localctx.rec.expr.query);
	                 if (localctx.qc.query) localctx.args[0] = { query: localctx.qc.query, location: localctx.qc.query.location }; 
	                break;
	            case 3:
	            case 7:
	            case 8:
	            case 9:
	            case 10:
	            case 12:
	            case 16:
	            case 17:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 47:
	            case 50:
	            case 63:
	            case 70:
	            case 101:
	            case 105:
	            case 115:
	                this.state = 3228;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 25171456) !== 0)) {
	                    this.state = 3227;
	                    localctx.ec = this.expressionCont([localctx.rec.expr]);
	                }

	                this.state = 3231;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 8257792) !== 0) || ((((_la - 47)) & ~0x1f) === 0 && ((1 << (_la - 47)) & 8388617) !== 0) || _la===101 || _la===105) {
	                    this.state = 3230;
	                    localctx.cm = this.comparisonCont([(localctx.ec || localctx.rec).expr]);
	                }

	                this.state = 3234;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===16 || _la===63 || _la===115) {
	                    this.state = 3233;
	                    localctx.cc = this.conditionCont([(localctx.cm || localctx.ec || localctx.rec).expr]);
	                }

	                 localctx.args[0] = (localctx.cc || localctx.cm || localctx.ec || localctx.rec)?.expr || localctx.args[0]; 
	                this.state = 3244;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 3237;
	                    this.match(languageParser.T__2);
	                     if (localctx.args.length > 1 && this.isStraightBefore(')')) break; 
	                    this.state = 3239;
	                    localctx.cn = this.condition();
	                     this.pushItem(localctx.args, localctx.cn.expr); 
	                    this.state = 3246;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3251;
	        localctx.close = this.match(languageParser.T__6);

	              if (localctx.args.length > 1)
	                localctx.expr =  { op: this.valueWithTokenLocation( 'list', localctx.open ), args: localctx.args,
	                          location: this.tokenLocation( localctx.open, localctx.close ) }
	              else if (localctx.args[0]) // can be `null` if condition failed to parse
	                localctx.expr =  this.surroundByParens( localctx.args[0], localctx.open, localctx.close, !!localctx.q1 )
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialFunction() {
	    let localctx = new SpecialFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, languageParser.RULE_specialFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3254;
	        localctx.ca = this.match(languageParser.CAST);
	        this.state = 3255;
	        this.match(languageParser.T__5);

	              localctx.ret =  {
	                op: this.valueWithTokenLocation( 'cast', localctx.ca ),
	                args: this.createArray(),
	                location: this.tokenLocation( localctx.ca )
	              }
	            
	        this.state = 3257;
	        localctx.e = this.expression();
	        this.state = 3258;
	        this.match(languageParser.AS);
	        this.state = 3259;
	        this.typeRefOptArgs( localctx.ret );

	              localctx.ret.args.push( localctx.e.expr );
	            
	        this.state = 3261;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.ret.args ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplePath(art, category) {
	    let localctx = new SimplePathContext(this, this._ctx, this.state, art, category);
	    this.enterRule(localctx, 218, languageParser.RULE_simplePath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3264;
	        localctx.head = this.ident( localctx.category );
	         localctx.art.path ??= []; this.pushIdent( localctx.art.path, localctx.head.id ); 
	        this.state = 3272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===15) {
	            this.state = 3266;
	            this.match(languageParser.T__14);
	            this.state = 3267;
	            localctx.tail = this.ident( localctx.category );
	             this.pushIdent( localctx.art.path, localctx.tail.id ); 
	            this.state = 3274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuePath(category, location) {
	    let localctx = new ValuePathContext(this, this._ctx, this.state, category, location);
	    this.enterRule(localctx, 220, languageParser.RULE_valuePath);
	     localctx.qp.location = location || this.startLocation(); 
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3275;
	        localctx.id = this.ident( localctx.category );
	         this.pushIdent( localctx.qp.path, localctx.id.id ); 
	        this.state = 3282;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 6:
	        	this.state = 3277;
	        	this.pathArguments( localctx.id.id, localctx.id.id );
	        	this.state = 3279;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===11) {
	        	    this.state = 3278;
	        	    this.cardinalityAndFilter( localctx.id.id );
	        	}

	        	break;
	        case 11:
	        	this.state = 3281;
	        	this.cardinalityAndFilter( localctx.id.id );
	        	break;
	        case -1:
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 26:
	        case 38:
	        case 40:
	        case 44:
	        case 46:
	        case 47:
	        case 50:
	        case 51:
	        case 53:
	        case 56:
	        case 57:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 143:
	        case 146:
	        case 148:
	        case 150:
	        case 152:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 3296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===15) {
	            this.state = 3284;
	            this.match(languageParser.T__14);
	            this.state = 3285;
	            localctx.id = this.ident('ref');
	             this.pushIdent( localctx.qp.path, localctx.id.id ); 
	            this.state = 3292;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 6:
	            	this.state = 3287;
	            	this.pathArguments( localctx.id.id );
	            	this.state = 3289;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===11) {
	            	    this.state = 3288;
	            	    this.cardinalityAndFilter( localctx.id.id );
	            	}

	            	break;
	            case 11:
	            	this.state = 3291;
	            	this.cardinalityAndFilter( localctx.id.id );
	            	break;
	            case -1:
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 7:
	            case 8:
	            case 9:
	            case 10:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 26:
	            case 38:
	            case 40:
	            case 44:
	            case 46:
	            case 47:
	            case 50:
	            case 51:
	            case 53:
	            case 56:
	            case 57:
	            case 58:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 143:
	            case 146:
	            case 148:
	            case 150:
	            case 152:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 3298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.qp); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathArguments(pathStep, considerSpecial) {
	    let localctx = new PathArgumentsContext(this, this._ctx, this.state, pathStep, considerSpecial);
	    this.enterRule(localctx, 222, languageParser.RULE_pathArguments);

	      if (!localctx.pathStep) localctx.pathStep =  {} // grammar robustness, see test/negative/parser/NamedExpression.cds
	      this.genericFunctionsStack.push( this['$'+'genericKeywords'] );

	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.excludeExpected([ 'ORDER' ]); 
	        this.state = 3300;
	        this.match(languageParser.T__5);
	         if (!this.setLocalTokenForId( 2, { ':': 'HelperToken1', '=>': 'HelperToken2' } ))
	                this.prepareGenericKeywords( localctx.considerSpecial ); 
	        this.state = 3348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 144:
	             localctx.pathStep.args = this.createDict(); localctx.pathStep['$'+'syntax'] = ':'; 
	            this.state = 3303;
	            localctx.id = this.match(languageParser.HelperToken1);
	            this.state = 3304;
	            this.match(languageParser.T__4);
	            this.state = 3305;
	            this.namedExpression( localctx.pathStep, this.identAst( localctx.id, 'paramname', true ) );
	            this.state = 3314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3306;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 3308;
	                localctx.name = this.ident('paramname');
	                this.state = 3309;
	                this.match(languageParser.T__4);
	                this.state = 3310;
	                this.namedExpression( localctx.pathStep, localctx.name.id );
	                this.state = 3316;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 145:
	             localctx.pathStep.args = this.createDict(); 
	            this.state = 3318;
	            localctx.id = this.match(languageParser.HelperToken2);
	            this.state = 3319;
	            this.match(languageParser.T__24);
	            this.state = 3320;
	            this.namedExpression( localctx.pathStep, this.identAst( localctx.id, 'paramname', true ) );
	            this.state = 3329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3321;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 3323;
	                localctx.name = this.ident('paramname');
	                this.state = 3324;
	                this.match(languageParser.T__24);
	                this.state = 3325;
	                this.namedExpression( localctx.pathStep, localctx.name.id );
	                this.state = 3331;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 5:
	        case 6:
	        case 9:
	        case 10:
	        case 12:
	        case 16:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 146:
	        case 147:
	        case 149:
	             localctx.pathStep.args = this.createArray(); 
	            this.state = 3333;
	            this.funcExpression( localctx.pathStep, localctx.considerSpecial );
	            this.state = 3339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3334;
	                this.match(languageParser.T__2);
	                 if (this.isStraightBefore(')')) break; 
	                this.state = 3336;
	                this.funcExpression( localctx.pathStep, localctx.considerSpecial );
	                this.state = 3341;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 3342;
	                localctx.ob = this.funcOrderByClause( [ localctx.pathStep.args[localctx.pathStep.args.length - 1] ] );
	                 localctx.pathStep.args[localctx.pathStep.args.length - 1] = localctx.ob.expr; 
	            }

	            break;
	        case 7:
	             localctx.pathStep.args = this.createArray(); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3350;
	        this.match(languageParser.T__6);
	         this.finalizeDictOrArray( localctx.pathStep.args ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	                             // see @init
	            if (!localctx.pathStep.args) localctx.pathStep.args = [];
	            this['$'+'genericKeywords'] = this.genericFunctionsStack.pop();
	          
	        this.exitRule();
	    }
	    return localctx;
	}



	namedExpression(pathStep, id) {
	    let localctx = new NamedExpressionContext(this, this._ctx, this.state, pathStep, id);
	    this.enterRule(localctx, 224, languageParser.RULE_namedExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3353;
	        localctx.elem = this.expression();
	         if (localctx.pathStep && localctx.id) {
	              this.addDef( (localctx.elem && localctx.elem.expr) ? localctx.elem.expr : { location: localctx.id.location },
	                           localctx.pathStep, 'args', 0, localctx.id );
	              }
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcExpression(pathStep, considerSpecial) {
	    let localctx = new FuncExpressionContext(this, this._ctx, this.state, pathStep, considerSpecial);
	    this.enterRule(localctx, 226, languageParser.RULE_funcExpression);
	     this.prepareGenericKeywords( localctx.considerSpecial ); 
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3369;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 6:
	        case 9:
	        case 10:
	        case 16:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 42:
	        case 43:
	        case 49:
	        case 51:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.state = 3356;
	            localctx.expr = this.expression();
	             localctx.args.push( localctx.expr.expr ); 
	            break;
	        case 147:
	            this.state = 3359;
	            this.match(languageParser.GenericExpr);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case 149:
	            this.state = 3361;
	            this.match(languageParser.GenericIntro);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3363;
	            localctx.expr = this.expression();
	             localctx.args.push( localctx.expr.expr ); 
	            break;
	        case 12:
	        case 38:
	        case 44:
	        case 146:
	             this.reportErrorForGenericKeyword(); 
	            this.state = 3367;
	            _la = this._input.LA(1);
	            if(!(_la===12 || _la===38 || _la===44 || _la===146)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4099) !== 0) || _la===96 || ((((_la - 138)) & ~0x1f) === 0 && ((1 << (_la - 138)) & 1281) !== 0)) {
	            this.state = 3388; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                 this.prepareGenericKeywords( localctx.considerSpecial, 'separator' ); 
	                this.state = 3375;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 148:
	                    this.state = 3372;
	                    this.match(languageParser.GenericSeparator);
	                    break;
	                case 46:
	                case 47:
	                case 58:
	                case 96:
	                case 138:
	                case 146:
	                     this.reportErrorForGenericKeyword(); 
	                    this.state = 3374;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4099) !== 0) || _la===96 || _la===138 || _la===146)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                 this.pushXprToken( localctx.args );
	                          this.prepareGenericKeywords( localctx.considerSpecial, 'expr' ); 
	                this.state = 3386;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 5:
	                case 6:
	                case 9:
	                case 10:
	                case 16:
	                case 27:
	                case 33:
	                case 34:
	                case 37:
	                case 42:
	                case 43:
	                case 49:
	                case 51:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 118:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 132:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                    this.state = 3378;
	                    localctx.expr = this.expression();
	                     localctx.args.push( localctx.expr.expr ); 
	                    break;
	                case 147:
	                    this.state = 3381;
	                    this.match(languageParser.GenericExpr);
	                     this.pushXprToken( localctx.args ); 
	                    break;
	                case 38:
	                case 146:
	                     this.reportErrorForGenericKeyword(); 
	                    this.state = 3384;
	                    _la = this._input.LA(1);
	                    if(!(_la===38 || _la===146)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                     this.pushXprToken( localctx.args ); 
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 3390; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 4099) !== 0) || _la===96 || ((((_la - 138)) & ~0x1f) === 0 && ((1 << (_la - 138)) & 1281) !== 0));
	        }

	        this._ctx.stop = this._input.LT(-1);
	         localctx.pathStep.args.push( this.argsExpression( localctx.args, false ) ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overClause() {
	    let localctx = new OverClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, languageParser.RULE_overClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119) {
	            this.state = 3394;
	            this.match(languageParser.PARTITION);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3396;
	            this.match(languageParser.BY);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3398;
	            localctx.pb = this.partitionByClause();
	             localctx.args.push( localctx.pb.expr ); 
	        }

	        this.state = 3410;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 3403;
	            this.match(languageParser.ORDER);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3405;
	            this.match(languageParser.BY);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3407;
	            localctx.ob = this.exprOrderByClause();
	             localctx.args.push( localctx.ob.expr ); 
	        }

	        this.state = 3417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 3412;
	            this.match(languageParser.ROWS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3414;
	            localctx.wf = this.windowFrameClause();
	             localctx.args.push( localctx.wf.wf ); 
	        }

	        this._ctx.stop = this._input.LT(-1);
	         localctx.over =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionByClause() {
	    let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, languageParser.RULE_partitionByClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3419;
	        localctx.e1 = this.expression();
	         localctx.args.push( localctx.e1.expr ); 
	        this.state = 3428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 3421;
	            this.match(languageParser.T__2);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3423;
	            localctx.en = this.expression();
	             localctx.args.push( localctx.en.expr ); 
	            this.state = 3430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcOrderByClause(args) {
	    let localctx = new FuncOrderByClauseContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 232, languageParser.RULE_funcOrderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3431;
	        this.match(languageParser.ORDER);
	         this.pushXprToken( localctx.args ); 
	        this.state = 3433;
	        this.match(languageParser.BY);
	         this.pushXprToken( localctx.args ); 
	        this.state = 3435;
	        localctx.ob = this.exprOrderByClause();
	         localctx.args.push( localctx.ob.expr ); 
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprOrderByClause() {
	    let localctx = new ExprOrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, languageParser.RULE_exprOrderByClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3438;
	        this.orderBySpecInExpr( localctx.args );
	        this.state = 3444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 3439;
	            this.match(languageParser.T__2);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3441;
	            this.orderBySpecInExpr( localctx.args );
	            this.state = 3446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.expr =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderBySpecInExpr(args) {
	    let localctx = new OrderBySpecInExprContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 236, languageParser.RULE_orderBySpecInExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3447;
	        localctx.e = this.expression();
	         localctx.args.push( localctx.e.expr ); 
	        this.state = 3453;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 67:
	        	this.state = 3449;
	        	this.match(languageParser.ASC);
	        	 this.pushXprToken( localctx.args ); 
	        	break;
	        case 79:
	        	this.state = 3451;
	        	this.match(languageParser.DESC);
	        	 this.pushXprToken( localctx.args ); 
	        	break;
	        case 3:
	        case 7:
	        case 112:
	        case 126:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 3459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===112) {
	            this.state = 3455;
	            this.match(languageParser.NULLS);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3457;
	            _la = this._input.LA(1);
	            if(!(_la===91 || _la===103)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameClause() {
	    let localctx = new WindowFrameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, languageParser.RULE_windowFrameClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	        case 75:
	        case 133:
	            this.state = 3461;
	            this.windowFrameStartSpec( localctx.args );
	            break;
	        case 70:
	            this.state = 3462;
	            this.match(languageParser.BETWEEN);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3464;
	            this.windowFrameBoundSpec( localctx.args );
	            this.state = 3465;
	            this.match(languageParser.AND);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3467;
	            this.windowFrameBoundSpec( localctx.args );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.wf =  this.argsExpression( localctx.args, false ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameBoundSpec(args) {
	    let localctx = new WindowFrameBoundSpecContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 240, languageParser.RULE_windowFrameBoundSpec);
	    var _la = 0;
	    try {
	        this.state = 3483;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3471;
	            this.match(languageParser.UNBOUNDED);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3473;
	            _la = this._input.LA(1);
	            if(!(_la===93 || _la===120)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3475;
	            this.match(languageParser.Number);
	             localctx.args.push( this.unsignedIntegerLiteral() ); 
	            this.state = 3477;
	            _la = this._input.LA(1);
	            if(!(_la===93 || _la===120)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	             this.pushXprToken( localctx.args ); 
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3479;
	            this.match(languageParser.CURRENT);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3481;
	            this.match(languageParser.ROW);
	             this.pushXprToken( localctx.args ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameStartSpec(args) {
	    let localctx = new WindowFrameStartSpecContext(this, this._ctx, this.state, args);
	    this.enterRule(localctx, 242, languageParser.RULE_windowFrameStartSpec);
	    try {
	        this.state = 3497;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3485;
	            this.match(languageParser.UNBOUNDED);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3487;
	            this.match(languageParser.PRECEDING);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3489;
	            this.match(languageParser.Number);
	             localctx.args.push( this.unsignedIntegerLiteral() ); 
	            this.state = 3491;
	            this.match(languageParser.PRECEDING);
	             this.pushXprToken( localctx.args ); 
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3493;
	            this.match(languageParser.CURRENT);
	             this.pushXprToken( localctx.args ); 
	            this.state = 3495;
	            this.match(languageParser.ROW);
	             this.pushXprToken( localctx.args ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinalityAndFilter(pathStep) {
	    let localctx = new CardinalityAndFilterContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 244, languageParser.RULE_cardinalityAndFilter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	         if (!localctx.pathStep) localctx.pathStep =  {} 
	        this.state = 3500;
	        localctx.openFilter = this.match(languageParser.T__10);
	        this.state = 3502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 3501;
	            this.optionalCardinality( pathStep );
	        }

	        this.state = 3504;
	        this.filterWhereClause( localctx.pathStep );
	        this.state = 3520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===96) {
	            this.state = 3505;
	            localctx.group = this.match(languageParser.GROUP);
	            this.state = 3506;
	            localctx.by = this.match(languageParser.BY);
	            this.state = 3507;
	            localctx.e1 = this.expression();
	             localctx.pathStep.groupBy = [ localctx.e1.expr ]; 
	            this.state = 3515;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3509;
	                this.match(languageParser.T__2);
	                this.state = 3510;
	                localctx.en = this.expression();
	                 localctx.pathStep.groupBy.push( localctx.en.expr ); 
	                this.state = 3517;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ localctx.group, localctx.by ], { keyword: 'GROUP BY' }); 
	        }

	        this.state = 3527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 3522;
	            localctx.hv = this.match(languageParser.HAVING);
	            this.state = 3523;
	            localctx.having = this.condition();
	             localctx.pathStep.having = localctx.having.expr; 
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ localctx.hv ], { keyword: 'HAVING' }); 
	        }

	        this.state = 3534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	             const orderKw = this._input.LT(1); const byKw = this._input.LT(2); 
	            this.state = 3530;
	            localctx.ob = this.orderByClause( localctx.pathStep );
	             localctx.pathStep =  localctx.ob.query; 
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ orderKw, byKw ], { keyword: 'ORDER BY' }); 
	        }

	        this.state = 3541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	             const limit = this._input.LT(1); 
	            this.state = 3537;
	            localctx.lc = this.limitClause( localctx.pathStep );
	             localctx.pathStep =  localctx.lc.query; 
	             this.csnParseOnly('syntax-unexpected-sql-clause', [ limit ], { keyword: 'LIMIT' }); 
	        }

	        this.state = 3543;
	        localctx.closeFilter = this.match(languageParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalCardinality(pathStep) {
	    let localctx = new OptionalCardinalityContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 246, languageParser.RULE_optionalCardinality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         if (this._input.LT(2).text !== ':') return localctx; 

	        this.state = 3546;
	        this.match(languageParser.Number);
	         if (localctx.pathStep) localctx.pathStep.cardinality = { targetMax: this.unsignedIntegerLiteral(), location: this.startLocation() }; 
	        this.state = 3548;
	        this.match(languageParser.T__4);
	        this._ctx.stop = this._input.LT(-1);
	         if (localctx.pathStep && localctx.pathStep.cardinality) this.attachLocation(localctx.pathStep.cardinality); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterWhereClause(pathStep) {
	    let localctx = new FilterWhereClauseContext(this, this._ctx, this.state, pathStep);
	    this.enterRule(localctx, 248, languageParser.RULE_filterWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);

	              const tok = this.getCurrentToken();
	              if (tok.type === languageParser.GROUP
	                 || tok.type === languageParser.ORDER
	                 || tok.type === languageParser.LIMIT
	                 || tok.type === languageParser.HAVING)
	                return localctx;
	            
	        this.state = 3551;
	        this.optionalWhereForFilter();
	        this.state = 3552;
	        localctx.cond = this.condition();
	         if (localctx.pathStep) localctx.pathStep.where = localctx.cond.expr; 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalWhereForFilter() {
	    let localctx = new OptionalWhereForFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, languageParser.RULE_optionalWhereForFilter);
	    try {
	        this.enterOuterAlt(localctx, 1);

	              if (this.getCurrentToken().type !== languageParser.WHERE)
	                return localctx; // TODO: should we somehow add those keywords to $(EXPECTED)?
	            
	        this.state = 3556;
	        this.match(languageParser.WHERE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_fix(art) {
	    let localctx = new AnnotationAssignment_fixContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 252, languageParser.RULE_annotationAssignment_fix);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3558;
	        localctx.at = this.match(languageParser.T__25);
	         this.reportUnexpectedSpace( localctx.at ); 
	        this.state = 3569;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.state = 3560;
	            this.annotationAssignment_paren( localctx.art );
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	             localctx.assignment =  { name: new this.XsnName() } 
	            this.state = 3562;
	            this.annotationPath( localctx.assignment.name, 'anno' );
	            this.state = 3565;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 3563;
	                this.match(languageParser.T__26);
	                this.state = 3564;
	                this.annotationPathVariant( localctx.assignment.name );
	            }

	             this.warnIfColonFollows( localctx.assignment ); 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);

	          if (localctx.assignment) {
	            this.assignAnnotation( localctx.art, localctx.assignment );
	            this.docComment( localctx.art );
	          }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_ll1(art) {
	    let localctx = new AnnotationAssignment_ll1Context(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 254, languageParser.RULE_annotationAssignment_ll1);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3571;
	        localctx.at = this.match(languageParser.T__25);
	         this.reportUnexpectedSpace( localctx.at ); 
	        this.state = 3585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.state = 3573;
	            this.annotationAssignment_paren( localctx.art );
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	             localctx.assignment =  { name: new this.XsnName() } 
	            this.state = 3575;
	            this.annotationPath( localctx.assignment.name, 'anno' );
	            this.state = 3578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 3576;
	                this.match(languageParser.T__26);
	                this.state = 3577;
	                this.annotationPathVariant( localctx.assignment.name );
	            }

	            this.state = 3583;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 3580;
	                this.match(languageParser.T__4);
	                 this.meltKeywordToIdentifier(true); 
	                this.state = 3582;
	                localctx.val = this.annoValue( localctx.assignment );
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);

	          if (localctx.assignment) {
	            this.assignAnnotation( localctx.art, localctx.assignment );
	            this.docComment( localctx.art );
	          }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_atn(art) {
	    let localctx = new AnnotationAssignment_atnContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 256, languageParser.RULE_annotationAssignment_atn);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3587;
	        localctx.at = this.match(languageParser.T__25);
	         this.reportUnexpectedSpace( localctx.at ); 
	        this.state = 3615;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.state = 3589;
	            this.annotationAssignment_paren( localctx.art );
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	             localctx.assignment =  { name: new this.XsnName() } 
	            this.state = 3591;
	            this.annotationPath( localctx.assignment.name, 'anno' );
	             this.setLocalToken( '#', 'HelperToken1', null, true ); 
	            this.state = 3595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===144) {
	                this.state = 3593;
	                localctx.hash = this.match(languageParser.HelperToken1);
	                this.state = 3594;
	                this.annotationPathVariant( localctx.assignment.name );
	            }

	             this.setLocalToken( ':', 'HelperToken2', null, true ); 
	            this.state = 3613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===145) {
	                this.state = 3598;
	                this.match(languageParser.HelperToken2);
	                 this.meltKeywordToIdentifier(true); 
	                this.state = 3611;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 2:
	                case 6:
	                case 9:
	                case 10:
	                case 11:
	                case 27:
	                case 33:
	                case 34:
	                case 37:
	                case 51:
	                case 59:
	                    this.state = 3600;
	                    localctx.val = this.annoValueBase( localctx.assignment );
	                    break;
	                case 26:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 118:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 132:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                    this.state = 3604;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 26:
	                        this.state = 3601;
	                        localctx.atv = this.match(languageParser.T__25);
	                        this.state = 3602;
	                        this.annotationPath( localctx.assignment, 'uncheckedAnno', localctx.atv );
	                        break;
	                    case 60:
	                    case 61:
	                    case 62:
	                    case 63:
	                    case 64:
	                    case 65:
	                    case 66:
	                    case 67:
	                    case 68:
	                    case 69:
	                    case 70:
	                    case 71:
	                    case 72:
	                    case 73:
	                    case 74:
	                    case 75:
	                    case 76:
	                    case 77:
	                    case 78:
	                    case 79:
	                    case 80:
	                    case 81:
	                    case 82:
	                    case 83:
	                    case 84:
	                    case 85:
	                    case 86:
	                    case 87:
	                    case 88:
	                    case 89:
	                    case 90:
	                    case 91:
	                    case 92:
	                    case 93:
	                    case 94:
	                    case 95:
	                    case 96:
	                    case 97:
	                    case 98:
	                    case 99:
	                    case 100:
	                    case 101:
	                    case 102:
	                    case 103:
	                    case 104:
	                    case 105:
	                    case 106:
	                    case 107:
	                    case 108:
	                    case 109:
	                    case 110:
	                    case 111:
	                    case 112:
	                    case 113:
	                    case 114:
	                    case 115:
	                    case 116:
	                    case 117:
	                    case 118:
	                    case 119:
	                    case 120:
	                    case 121:
	                    case 122:
	                    case 123:
	                    case 124:
	                    case 125:
	                    case 126:
	                    case 127:
	                    case 128:
	                    case 129:
	                    case 130:
	                    case 131:
	                    case 132:
	                    case 133:
	                    case 134:
	                    case 135:
	                    case 136:
	                    case 137:
	                    case 138:
	                        this.state = 3603;
	                        this.annotationPath( localctx.assignment, 'uncheckedRef', localctx.atv );
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                     this.setLocalToken( '#', 'HelperToken1', null, true ); 
	                    this.state = 3609;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===144) {
	                        this.state = 3607;
	                        localctx.hash = this.match(languageParser.HelperToken1);
	                        this.state = 3608;
	                        this.annotationPathVariant( localctx.assignment );
	                    }

	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);

	          if (localctx.assignment) {
	            this.assignAnnotation( localctx.art, localctx.assignment );
	            this.docComment( localctx.art );
	          }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_paren(art) {
	    let localctx = new AnnotationAssignment_parenContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 258, languageParser.RULE_annotationAssignment_paren);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3617;
	        this.match(languageParser.T__5);

	              if (this.isStraightBefore(')')) {
	                this.matchWildcard();   // we know it is the ')' - we do not reach the final match
	                return localctx;
	              }
	              this.meltKeywordToIdentifier();
	            
	        this.state = 3619;
	        this.annotationAssignment_1( localctx.art );
	        this.state = 3625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 3620;
	            this.match(languageParser.T__2);

	                    this.meltKeywordToIdentifier();
	                    if (this.isStraightBefore(')')) break; // allow ',' before ')'
	                  
	            this.state = 3622;
	            this.annotationAssignment_1( localctx.art );
	            this.state = 3627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3628;
	        this.match(languageParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationAssignment_1(art) {
	    let localctx = new AnnotationAssignment_1Context(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 260, languageParser.RULE_annotationAssignment_1);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3630;
	        this.annotationPath( localctx.assignment.name, 'anno' );
	        this.state = 3633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 3631;
	            this.match(languageParser.T__26);
	            this.state = 3632;
	            this.annotationPathVariant( localctx.assignment.name );
	        }

	        this.state = 3638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 3635;
	            this.match(languageParser.T__4);
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3637;
	            localctx.val = this.annoValue( localctx.assignment );
	        }

	        this._ctx.stop = this._input.LT(-1);
	         this.assignAnnotation( localctx.art, localctx.assignment ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationPath(art, category, headat) {
	    let localctx = new AnnotationPathContext(this, this._ctx, this.state, art, category, headat);
	    this.enterRule(localctx, 262, languageParser.RULE_annotationPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3640;
	        localctx.head = this.ident( localctx.category );
	         localctx.art.path = []; this.pushIdent( localctx.art.path, localctx.head.id, localctx.headat ); 
	        this.state = 3651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===15) {
	            this.state = 3642;
	            this.match(languageParser.T__14);
	            this.state = 3644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 3643;
	                localctx.at = this.match(languageParser.T__25);
	            }

	            this.state = 3646;
	            localctx.tail = this.ident( localctx.category );

	                  if (localctx.at) { localctx.category =  'uncheckedAnno' }
	                  this.pushIdent( localctx.art.path, localctx.tail.id, localctx.at );
	                    // Otherwise, localctx.at may continue to be set after one `.@anno` segment.
	                    localctx.at = null;
	                  
	            this.state = 3653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationPathVariant(art) {
	    let localctx = new AnnotationPathVariantContext(this, this._ctx, this.state, art);
	    this.enterRule(localctx, 264, languageParser.RULE_annotationPathVariant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	         this.reportUnexpectedSpace();; this.meltKeywordToIdentifier(); 
	        this.state = 3655;
	        this.simplePath( localctx.variant, 'variant' );
	         localctx.art.variant = localctx.variant; 
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.art); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annoValue(assignment) {
	    let localctx = new AnnoValueContext(this, this._ctx, this.state, assignment);
	    this.enterRule(localctx, 266, languageParser.RULE_annoValue);
	    var _la = 0;
	    try {
	        this.state = 3667;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 6:
	        case 9:
	        case 10:
	        case 11:
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 51:
	        case 59:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3658;
	            localctx.base = this.annoValueBase( localctx.assignment );
	            break;
	        case 26:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 3659;
	                localctx.at = this.match(languageParser.T__25);
	            }

	            this.state = 3662;
	            this.annotationPath( localctx.assignment, 'annoref', localctx.at );
	            this.state = 3665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 3663;
	                this.match(languageParser.T__26);
	                this.state = 3664;
	                this.annotationPathVariant( localctx.assignment );
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annoValueBase(assignment) {
	    let localctx = new AnnoValueBaseContext(this, this._ctx, this.state, assignment);
	    this.enterRule(localctx, 268, languageParser.RULE_annoValueBase);
	    var _la = 0;
	    try {
	        this.state = 3736;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3669;
	            this.match(languageParser.T__1);
	             localctx.assignment['$'+'flatten'] = []; this.meltKeywordToIdentifier(); 
	            this.state = 3671;
	            this.flattenedValue( localctx.assignment );
	            this.state = 3677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3672;
	                this.match(languageParser.T__2);

	                        this.meltKeywordToIdentifier();
	                        if (this.isStraightBefore("}")) break; // allow ',' before ')'
	                      
	                this.state = 3674;
	                this.flattenedValue( localctx.assignment );
	                this.state = 3679;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3680;
	            this.match(languageParser.T__3);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3682;
	            this.match(languageParser.T__10);
	             localctx.assignment.val = []; localctx.assignment.literal = 'array'; 
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 469765700) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4228120595) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 1023) !== 0)) {
	                this.state = 3695;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 2:
	                case 6:
	                case 9:
	                case 10:
	                case 11:
	                case 26:
	                case 27:
	                case 33:
	                case 34:
	                case 37:
	                case 51:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                case 100:
	                case 101:
	                case 102:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 108:
	                case 109:
	                case 110:
	                case 111:
	                case 112:
	                case 113:
	                case 114:
	                case 115:
	                case 116:
	                case 117:
	                case 118:
	                case 119:
	                case 120:
	                case 121:
	                case 122:
	                case 123:
	                case 124:
	                case 125:
	                case 126:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 132:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                    this.state = 3685;
	                    localctx.head = this.annoSubValue();
	                     localctx.assignment.val.push( localctx.head.val ); 
	                    break;
	                case 28:
	                    this.state = 3688;
	                    localctx.e = this.match(languageParser.T__27);
	                    this.state = 3692;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===134) {
	                        this.state = 3689;
	                        this.match(languageParser.UP);
	                        this.state = 3690;
	                        this.match(languageParser.TO);
	                        this.state = 3691;
	                        localctx.upTo = this.annoSubValue();
	                    }

	                    {
	                              const item = { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) };
	                              localctx.assignment.val.push( item );
	                              if (localctx.upTo) item.upTo = localctx.upTo.val;
	                              localctx.seenEllipsis =  !localctx.upTo || 'upTo'
	                            }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 3715;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 3697;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore(']')) break; 
	                     this.meltKeywordToIdentifier(true); 
	                    this.state = 3711;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 2:
	                    case 6:
	                    case 9:
	                    case 10:
	                    case 11:
	                    case 26:
	                    case 27:
	                    case 33:
	                    case 34:
	                    case 37:
	                    case 51:
	                    case 59:
	                    case 60:
	                    case 61:
	                    case 62:
	                    case 63:
	                    case 64:
	                    case 65:
	                    case 66:
	                    case 67:
	                    case 68:
	                    case 69:
	                    case 70:
	                    case 71:
	                    case 72:
	                    case 73:
	                    case 74:
	                    case 75:
	                    case 76:
	                    case 77:
	                    case 78:
	                    case 79:
	                    case 80:
	                    case 81:
	                    case 82:
	                    case 83:
	                    case 84:
	                    case 85:
	                    case 86:
	                    case 87:
	                    case 88:
	                    case 89:
	                    case 90:
	                    case 91:
	                    case 92:
	                    case 93:
	                    case 94:
	                    case 95:
	                    case 96:
	                    case 97:
	                    case 98:
	                    case 99:
	                    case 100:
	                    case 101:
	                    case 102:
	                    case 103:
	                    case 104:
	                    case 105:
	                    case 106:
	                    case 107:
	                    case 108:
	                    case 109:
	                    case 110:
	                    case 111:
	                    case 112:
	                    case 113:
	                    case 114:
	                    case 115:
	                    case 116:
	                    case 117:
	                    case 118:
	                    case 119:
	                    case 120:
	                    case 121:
	                    case 122:
	                    case 123:
	                    case 124:
	                    case 125:
	                    case 126:
	                    case 127:
	                    case 128:
	                    case 129:
	                    case 130:
	                    case 131:
	                    case 132:
	                    case 133:
	                    case 134:
	                    case 135:
	                    case 136:
	                    case 137:
	                    case 138:
	                        this.state = 3700;
	                        localctx.tail = this.annoSubValue();
	                         localctx.assignment.val.push( localctx.tail.val ); 
	                        break;
	                    case 28:
	                         localctx.upTo = null; 
	                        this.state = 3704;
	                        localctx.e = this.match(languageParser.T__27);
	                        this.state = 3708;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===134) {
	                            this.state = 3705;
	                            this.match(languageParser.UP);
	                            this.state = 3706;
	                            this.match(languageParser.TO);
	                            this.state = 3707;
	                            localctx.upTo = this.annoSubValue();
	                        }

	                        {
	                                    const item = { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) };
	                                    if (localctx.upTo) item.upTo = localctx.upTo.val;
	                                    localctx.assignment.val.push( item );
	                                    if (localctx.seenEllipsis === true)
	                                      this.error( 'syntax-unexpected-ellipsis', localctx.e,
	                                                  { '#': 'duplicate', code: '...', keyword: 'up to' } );
	                                    else
	                                      localctx.seenEllipsis =  !localctx.upTo || 'upTo'
	                                  }
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    this.state = 3717;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 3720;
	            localctx.cb = this.match(languageParser.T__13);

	                  if (localctx.seenEllipsis === 'upTo')
	                    this.error( 'syntax-missing-ellipsis', localctx.cb, // at closing bracket
	                                { code: '... up to', newcode: '...' } );
	                
	            break;
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 51:
	        case 59:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3722;
	            localctx.v1 = this.literalValue();
	             this.assignAnnotationValue( localctx.assignment, localctx.v1.val ); 
	            break;
	        case 9:
	        case 10:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3727;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	                this.state = 3725;
	                localctx.plus = this.match(languageParser.T__8);
	                break;
	            case 10:
	                this.state = 3726;
	                localctx.min = this.match(languageParser.T__9);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3729;
	            localctx.num = this.match(languageParser.Number);
	              this.assignAnnotationValue( localctx.assignment, this.numberLiteral( localctx.plus||localctx.min ) ); 
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3731;
	            this.match(languageParser.T__5);
	            this.state = 3732;
	            localctx.cond = this.condition();
	             this.expressionAsAnnotationValue( localctx.assignment, localctx.cond.expr, (localctx.cond == null ? null : localctx.cond.start), (localctx.cond == null ? null : localctx.cond.stop) ); 
	            this.state = 3734;
	            this.match(languageParser.T__6);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation( localctx.assignment ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flattenedValue(assignment) {
	    let localctx = new FlattenedValueContext(this, this._ctx, this.state, assignment);
	    this.enterRule(localctx, 270, languageParser.RULE_flattenedValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 3738;
	            localctx.at = this.match(languageParser.T__25);
	        }

	        this.state = 3741;
	        this.annotationPath( localctx.val.name, 'name', localctx.at );
	        this.state = 3744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 3742;
	            this.match(languageParser.T__26);
	            this.state = 3743;
	            this.annotationPathVariant( localctx.val.name );
	        }

	        this.state = 3749;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 3746;
	            this.match(languageParser.T__4);
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3748;
	            this.annoValue( localctx.val );
	        }

	         localctx.assignment['$'+'flatten'].push( localctx.val ); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedValue(struct) {
	    let localctx = new NamedValueContext(this, this._ctx, this.state, struct);
	    this.enterRule(localctx, 272, languageParser.RULE_namedValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 3753;
	            localctx.at = this.match(languageParser.T__25);
	        }

	        this.state = 3756;
	        this.annotationPath( localctx.val.name, 'name', localctx.at );
	        this.state = 3762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 3757;
	            this.match(languageParser.T__4);
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3759;
	            localctx.sub = this.annoSubValue();
	             this.assignAnnotationValue( localctx.val, localctx.sub.val ); 
	        }


	              if (!localctx.val.location) localctx.val.location = localctx.val.name.location;
	              this.addDef( localctx.val, localctx.struct, 'struct', null, localctx.val.name ); // TODO: re-check name
	            
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annoSubValue() {
	    let localctx = new AnnoSubValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, languageParser.RULE_annoSubValue);
	    var _la = 0;
	    try {
	        this.state = 3821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3766;
	            this.match(languageParser.T__1);
	             localctx.val.struct = Object.create(null); localctx.val.literal = 'struct'; 
	             this.meltKeywordToIdentifier(); 
	            this.state = 3769;
	            this.namedValue( localctx.val );
	            this.state = 3775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3770;
	                this.match(languageParser.T__2);

	                        this.meltKeywordToIdentifier();
	                        if (this.isStraightBefore("}")) break; // allow ',' before '}'
	                      
	                this.state = 3772;
	                this.namedValue( localctx.val );
	                this.state = 3777;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3778;
	            this.match(languageParser.T__3);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3780;
	            this.match(languageParser.T__10);
	             localctx.val.val = []; localctx.val.literal = 'array'; 
	             this.meltKeywordToIdentifier(true); 
	            this.state = 3796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 201330244) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4228120595) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 1023) !== 0)) {
	                this.state = 3783;
	                localctx.head = this.annoSubValue();
	                 localctx.val.val.push( localctx.head.val ); 
	                this.state = 3793;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 3785;
	                    this.match(languageParser.T__2);
	                     if (this.isStraightBefore(']')) break; 
	                     this.meltKeywordToIdentifier(true); 
	                    this.state = 3788;
	                    localctx.tail = this.annoSubValue();
	                     localctx.val.val.push( localctx.tail.val ); 
	                    this.state = 3795;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 3798;
	            this.match(languageParser.T__13);
	            break;
	        case 27:
	        case 33:
	        case 34:
	        case 37:
	        case 51:
	        case 59:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3799;
	            localctx.v1 = this.literalValue();
	             this.assignAnnotationValue( localctx.val, localctx.v1.val ); 
	            break;
	        case 9:
	        case 10:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3804;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	                this.state = 3802;
	                localctx.plus = this.match(languageParser.T__8);
	                break;
	            case 10:
	                this.state = 3803;
	                localctx.min = this.match(languageParser.T__9);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3806;
	            localctx.num = this.match(languageParser.Number);
	             this.assignAnnotationValue( localctx.val, this.numberLiteral( localctx.plus||localctx.min ) ); 
	            break;
	        case 26:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 3808;
	                localctx.at = this.match(languageParser.T__25);
	            }

	            this.state = 3811;
	            this.annotationPath( localctx.val, 'annoref', localctx.at );
	            this.state = 3814;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 3812;
	                this.match(languageParser.T__26);
	                this.state = 3813;
	                this.annotationPathVariant( localctx.val );
	            }

	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3816;
	            this.match(languageParser.T__5);
	            this.state = 3817;
	            localctx.cond = this.condition();
	             this.expressionAsAnnotationValue( localctx.val, localctx.cond.expr, (localctx.cond == null ? null : localctx.cond.start), (localctx.cond == null ? null : localctx.cond.stop) ); 
	            this.state = 3819;
	            this.match(languageParser.T__6);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.val); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalValue() {
	    let localctx = new LiteralValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, languageParser.RULE_literalValue);
	     localctx.tok =  this.getCurrentToken() 
	    try {
	        this.state = 3838;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3823;
	            localctx.hash = this.match(languageParser.T__26);
	             this.reportUnexpectedSpace( localctx.hash );; this.meltKeywordToIdentifier(); 
	            this.state = 3825;
	            localctx.name = this.ident('enumref');
	             localctx.val = { literal: 'enum', sym: localctx.name.id } 
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3828;
	            this.match(languageParser.NULL);
	             localctx.val =  { literal: 'null', val: null } 
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3830;
	            this.match(languageParser.Boolean);
	             localctx.val =  { literal: 'boolean', val: localctx.tok.text.toLowerCase() != 'false' } 
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3832;
	            this.match(languageParser.Number);
	             localctx.val =  this.numberLiteral( '' ) 
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3834;
	            this.match(languageParser.String);
	             localctx.val =  this.quotedLiteral( localctx.tok, 'string' ) 
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3836;
	            this.match(languageParser.QuotedLiteral);
	             localctx.val =  this.quotedLiteral( localctx.tok ) 
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	         this.attachLocation(localctx.val); 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identNoKeyword(category) {
	    let localctx = new IdentNoKeywordContext(this, this._ctx, this.state, category);
	    this.enterRule(localctx, 278, languageParser.RULE_identNoKeyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3840;
	        this.match(languageParser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	         localctx.id =  this.identAst( null, localctx.category ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ident(category) {
	    let localctx = new IdentContext(this, this._ctx, this.state, category);
	    this.enterRule(localctx, 280, languageParser.RULE_ident);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3842;
	        _la = this._input.LA(1);
	        if(!(((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294967295) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 4294967295) !== 0) || ((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 32767) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this._ctx.stop = this._input.LT(-1);
	         localctx.id =  this.identAst( null, localctx.category ) 
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

languageParser.EOF = antlr4.Token.EOF;
languageParser.T__0 = 1;
languageParser.T__1 = 2;
languageParser.T__2 = 3;
languageParser.T__3 = 4;
languageParser.T__4 = 5;
languageParser.T__5 = 6;
languageParser.T__6 = 7;
languageParser.T__7 = 8;
languageParser.T__8 = 9;
languageParser.T__9 = 10;
languageParser.T__10 = 11;
languageParser.T__11 = 12;
languageParser.T__12 = 13;
languageParser.T__13 = 14;
languageParser.T__14 = 15;
languageParser.T__15 = 16;
languageParser.T__16 = 17;
languageParser.T__17 = 18;
languageParser.T__18 = 19;
languageParser.T__19 = 20;
languageParser.T__20 = 21;
languageParser.T__21 = 22;
languageParser.T__22 = 23;
languageParser.T__23 = 24;
languageParser.T__24 = 25;
languageParser.T__25 = 26;
languageParser.T__26 = 27;
languageParser.T__27 = 28;
languageParser.WhiteSpace = 29;
languageParser.DocComment = 30;
languageParser.Comment = 31;
languageParser.LineComment = 32;
languageParser.String = 33;
languageParser.QuotedLiteral = 34;
languageParser.UnterminatedLiteral = 35;
languageParser.UnterminatedDelimitedIdentifier = 36;
languageParser.Boolean = 37;
languageParser.ALL = 38;
languageParser.ANY = 39;
languageParser.AS = 40;
languageParser.BY = 41;
languageParser.CASE = 42;
languageParser.CAST = 43;
languageParser.DISTINCT = 44;
languageParser.EXISTS = 45;
languageParser.FROM = 46;
languageParser.IN = 47;
languageParser.KEY = 48;
languageParser.NEW = 49;
languageParser.NOT = 50;
languageParser.NULL = 51;
languageParser.OF = 52;
languageParser.ON = 53;
languageParser.SELECT = 54;
languageParser.SOME = 55;
languageParser.WHEN = 56;
languageParser.WHERE = 57;
languageParser.WITH = 58;
languageParser.Number = 59;
languageParser.ABSTRACT = 60;
languageParser.ACTION = 61;
languageParser.ACTIONS = 62;
languageParser.AND = 63;
languageParser.ANNOTATE = 64;
languageParser.ANNOTATION = 65;
languageParser.ARRAY = 66;
languageParser.ASC = 67;
languageParser.ASPECT = 68;
languageParser.ASSOCIATION = 69;
languageParser.BETWEEN = 70;
languageParser.COLUMNS = 71;
languageParser.COMPOSITION = 72;
languageParser.CONTEXT = 73;
languageParser.CROSS = 74;
languageParser.CURRENT = 75;
languageParser.DEFAULT = 76;
languageParser.DEFINE = 77;
languageParser.DEFINITIONS = 78;
languageParser.DESC = 79;
languageParser.ELEMENTS = 80;
languageParser.ELSE = 81;
languageParser.END = 82;
languageParser.ENTITY = 83;
languageParser.ENUM = 84;
languageParser.EVENT = 85;
languageParser.ESCAPE = 86;
languageParser.EXACT = 87;
languageParser.EXCEPT = 88;
languageParser.EXCLUDING = 89;
languageParser.EXTEND = 90;
languageParser.FIRST = 91;
languageParser.FLOATING = 92;
languageParser.FOLLOWING = 93;
languageParser.FULL = 94;
languageParser.FUNCTION = 95;
languageParser.GROUP = 96;
languageParser.HAVING = 97;
languageParser.INNER = 98;
languageParser.INTERSECT = 99;
languageParser.INTO = 100;
languageParser.IS = 101;
languageParser.JOIN = 102;
languageParser.LAST = 103;
languageParser.LEFT = 104;
languageParser.LIKE = 105;
languageParser.LIMIT = 106;
languageParser.LOCALIZED = 107;
languageParser.MANY = 108;
languageParser.MINUS = 109;
languageParser.MIXIN = 110;
languageParser.NAMESPACE = 111;
languageParser.NULLS = 112;
languageParser.OFFSET = 113;
languageParser.ONE = 114;
languageParser.OR = 115;
languageParser.ORDER = 116;
languageParser.OUTER = 117;
languageParser.PARAMETERS = 118;
languageParser.PARTITION = 119;
languageParser.PRECEDING = 120;
languageParser.PROJECTION = 121;
languageParser.REDIRECTED = 122;
languageParser.RETURNS = 123;
languageParser.RIGHT = 124;
languageParser.ROW = 125;
languageParser.ROWS = 126;
languageParser.SERVICE = 127;
languageParser.STORED = 128;
languageParser.THEN = 129;
languageParser.TO = 130;
languageParser.TYPE = 131;
languageParser.UNION = 132;
languageParser.UNBOUNDED = 133;
languageParser.UP = 134;
languageParser.USING = 135;
languageParser.VARIABLE = 136;
languageParser.VIEW = 137;
languageParser.Identifier = 138;
languageParser.IllegalToken = 139;
languageParser.ELEMENT = 140;
languageParser.MASKED = 141;
languageParser.VIRTUAL = 142;
languageParser.OVER = 143;
languageParser.HelperToken1 = 144;
languageParser.HelperToken2 = 145;
languageParser.HideAlternatives = 146;
languageParser.GenericExpr = 147;
languageParser.GenericSeparator = 148;
languageParser.GenericIntro = 149;
languageParser.DOTbeforeBRACE = 150;
languageParser.COMPOSITIONofBRACE = 151;
languageParser.SemicolonTopLevel = 152;

languageParser.RULE_start = 0;
languageParser.RULE_namespaceDeclaration = 1;
languageParser.RULE_usingDeclaration = 2;
languageParser.RULE_usingProxy = 3;
languageParser.RULE_artifactDefOrExtend = 4;
languageParser.RULE_optArtifactsBlock = 5;
languageParser.RULE_requiredSemi = 6;
languageParser.RULE_optionalSemi = 7;
languageParser.RULE_annotationDef = 8;
languageParser.RULE_serviceDef = 9;
languageParser.RULE_contextDef = 10;
languageParser.RULE_eventDef = 11;
languageParser.RULE_viewDef = 12;
languageParser.RULE_entityDef = 13;
languageParser.RULE_aspectDef = 14;
languageParser.RULE_elementsAndOptActions = 15;
languageParser.RULE_typeDef = 16;
languageParser.RULE_actionFunctionMainDef = 17;
languageParser.RULE_actionFunctionDef = 18;
languageParser.RULE_parameterDef = 19;
languageParser.RULE_parameterListDef = 20;
languageParser.RULE_enumSymbolDef = 21;
languageParser.RULE_elementDef = 22;
languageParser.RULE_elementDefInner = 23;
languageParser.RULE_elementType = 24;
languageParser.RULE_elementProperties = 25;
languageParser.RULE_defaultAndNullability = 26;
languageParser.RULE_defaultValue = 27;
languageParser.RULE_extendArtifact = 28;
languageParser.RULE_extendService = 29;
languageParser.RULE_extendContext = 30;
languageParser.RULE_extendEntityOrAspect = 31;
languageParser.RULE_extendForEntity = 32;
languageParser.RULE_extendProjection = 33;
languageParser.RULE_extendType = 34;
languageParser.RULE_extendWithOptElementsOrType = 35;
languageParser.RULE_extendWithOptElementsNoWith = 36;
languageParser.RULE_elementDefOrExtend = 37;
languageParser.RULE_extendElement = 38;
languageParser.RULE_annotateArtifact = 39;
languageParser.RULE_annotateArtifactActions = 40;
languageParser.RULE_annotateArtifactElements = 41;
languageParser.RULE_annotateElement = 42;
languageParser.RULE_annotateAction = 43;
languageParser.RULE_annotateReturns = 44;
languageParser.RULE_annotateParam = 45;
languageParser.RULE_includeRef = 46;
languageParser.RULE_typeSpec = 47;
languageParser.RULE_returnTypeSpec = 48;
languageParser.RULE_typeSpecCont = 49;
languageParser.RULE_typeSpecSemi = 50;
languageParser.RULE_typeStruct = 51;
languageParser.RULE_typeCompoStruct = 52;
languageParser.RULE_typeArray = 53;
languageParser.RULE_typeAssociationBase = 54;
languageParser.RULE_typeAssociationCont = 55;
languageParser.RULE_typeAssociationElementCont = 56;
languageParser.RULE_typeToOne = 57;
languageParser.RULE_typeToMany = 58;
languageParser.RULE_cardinality = 59;
languageParser.RULE_targetCardinality = 60;
languageParser.RULE_optInvisibleNullability = 61;
languageParser.RULE_nullability = 62;
languageParser.RULE_foreignKey = 63;
languageParser.RULE_typeTypeOf = 64;
languageParser.RULE_typeRefOptArgs = 65;
languageParser.RULE_typeRefArgs = 66;
languageParser.RULE_typeNamedArgList = 67;
languageParser.RULE_typeNamedArg = 68;
languageParser.RULE_queryEOF = 69;
languageParser.RULE_projectionSpec = 70;
languageParser.RULE_projectionClauses = 71;
languageParser.RULE_queryExpression = 72;
languageParser.RULE_queryExpressionCont = 73;
languageParser.RULE_queryPrimary = 74;
languageParser.RULE_selectQuery = 75;
languageParser.RULE_querySource = 76;
languageParser.RULE_tableExpression = 77;
languageParser.RULE_tableExpressionCont = 78;
languageParser.RULE_tableTerm = 79;
languageParser.RULE_fromRefWithOptAlias = 80;
languageParser.RULE_tableOrQueryParenthesis = 81;
languageParser.RULE_tableOrQueryExpressionCont = 82;
languageParser.RULE_fromPath = 83;
languageParser.RULE_fromArguments = 84;
languageParser.RULE_excludingClause = 85;
languageParser.RULE_projectionExclusion = 86;
languageParser.RULE_mixinElementDef = 87;
languageParser.RULE_selectItemDef = 88;
languageParser.RULE_selectItemDefBody = 89;
languageParser.RULE_bracedSelectItemListDef = 90;
languageParser.RULE_selectItemInlineList = 91;
languageParser.RULE_selectItemInlineDef = 92;
languageParser.RULE_orderByClause = 93;
languageParser.RULE_limitClause = 94;
languageParser.RULE_orderBySpec = 95;
languageParser.RULE_joinOp = 96;
languageParser.RULE_joinCardinality = 97;
languageParser.RULE_conditionEOF = 98;
languageParser.RULE_condition = 99;
languageParser.RULE_conditionCont = 100;
languageParser.RULE_conditionTerm = 101;
languageParser.RULE_conditionPrimary = 102;
languageParser.RULE_comparisonCont = 103;
languageParser.RULE_expression = 104;
languageParser.RULE_expressionCont = 105;
languageParser.RULE_expressionPrimary = 106;
languageParser.RULE_conditionOrQueryParenthesis = 107;
languageParser.RULE_specialFunction = 108;
languageParser.RULE_simplePath = 109;
languageParser.RULE_valuePath = 110;
languageParser.RULE_pathArguments = 111;
languageParser.RULE_namedExpression = 112;
languageParser.RULE_funcExpression = 113;
languageParser.RULE_overClause = 114;
languageParser.RULE_partitionByClause = 115;
languageParser.RULE_funcOrderByClause = 116;
languageParser.RULE_exprOrderByClause = 117;
languageParser.RULE_orderBySpecInExpr = 118;
languageParser.RULE_windowFrameClause = 119;
languageParser.RULE_windowFrameBoundSpec = 120;
languageParser.RULE_windowFrameStartSpec = 121;
languageParser.RULE_cardinalityAndFilter = 122;
languageParser.RULE_optionalCardinality = 123;
languageParser.RULE_filterWhereClause = 124;
languageParser.RULE_optionalWhereForFilter = 125;
languageParser.RULE_annotationAssignment_fix = 126;
languageParser.RULE_annotationAssignment_ll1 = 127;
languageParser.RULE_annotationAssignment_atn = 128;
languageParser.RULE_annotationAssignment_paren = 129;
languageParser.RULE_annotationAssignment_1 = 130;
languageParser.RULE_annotationPath = 131;
languageParser.RULE_annotationPathVariant = 132;
languageParser.RULE_annoValue = 133;
languageParser.RULE_annoValueBase = 134;
languageParser.RULE_flattenedValue = 135;
languageParser.RULE_namedValue = 136;
languageParser.RULE_annoSubValue = 137;
languageParser.RULE_literalValue = 138;
languageParser.RULE_identNoKeyword = 139;
languageParser.RULE_ident = 140;

class StartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_start;
        this.source = null
        this._sync = 'recover'
    }

	EOF() {
	    return this.getToken(languageParser.EOF, 0);
	};

	usingDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UsingDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(UsingDeclarationContext,i);
	    }
	};

	namespaceDeclaration() {
	    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
	};

	artifactDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArtifactDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ArtifactDefOrExtendContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitStart(this);
		}
	}


}



class NamespaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, source) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namespaceDeclaration;
        this.source = null
        this.decl = {}
        this.source = source || null;
    }

	NAMESPACE() {
	    return this.getToken(languageParser.NAMESPACE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterNamespaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitNamespaceDeclaration(this);
		}
	}


}



class UsingDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, source) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_usingDeclaration;
        this.source = null
        this.decl = {}
        this.str = null;
        this.source = source || null;
    }

	USING() {
	    return this.getToken(languageParser.USING, 0);
	};

	FROM() {
	    return this.getToken(languageParser.FROM, 0);
	};

	usingProxy = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UsingProxyContext);
	    } else {
	        return this.getTypedRuleContext(UsingProxyContext,i);
	    }
	};

	String() {
	    return this.getToken(languageParser.String, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterUsingDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitUsingDeclaration(this);
		}
	}


}



class UsingProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer, proxy) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_usingProxy;
        this.outer = null
        this.proxy = null
        this.name = null;
        this.outer = outer || null;
        this.proxy = proxy || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterUsingProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitUsingProxy(this);
		}
	}


}



class ArtifactDefOrExtendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_artifactDefOrExtend;
        this.outer = null
        this.defOnly = false
        this.art = new parser.XsnArtifact()
        this.extend = null;
        this.annotate = null;
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }

	annotateArtifact() {
	    return this.getTypedRuleContext(AnnotateArtifactContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	EXTEND() {
	    return this.getToken(languageParser.EXTEND, 0);
	};

	ANNOTATE() {
	    return this.getToken(languageParser.ANNOTATE, 0);
	};

	serviceDef() {
	    return this.getTypedRuleContext(ServiceDefContext,0);
	};

	contextDef() {
	    return this.getTypedRuleContext(ContextDefContext,0);
	};

	entityDef() {
	    return this.getTypedRuleContext(EntityDefContext,0);
	};

	typeDef() {
	    return this.getTypedRuleContext(TypeDefContext,0);
	};

	aspectDef() {
	    return this.getTypedRuleContext(AspectDefContext,0);
	};

	annotationDef() {
	    return this.getTypedRuleContext(AnnotationDefContext,0);
	};

	viewDef() {
	    return this.getTypedRuleContext(ViewDefContext,0);
	};

	eventDef() {
	    return this.getTypedRuleContext(EventDefContext,0);
	};

	actionFunctionMainDef() {
	    return this.getTypedRuleContext(ActionFunctionMainDefContext,0);
	};

	extendService() {
	    return this.getTypedRuleContext(ExtendServiceContext,0);
	};

	extendContext() {
	    return this.getTypedRuleContext(ExtendContextContext,0);
	};

	extendEntityOrAspect() {
	    return this.getTypedRuleContext(ExtendEntityOrAspectContext,0);
	};

	extendProjection() {
	    return this.getTypedRuleContext(ExtendProjectionContext,0);
	};

	extendType() {
	    return this.getTypedRuleContext(ExtendTypeContext,0);
	};

	extendArtifact() {
	    return this.getTypedRuleContext(ExtendArtifactContext,0);
	};

	DEFINE() {
	    return this.getToken(languageParser.DEFINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterArtifactDefOrExtend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitArtifactDefOrExtend(this);
		}
	}


}



class OptArtifactsBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optArtifactsBlock;
        this.art = null
        this.defOnly = false
        this.art = art || null;
        this.defOnly = defOnly || null;
    }

	artifactDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArtifactDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ArtifactDefOrExtendContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOptArtifactsBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOptArtifactsBlock(this);
		}
	}


}



class RequiredSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_requiredSemi;
    }


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterRequiredSemi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitRequiredSemi(this);
		}
	}


}



class OptionalSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalSemi;
    }


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOptionalSemi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOptionalSemi(this);
		}
	}


}



class AnnotationDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.annotation = null;
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeSpecSemi() {
	    return this.getTypedRuleContext(TypeSpecSemiContext,0);
	};

	ANNOTATION() {
	    return this.getToken(languageParser.ANNOTATION, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationDef(this);
		}
	}


}



class ServiceDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_serviceDef;
        this.art = null
        this.outer = null
        this.defOnly = false
        this.name = new parser.XsnName();
        this.art = art || null;
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }

	SERVICE() {
	    return this.getToken(languageParser.SERVICE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterServiceDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitServiceDef(this);
		}
	}


}



class ContextDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer, defOnly) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_contextDef;
        this.art = null
        this.outer = null
        this.defOnly = false
        this.name = new parser.XsnName();
        this.art = art || null;
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }

	CONTEXT() {
	    return this.getToken(languageParser.CONTEXT, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterContextDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitContextDef(this);
		}
	}


}



class EventDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_eventDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName();
        this.qp = null;
        this.art = art || null;
        this.outer = outer || null;
    }

	EVENT() {
	    return this.getToken(languageParser.EVENT, 0);
	};

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	projectionSpec() {
	    return this.getTypedRuleContext(ProjectionSpecContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterEventDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitEventDef(this);
		}
	}


}



class ViewDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_viewDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName();
        this.v = null;
        this.qe = null;
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	VIEW() {
	    return this.getToken(languageParser.VIEW, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	PARAMETERS() {
	    return this.getToken(languageParser.PARAMETERS, 0);
	};

	parameterDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDefContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDefContext,i);
	    }
	};

	HideAlternatives() {
	    return this.getToken(languageParser.HideAlternatives, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterViewDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitViewDef(this);
		}
	}


}



class EntityDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_entityDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.qe = null;
        this.qp = null;
        this.art = art || null;
        this.outer = outer || null;
    }

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	projectionClauses() {
	    return this.getTypedRuleContext(ProjectionClausesContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	projectionSpec() {
	    return this.getTypedRuleContext(ProjectionSpecContext,0);
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterEntityDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitEntityDef(this);
		}
	}


}



class AspectDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_aspectDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.abs = null;
        this.ent = null;
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ASPECT() {
	    return this.getToken(languageParser.ASPECT, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	elementsAndOptActions() {
	    return this.getTypedRuleContext(ElementsAndOptActionsContext,0);
	};

	HideAlternatives() {
	    return this.getToken(languageParser.HideAlternatives, 0);
	};

	ABSTRACT() {
	    return this.getToken(languageParser.ABSTRACT, 0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAspectDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAspectDef(this);
		}
	}


}



class ElementsAndOptActionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementsAndOptActions;
        this.art = null
        this.art = art || null;
    }

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterElementsAndOptActions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitElementsAndOptActions(this);
		}
	}


}



class TypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeSpecSemi() {
	    return this.getTypedRuleContext(TypeSpecSemiContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeDef(this);
		}
	}


}



class ActionFunctionMainDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_actionFunctionMainDef;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	ACTION() {
	    return this.getToken(languageParser.ACTION, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	FUNCTION() {
	    return this.getToken(languageParser.FUNCTION, 0);
	};

	returnTypeSpec() {
	    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterActionFunctionMainDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitActionFunctionMainDef(this);
		}
	}


}



class ActionFunctionDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_actionFunctionDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null;
        this.outer = outer || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ACTION() {
	    return this.getToken(languageParser.ACTION, 0);
	};

	parameterListDef() {
	    return this.getTypedRuleContext(ParameterListDefContext,0);
	};

	FUNCTION() {
	    return this.getToken(languageParser.FUNCTION, 0);
	};

	returnTypeSpec() {
	    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterActionFunctionDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitActionFunctionDef(this);
		}
	}


}



class ParameterDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_parameterDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null;
        this.outer = outer || null;
    }

	typeSpec() {
	    return this.getTypedRuleContext(TypeSpecContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterParameterDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitParameterDef(this);
		}
	}


}



class ParameterListDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_parameterListDef;
        this.art = null
        this.art = art || null;
    }

	parameterDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDefContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterParameterListDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitParameterListDef(this);
		}
	}


}



class EnumSymbolDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_enumSymbolDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null;
        this.val = null;
        this.plus = null;
        this.min = null;
        this.outer = outer || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterEnumSymbolDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitEnumSymbolDef(this);
		}
	}


}



class ElementDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDef;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.outer = outer || null;
    }

	elementDefInner() {
	    return this.getTypedRuleContext(ElementDefInnerContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterElementDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitElementDef(this);
		}
	}


}



class ElementDefInnerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer, explicitElement) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDefInner;
        this.art = null
        this.outer = null
        this.explicitElement = false
        this.virtual = null;
        this.key = null;
        this.masked = null;
        this.name = null;
        this.eq = null;
        this.e = null;
        this.stored = null;
        this.art = art || null;
        this.outer = outer || null;
        this.explicitElement = explicitElement || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ELEMENT() {
	    return this.getToken(languageParser.ELEMENT, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	VIRTUAL() {
	    return this.getToken(languageParser.VIRTUAL, 0);
	};

	KEY() {
	    return this.getToken(languageParser.KEY, 0);
	};

	MASKED() {
	    return this.getToken(languageParser.MASKED, 0);
	};

	nullability() {
	    return this.getTypedRuleContext(NullabilityContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	STORED() {
	    return this.getToken(languageParser.STORED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterElementDefInner(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitElementDefInner(this);
		}
	}


}



class ElementTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementType;
        this.art = null
        this.one = null;
        this.many = null;
        this.array = null;
        this.of = null;
        this.l = null;
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	typeCompoStruct() {
	    return this.getTypedRuleContext(TypeCompoStructContext,0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeAssociationElementCont() {
	    return this.getTypedRuleContext(TypeAssociationElementContContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ONE() {
	    return this.getToken(languageParser.ONE, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	optInvisibleNullability() {
	    return this.getTypedRuleContext(OptInvisibleNullabilityContext,0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	elementProperties() {
	    return this.getTypedRuleContext(ElementPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterElementType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitElementType(this);
		}
	}


}



class ElementPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, elem) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementProperties;
        this.elem = null
        this.e = null;
        this.stored = null;
        this.elem = elem || null;
    }

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STORED() {
	    return this.getToken(languageParser.STORED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterElementProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitElementProperties(this);
		}
	}


}



class DefaultAndNullabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, elem) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_defaultAndNullability;
        this.elem = null
        this.elem = elem || null;
    }

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	nullability() {
	    return this.getTypedRuleContext(NullabilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterDefaultAndNullability(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitDefaultAndNullability(this);
		}
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_defaultValue;
        this.art = null
        this.elem = null
        this.elements = {}
        this.expr = null;
        this.art = art || null;
    }

	DEFAULT() {
	    return this.getToken(languageParser.DEFAULT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitDefaultValue(this);
		}
	}


}



class ExtendArtifactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendArtifact;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.elemName = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	extendWithOptElementsOrType() {
	    return this.getTypedRuleContext(ExtendWithOptElementsOrTypeContext,0);
	};

	extendWithOptElementsNoWith() {
	    return this.getTypedRuleContext(ExtendWithOptElementsNoWithContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ELEMENTS() {
	    return this.getToken(languageParser.ELEMENTS, 0);
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	typeNamedArgList() {
	    return this.getTypedRuleContext(TypeNamedArgListContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	DEFINITIONS() {
	    return this.getToken(languageParser.DEFINITIONS, 0);
	};

	COLUMNS() {
	    return this.getToken(languageParser.COLUMNS, 0);
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	artifactDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArtifactDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ArtifactDefOrExtendContext,i);
	    }
	};

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendArtifact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendArtifact(this);
		}
	}


}



class ExtendServiceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendService;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	SERVICE() {
	    return this.getToken(languageParser.SERVICE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendService(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendService(this);
		}
	}


}



class ExtendContextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendContext;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	CONTEXT() {
	    return this.getToken(languageParser.CONTEXT, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	optArtifactsBlock() {
	    return this.getTypedRuleContext(OptArtifactsBlockContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendContext(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendContext(this);
		}
	}


}



class ExtendEntityOrAspectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendEntityOrAspect;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ASPECT() {
	    return this.getToken(languageParser.ASPECT, 0);
	};

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	extendForEntity() {
	    return this.getTypedRuleContext(ExtendForEntityContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendEntityOrAspect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendEntityOrAspect(this);
		}
	}


}



class ExtendForEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendForEntity;
        this.art = null
        this.art = art || null;
    }

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendForEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendForEntity(this);
		}
	}


}



class ExtendProjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendProjection;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	PROJECTION() {
	    return this.getToken(languageParser.PROJECTION, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};

	actionFunctionDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActionFunctionDefContext);
	    } else {
	        return this.getTypedRuleContext(ActionFunctionDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendProjection(this);
		}
	}


}



class ExtendTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendType;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	extendWithOptElementsNoWith() {
	    return this.getTypedRuleContext(ExtendWithOptElementsNoWithContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	SemicolonTopLevel() {
	    return this.getToken(languageParser.SemicolonTopLevel, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	typeNamedArgList() {
	    return this.getTypedRuleContext(TypeNamedArgListContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendType(this);
		}
	}


}



class ExtendWithOptElementsOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendWithOptElementsOrType;
        this.art = null
        this.art = art || null;
    }

	extendWithOptElementsNoWith() {
	    return this.getTypedRuleContext(ExtendWithOptElementsNoWithContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ELEMENTS() {
	    return this.getToken(languageParser.ELEMENTS, 0);
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	typeNamedArgList() {
	    return this.getTypedRuleContext(TypeNamedArgListContext,0);
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendWithOptElementsOrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendWithOptElementsOrType(this);
		}
	}


}



class ExtendWithOptElementsNoWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendWithOptElementsNoWith;
        this.art = null
        this.art = art || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	elementDefOrExtend = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefOrExtendContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendWithOptElementsNoWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendWithOptElementsNoWith(this);
		}
	}


}



class ElementDefOrExtendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer, explicitElement) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDefOrExtend;
        this.outer = null
        this.explicitElement = false
        this.art = new parser.XsnArtifact()
        this.outer = outer || null;
        this.explicitElement = explicitElement || null;
    }

	EXTEND() {
	    return this.getToken(languageParser.EXTEND, 0);
	};

	extendElement() {
	    return this.getTypedRuleContext(ExtendElementContext,0);
	};

	elementDefInner() {
	    return this.getTypedRuleContext(ElementDefInnerContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterElementDefOrExtend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitElementDefOrExtend(this);
		}
	}


}



class ExtendElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendElement;
        this.art = null
        this.outer = null
        this.name = null;
        this.art = art || null;
        this.outer = outer || null;
    }

	extendWithOptElementsOrType() {
	    return this.getTypedRuleContext(ExtendWithOptElementsOrTypeContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	ELEMENT() {
	    return this.getToken(languageParser.ELEMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExtendElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExtendElement(this);
		}
	}


}



class AnnotateArtifactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateArtifact;
        this.art = null
        this.outer = null
        this.name = new parser.XsnName()
        this.elemName = new parser.XsnName()
        this.art = art || null;
        this.outer = outer || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	annotateArtifactElements() {
	    return this.getTypedRuleContext(AnnotateArtifactElementsContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotateArtifactActions() {
	    return this.getTypedRuleContext(AnnotateArtifactActionsContext,0);
	};

	annotateParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateParamContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateParamContext,i);
	    }
	};

	annotateReturns() {
	    return this.getTypedRuleContext(AnnotateReturnsContext,0);
	};

	WITH() {
	    return this.getToken(languageParser.WITH, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotateArtifact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotateArtifact(this);
		}
	}


}



class AnnotateArtifactActionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateArtifactActions;
        this.art = null
        this.art = art || null;
    }

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	annotateAction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateActionContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateActionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotateArtifactActions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotateArtifactActions(this);
		}
	}


}



class AnnotateArtifactElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateArtifactElements;
        this.art = null
        this.art = art || null;
    }

	annotateElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateElementContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotateArtifactElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotateArtifactElements(this);
		}
	}


}



class AnnotateElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateElement;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null;
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotateElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateElementContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotateElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotateElement(this);
		}
	}


}



class AnnotateActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateAction;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.name = null;
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotateReturns() {
	    return this.getTypedRuleContext(AnnotateReturnsContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotateParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateParamContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateParamContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotateAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotateAction(this);
		}
	}


}



class AnnotateReturnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateReturns;
        this.art = null
        this.ret = null;
        this.art = art || null;
    }

	RETURNS() {
	    return this.getToken(languageParser.RETURNS, 0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	annotateElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotateElementContext);
	    } else {
	        return this.getTypedRuleContext(AnnotateElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotateReturns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotateReturns(this);
		}
	}


}



class AnnotateParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateParam;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.param = null;
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotateParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotateParam(this);
		}
	}


}



class IncludeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_includeRef;
        this.art = null
        this.incl = {}
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterIncludeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitIncludeRef(this);
		}
	}


}



class TypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpec;
        this.art = null
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	typeSpecCont() {
	    return this.getTypedRuleContext(TypeSpecContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeSpec(this);
		}
	}


}



class ReturnTypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_returnTypeSpec;
        this.art = null
        this.ret = null;
        this.art = art || null;
    }

	typeSpecCont() {
	    return this.getTypedRuleContext(TypeSpecContContext,0);
	};

	RETURNS() {
	    return this.getToken(languageParser.RETURNS, 0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterReturnTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitReturnTypeSpec(this);
		}
	}


}



class TypeSpecContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpecCont;
        this.art = null
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	typeArray() {
	    return this.getTypedRuleContext(TypeArrayContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeSpecCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeSpecCont(this);
		}
	}


}



class TypeSpecSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpecSemi;
        this.art = null
        this.many = null;
        this.array = null;
        this.of = null;
        this.l = null;
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	optionalSemi() {
	    return this.getTypedRuleContext(OptionalSemiContext,0);
	};

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	HelperToken1() {
	    return this.getToken(languageParser.HelperToken1, 0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	optInvisibleNullability() {
	    return this.getTypedRuleContext(OptInvisibleNullabilityContext,0);
	};

	typeAssociationCont() {
	    return this.getTypedRuleContext(TypeAssociationContContext,0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	typeRefArgs() {
	    return this.getTypedRuleContext(TypeRefArgsContext,0);
	};

	includeRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IncludeRefContext);
	    } else {
	        return this.getTypedRuleContext(IncludeRefContext,i);
	    }
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeSpecSemi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeSpecSemi(this);
		}
	}


}



class TypeStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, attachLoc) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeStruct;
        this.art = null
        this.attachLoc = false
        this.art = art || null;
        this.attachLoc = attachLoc || null;
    }

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeStruct(this);
		}
	}


}



class TypeCompoStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeCompoStruct;
        this.art = null
        this.art = art || null;
    }

	COMPOSITIONofBRACE() {
	    return this.getToken(languageParser.COMPOSITIONofBRACE, 0);
	};

	elementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeCompoStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeCompoStruct(this);
		}
	}


}



class TypeArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeArray;
        this.art = null
        this.array = null;
        this.of = null;
        this.many = null;
        this.art = art || null;
    }

	typeStruct() {
	    return this.getTypedRuleContext(TypeStructContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	nullability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NullabilityContext);
	    } else {
	        return this.getTypedRuleContext(NullabilityContext,i);
	    }
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	enumSymbolDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumSymbolDefContext);
	    } else {
	        return this.getTypedRuleContext(EnumSymbolDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeArray(this);
		}
	}


}



class TypeAssociationBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, handleTypeCompo) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationBase;
        this.art = null
        this.handleTypeCompo = null
        this.assoc = null;
        this.compo = null;
        this.art = art || null;
        this.handleTypeCompo = handleTypeCompo || null;
    }

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	ASSOCIATION() {
	    return this.getToken(languageParser.ASSOCIATION, 0);
	};

	COMPOSITION() {
	    return this.getToken(languageParser.COMPOSITION, 0);
	};

	cardinality() {
	    return this.getTypedRuleContext(CardinalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeAssociationBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeAssociationBase(this);
		}
	}


}



class TypeAssociationContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationCont;
        this.art = null
        this.cond = null;
        this.art = art || null;
    }

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	foreignKey = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForeignKeyContext);
	    } else {
	        return this.getTypedRuleContext(ForeignKeyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeAssociationCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeAssociationCont(this);
		}
	}


}



class TypeAssociationElementContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationElementCont;
        this.art = null
        this.cond = null;
        this.art = art || null;
    }

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	defaultAndNullability() {
	    return this.getTypedRuleContext(DefaultAndNullabilityContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	foreignKey = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForeignKeyContext);
	    } else {
	        return this.getTypedRuleContext(ForeignKeyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeAssociationElementCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeAssociationElementCont(this);
		}
	}


}



class TypeToOneContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeToOne;
        this.art = null
        this.one = null;
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	ONE() {
	    return this.getToken(languageParser.ONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeToOne(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeToOne(this);
		}
	}


}



class TypeToManyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeToMany;
        this.art = null
        this.many = null;
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeToMany(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeToMany(this);
		}
	}


}



class CardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_cardinality;
        this.art = null
        this.card = {}
        this.lbrack = null;
        this.art = art || null;
    }

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Number);
	    } else {
	        return this.getToken(languageParser.Number, i);
	    }
	};


	targetCardinality() {
	    return this.getTypedRuleContext(TargetCardinalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitCardinality(this);
		}
	}


}



class TargetCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, card) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_targetCardinality;
        this.card = null
        this.card = card || null;
    }

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Number);
	    } else {
	        return this.getToken(languageParser.Number, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTargetCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTargetCardinality(this);
		}
	}


}



class OptInvisibleNullabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optInvisibleNullability;
        this.art = null
        this.n1 = null;
        this.n2 = null;
        this.art = art || null;
    }

	HelperToken1() {
	    return this.getToken(languageParser.HelperToken1, 0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};

	HelperToken2() {
	    return this.getToken(languageParser.HelperToken2, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOptInvisibleNullability(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOptInvisibleNullability(this);
		}
	}


}



class NullabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_nullability;
        this.art = null
        this.n1 = null;
        this.n2 = null;
        this.art = art || null;
    }

	NOT() {
	    return this.getToken(languageParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterNullability(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitNullability(this);
		}
	}


}



class ForeignKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_foreignKey;
        this.outer = null
        this.art = new parser.XsnArtifact()
        this.elem = {}
        this.name = null;
        this.outer = outer || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitForeignKey(this);
		}
	}


}



class TypeTypeOfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeTypeOf;
        this.art = null
        this._sync = 'nop'
        this.t = null;
        this.o = null;
        this.art = art || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	OF() {
	    return this.getToken(languageParser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeTypeOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeTypeOf(this);
		}
	}


}



class TypeRefOptArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeRefOptArgs;
        this.art = null
        this.art = art || null;
    }

	simplePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathContext,i);
	    }
	};

	typeRefArgs() {
	    return this.getTypedRuleContext(TypeRefArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeRefOptArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeRefOptArgs(this);
		}
	}


}



class TypeRefArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeRefArgs;
        this.art = null
        this.paren = null;
        this.head = null;
        this.v = null;
        this.f = null;
        this.tail = null;
        this.art = art || null;
    }

	typeNamedArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNamedArgContext);
	    } else {
	        return this.getTypedRuleContext(TypeNamedArgContext,i);
	    }
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Number);
	    } else {
	        return this.getToken(languageParser.Number, i);
	    }
	};


	VARIABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.VARIABLE);
	    } else {
	        return this.getToken(languageParser.VARIABLE, i);
	    }
	};


	FLOATING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.FLOATING);
	    } else {
	        return this.getToken(languageParser.FLOATING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeRefArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeRefArgs(this);
		}
	}


}



class TypeNamedArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeNamedArgList;
        this.art = null
        this.paren = null;
        this.art = art || null;
    }

	typeNamedArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNamedArgContext);
	    } else {
	        return this.getTypedRuleContext(TypeNamedArgContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeNamedArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeNamedArgList(this);
		}
	}


}



class TypeNamedArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeNamedArg;
        this.art = null
        this.arg = ''
        this.name = null;
        this.v = null;
        this.f = null;
        this.art = art || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	VARIABLE() {
	    return this.getToken(languageParser.VARIABLE, 0);
	};

	FLOATING() {
	    return this.getToken(languageParser.FLOATING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTypeNamedArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTypeNamedArg(this);
		}
	}


}



class QueryEOFContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryEOF;
        this.query = null
        this.q = null;
    }

	EOF() {
	    return this.getToken(languageParser.EOF, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterQueryEOF(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitQueryEOF(this);
		}
	}


}



class ProjectionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionSpec;
        this.query = null
        this.src = null
        this.proj = null;
        this.aliasName = null;
    }

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	fromPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromPathContext);
	    } else {
	        return this.getTypedRuleContext(FromPathContext,i);
	    }
	};

	PROJECTION() {
	    return this.getToken(languageParser.PROJECTION, 0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	bracedSelectItemListDef() {
	    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
	};

	excludingClause() {
	    return this.getTypedRuleContext(ExcludingClauseContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterProjectionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitProjectionSpec(this);
		}
	}


}



class ProjectionClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionClauses;
        this.query = null
        this.cond = null;
        this.e1 = null;
        this.en = null;
        this.having = null;
        this.ob = null;
        this.lc = null;
        this.query = query || null;
    }

	WHERE() {
	    return this.getToken(languageParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterProjectionClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitProjectionClauses(this);
		}
	}


}



class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryExpression;
        this.query = null
        this.qt1 = null;
        this.qec = null;
    }

	queryPrimary() {
	    return this.getTypedRuleContext(QueryPrimaryContext,0);
	};

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitQueryExpression(this);
		}
	}


}



class QueryExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inQuery) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryExpressionCont;
        this.inQuery = null
        this.query = inQuery
        this.op = null;
        this.quant = null;
        this.qp = null;
        this.ob = null;
        this.lc = null;
        this.inQuery = inQuery || null;
    }

	queryPrimary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryPrimaryContext);
	    } else {
	        return this.getTypedRuleContext(QueryPrimaryContext,i);
	    }
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.UNION);
	    } else {
	        return this.getToken(languageParser.UNION, i);
	    }
	};


	EXCEPT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.EXCEPT);
	    } else {
	        return this.getToken(languageParser.EXCEPT, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.MINUS);
	    } else {
	        return this.getToken(languageParser.MINUS, i);
	    }
	};


	INTERSECT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.INTERSECT);
	    } else {
	        return this.getToken(languageParser.INTERSECT, i);
	    }
	};


	DISTINCT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.DISTINCT);
	    } else {
	        return this.getToken(languageParser.DISTINCT, i);
	    }
	};


	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ALL);
	    } else {
	        return this.getToken(languageParser.ALL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterQueryExpressionCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitQueryExpressionCont(this);
		}
	}


}



class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryPrimary;
        this.query = {}
        this.open = null;
        this.qe = null;
        this.close = null;
        this.qpnp = null;
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterQueryPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitQueryPrimary(this);
		}
	}


}



class SelectQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectQuery;
        this.query = {}
        this.select = null;
        this.mixin = null;
        this.ad = null;
        this.cond = null;
        this.e1 = null;
        this.en = null;
        this.having = null;
    }

	SELECT() {
	    return this.getToken(languageParser.SELECT, 0);
	};

	FROM() {
	    return this.getToken(languageParser.FROM, 0);
	};

	querySource() {
	    return this.getTypedRuleContext(QuerySourceContext,0);
	};

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(languageParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	INTO() {
	    return this.getToken(languageParser.INTO, 0);
	};

	bracedSelectItemListDef() {
	    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
	};

	excludingClause() {
	    return this.getTypedRuleContext(ExcludingClauseContext,0);
	};

	MIXIN() {
	    return this.getToken(languageParser.MIXIN, 0);
	};

	ALL() {
	    return this.getToken(languageParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(languageParser.DISTINCT, 0);
	};

	mixinElementDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MixinElementDefContext);
	    } else {
	        return this.getTypedRuleContext(MixinElementDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterSelectQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitSelectQuery(this);
		}
	}


}



class QuerySourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_querySource;
        this.query = null
        this.t1 = null;
        this.tn = null;
        this.query = query || null;
    }

	tableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TableExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterQuerySource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitQuerySource(this);
		}
	}


}



class TableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableExpression;
        this.table = null
        this.qt = null;
        this.tec = null;
    }

	tableTerm() {
	    return this.getTypedRuleContext(TableTermContext,0);
	};

	tableExpressionCont() {
	    return this.getTypedRuleContext(TableExpressionContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTableExpression(this);
		}
	}


}



class TableExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inTable) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableExpressionCont;
        this.inTable = null
        this.table = inTable
        this.join = null;
        this.te = null;
        this.cond = null;
        this.crj = null;
        this.jn = null;
        this.t = null;
        this.inTable = inTable || null;
    }

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ON);
	    } else {
	        return this.getToken(languageParser.ON, i);
	    }
	};


	joinOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinOpContext);
	    } else {
	        return this.getTypedRuleContext(JoinOpContext,i);
	    }
	};

	tableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TableExpressionContext,i);
	    }
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	CROSS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.CROSS);
	    } else {
	        return this.getToken(languageParser.CROSS, i);
	    }
	};


	JOIN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.JOIN);
	    } else {
	        return this.getToken(languageParser.JOIN, i);
	    }
	};


	tableTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableTermContext);
	    } else {
	        return this.getTypedRuleContext(TableTermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTableExpressionCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTableExpressionCont(this);
		}
	}


}



class TableTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableTerm;
        this.table = null
        this.ttnp = null;
        this.ttp = null;
    }

	fromRefWithOptAlias() {
	    return this.getTypedRuleContext(FromRefWithOptAliasContext,0);
	};

	tableOrQueryParenthesis() {
	    return this.getTypedRuleContext(TableOrQueryParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTableTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTableTerm(this);
		}
	}


}



class FromRefWithOptAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromRefWithOptAlias;
        this.table = null
        this.f = null;
        this.n1 = null;
        this.n2 = null;
    }

	fromPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromPathContext);
	    } else {
	        return this.getTypedRuleContext(FromPathContext,i);
	    }
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	identNoKeyword() {
	    return this.getTypedRuleContext(IdentNoKeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterFromRefWithOptAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitFromRefWithOptAlias(this);
		}
	}


}



class TableOrQueryParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableOrQueryParenthesis;
        this.table = null
        this.kind = null
        this.open = null;
        this.ttp = null;
        this.qtec = null;
        this.ttnp = null;
        this.tec = null;
        this.qpnp = null;
        this.qec = null;
        this.close = null;
        this.a1 = null;
        this.a2 = null;
    }

	tableOrQueryParenthesis() {
	    return this.getTypedRuleContext(TableOrQueryParenthesisContext,0);
	};

	fromRefWithOptAlias() {
	    return this.getTypedRuleContext(FromRefWithOptAliasContext,0);
	};

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	identNoKeyword() {
	    return this.getTypedRuleContext(IdentNoKeywordContext,0);
	};

	tableOrQueryExpressionCont() {
	    return this.getTypedRuleContext(TableOrQueryExpressionContContext,0);
	};

	tableExpressionCont() {
	    return this.getTypedRuleContext(TableExpressionContContext,0);
	};

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTableOrQueryParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTableOrQueryParenthesis(this);
		}
	}


}



class TableOrQueryExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inTable, inKind) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableOrQueryExpressionCont;
        this.inTable = null
        this.inKind = null
        this.table = inTable
        this.kind = null
        this.qec = null;
        this.tec = null;
        this.inTable = inTable || null;
        this.inKind = inKind || null;
    }

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};

	tableExpressionCont() {
	    return this.getTypedRuleContext(TableExpressionContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterTableOrQueryExpressionCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitTableOrQueryExpressionCont(this);
		}
	}


}



class FromPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, qp, idkind) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromPath;
        this.qp = null
        this.idkind = null
        this.dotAfterFilter = null
        this.id = null;
        this.qp = qp || null;
        this.idkind = idkind || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	fromArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(FromArgumentsContext,i);
	    }
	};

	cardinalityAndFilter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CardinalityAndFilterContext);
	    } else {
	        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterFromPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitFromPath(this);
		}
	}


}



class FromArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromArguments;
        this.pathStep = null
        this.name = null;
        this.pathStep = pathStep || null;
    }

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterFromArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitFromArguments(this);
		}
	}


}



class ExcludingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_excludingClause;
        this.query = null
        this.query = query || null;
    }

	EXCLUDING() {
	    return this.getToken(languageParser.EXCLUDING, 0);
	};

	projectionExclusion = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProjectionExclusionContext);
	    } else {
	        return this.getTypedRuleContext(ProjectionExclusionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExcludingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExcludingClause(this);
		}
	}


}



class ProjectionExclusionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionExclusion;
        this.outer = null
        this.art = {}
        this.name = null;
        this.outer = outer || null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterProjectionExclusion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitProjectionExclusion(this);
		}
	}


}



class MixinElementDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_mixinElementDef;
        this.outer = null
        this.art = { target: {} }
        this.name = null;
        this.outer = outer || null;
    }

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	requiredSemi() {
	    return this.getTypedRuleContext(RequiredSemiContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeAssociationCont() {
	    return this.getTypedRuleContext(TypeAssociationContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterMixinElementDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitMixinElementDef(this);
		}
	}


}



class SelectItemDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemDef;
        this.outer = null
        this.art = null
        this.star = null;
        this.virtual = null;
        this.key = null;
        this.outer = outer || null;
    }

	selectItemDefBody() {
	    return this.getTypedRuleContext(SelectItemDefBodyContext,0);
	};

	annotationAssignment_atn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
	    }
	};

	VIRTUAL() {
	    return this.getToken(languageParser.VIRTUAL, 0);
	};

	KEY() {
	    return this.getToken(languageParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterSelectItemDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitSelectItemDef(this);
		}
	}


}



class SelectItemDefBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemDefBody;
        this.art = null
        this.outer = null
        this.assoc = null
        this.alias = null
        this.e = null;
        this.as = null;
        this.n1 = null;
        this.n2 = null;
        this.dot = null;
        this.star = null;
        this.re = null;
        this.to = null;
        this.l = null;
        this.cond = null;
        this.art = art || null;
        this.outer = outer || null;
    }

	selectItemInlineList() {
	    return this.getTypedRuleContext(SelectItemInlineListContext,0);
	};

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	annotationAssignment_fix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
	    }
	};

	excludingClause() {
	    return this.getTypedRuleContext(ExcludingClauseContext,0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	typeTypeOf() {
	    return this.getTypedRuleContext(TypeTypeOfContext,0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	typeAssociationBase() {
	    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
	};

	ON() {
	    return this.getToken(languageParser.ON, 0);
	};

	DOTbeforeBRACE() {
	    return this.getToken(languageParser.DOTbeforeBRACE, 0);
	};

	REDIRECTED() {
	    return this.getToken(languageParser.REDIRECTED, 0);
	};

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	typeAssociationCont() {
	    return this.getTypedRuleContext(TypeAssociationContContext,0);
	};

	typeToMany() {
	    return this.getTypedRuleContext(TypeToManyContext,0);
	};

	typeToOne() {
	    return this.getTypedRuleContext(TypeToOneContext,0);
	};

	annotationAssignment_ll1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterSelectItemDefBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitSelectItemDefBody(this);
		}
	}


}



class BracedSelectItemListDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, query) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_bracedSelectItemListDef;
        this.query = null
        this.query = query || null;
    }

	selectItemDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterBracedSelectItemListDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitBracedSelectItemListDef(this);
		}
	}


}



class SelectItemInlineListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, clause) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemInlineList;
        this.art = null
        this.clause = null
        this.art = art || null;
        this.clause = clause || null;
    }

	selectItemInlineDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemInlineDefContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemInlineDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterSelectItemInlineList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitSelectItemInlineList(this);
		}
	}


}



class SelectItemInlineDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, outer) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemInlineDef;
        this.outer = null
        this.art = null
        this.star = null;
        this.outer = outer || null;
    }

	selectItemDefBody() {
	    return this.getTypedRuleContext(SelectItemDefBodyContext,0);
	};

	annotationAssignment_atn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterSelectItemInlineDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitSelectItemInlineDef(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inQuery) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderByClause;
        this.inQuery = null
        this.query = inQuery
        this.ob1 = null;
        this.obn = null;
        this.inQuery = inQuery || null;
    }

	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	orderBySpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderBySpecContext);
	    } else {
	        return this.getTypedRuleContext(OrderBySpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, inQuery) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_limitClause;
        this.inQuery = null
        this.query = inQuery
        this.limkw = null;
        this.lim = null;
        this.off = null;
        this.inQuery = inQuery || null;
    }

	LIMIT() {
	    return this.getToken(languageParser.LIMIT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(languageParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OrderBySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderBySpec;
        this.ob = null
        this.e = null;
        this.asc = null;
        this.desc = null;
        this.nb = null;
        this.ne = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(languageParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(languageParser.DESC, 0);
	};

	NULLS() {
	    return this.getToken(languageParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(languageParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(languageParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOrderBySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOrderBySpec(this);
		}
	}


}



class JoinOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, left) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_joinOp;
        this.left = null
        this.table = null
        this.join = null
        this.op = null;
        this.t1 = null;
        this.c = null;
        this.t2 = null;
        this.left = left || null;
    }

	JOIN() {
	    return this.getToken(languageParser.JOIN, 0);
	};

	INNER() {
	    return this.getToken(languageParser.INNER, 0);
	};

	LEFT() {
	    return this.getToken(languageParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(languageParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(languageParser.FULL, 0);
	};

	joinCardinality() {
	    return this.getTypedRuleContext(JoinCardinalityContext,0);
	};

	OUTER() {
	    return this.getToken(languageParser.OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterJoinOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitJoinOp(this);
		}
	}


}



class JoinCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_joinCardinality;
        this.joinCard = null
        this.srcExact = null;
        this.srcMaxOne = null;
        this.srcMaxMany = null;
        this.tgtExact = null;
        this.tgtMaxOne = null;
        this.tgtMaxMany = null;
    }

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	ONE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ONE);
	    } else {
	        return this.getToken(languageParser.ONE, i);
	    }
	};


	MANY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.MANY);
	    } else {
	        return this.getToken(languageParser.MANY, i);
	    }
	};


	EXACT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.EXACT);
	    } else {
	        return this.getToken(languageParser.EXACT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterJoinCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitJoinCardinality(this);
		}
	}


}



class ConditionEOFContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionEOF;
        this.cond = null
        this.c = null;
    }

	EOF() {
	    return this.getToken(languageParser.EOF, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterConditionEOF(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitConditionEOF(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_condition;
        this.expr = null
        this.c1 = null;
        this.cc = null;
    }

	conditionTerm() {
	    return this.getTypedRuleContext(ConditionTermContext,0);
	};

	conditionCont() {
	    return this.getTypedRuleContext(ConditionContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitCondition(this);
		}
	}


}



class ConditionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionCont;
        this.args = null
        this.expr = null
        this.right = null
        this.c1 = null;
        this.e2 = null;
        this.colon = null;
        this.e3 = null;
        this.q = null;
        this.args = args || null;
    }

	conditionTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionTermContext);
	    } else {
	        return this.getTypedRuleContext(ConditionTermContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.OR);
	    } else {
	        return this.getToken(languageParser.OR, i);
	    }
	};


	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.AND);
	    } else {
	        return this.getToken(languageParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterConditionCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitConditionCont(this);
		}
	}


}



class ConditionTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionTerm;
        this.expr = null
        this.args = []
        this.subs = null
        this.c1 = null;
        this.e1 = null;
        this.ec = null;
        this.cc = null;
    }

	conditionPrimary() {
	    return this.getTypedRuleContext(ConditionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};

	comparisonCont() {
	    return this.getTypedRuleContext(ComparisonContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterConditionTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitConditionTerm(this);
		}
	}


}



class ConditionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionPrimary;
        this.expr = null
        this.args = []
        this.c1 = null;
        this.open = null;
        this.qe = null;
        this.close = null;
        this.qm = null;
        this.ep = null;
        this.e1 = null;
        this.ec = null;
        this.cc = null;
    }

	NOT() {
	    return this.getToken(languageParser.NOT, 0);
	};

	conditionTerm() {
	    return this.getTypedRuleContext(ConditionTermContext,0);
	};

	EXISTS() {
	    return this.getToken(languageParser.EXISTS, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	valuePath() {
	    return this.getTypedRuleContext(ValuePathContext,0);
	};

	HideAlternatives() {
	    return this.getToken(languageParser.HideAlternatives, 0);
	};

	expressionPrimary() {
	    return this.getTypedRuleContext(ExpressionPrimaryContext,0);
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};

	comparisonCont() {
	    return this.getTypedRuleContext(ComparisonContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterConditionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitConditionPrimary(this);
		}
	}


}



class ComparisonContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_comparisonCont;
        this.args = null
        this.expr = null
        this.e2 = null;
        this.e1 = null;
        this.e3 = null;
        this.e4 = null;
        this.e5 = null;
        this.args = args || null;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ANY() {
	    return this.getToken(languageParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(languageParser.SOME, 0);
	};

	ALL() {
	    return this.getToken(languageParser.ALL, 0);
	};

	IS() {
	    return this.getToken(languageParser.IS, 0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(languageParser.NOT, 0);
	};

	IN() {
	    return this.getToken(languageParser.IN, 0);
	};

	BETWEEN() {
	    return this.getToken(languageParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(languageParser.AND, 0);
	};

	LIKE() {
	    return this.getToken(languageParser.LIKE, 0);
	};

	ESCAPE() {
	    return this.getToken(languageParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterComparisonCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitComparisonCont(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expression;
        this.expr = null
        this.e1 = null;
        this.eq = null;
        this.ec = null;
    }

	expressionPrimary() {
	    return this.getTypedRuleContext(ExpressionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ExpressionContContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expressionCont;
        this.args = null
        this.expr = null
        this.right = null
        this.e1 = null;
        this.eq = null;
        this.args = args || null;
    }

	expressionPrimary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionPrimaryContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionPrimaryContext,i);
	    }
	};

	conditionOrQueryParenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionOrQueryParenthesisContext);
	    } else {
	        return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExpressionCont(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExpressionCont(this);
		}
	}


}



class ExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expressionPrimary;
        this.expr = null
        this.args = []
        this.e1 = null;
        this.eq = null;
        this.val = null;
        this.sf = null;
        this.e2 = null;
        this.ew = null;
        this.e3 = null;
        this.c = null;
        this.e4 = null;
        this.ne = null;
        this.nqp = null;
        this.vp = null;
        this.open = null;
        this.over = null;
        this.close = null;
        this.colon = null;
        this.pp = null;
        this.qm = null;
    }

	expressionPrimary() {
	    return this.getTypedRuleContext(ExpressionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	specialFunction() {
	    return this.getTypedRuleContext(SpecialFunctionContext,0);
	};

	CASE() {
	    return this.getToken(languageParser.CASE, 0);
	};

	END() {
	    return this.getToken(languageParser.END, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(languageParser.ELSE, 0);
	};

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.WHEN);
	    } else {
	        return this.getToken(languageParser.WHEN, i);
	    }
	};


	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.THEN);
	    } else {
	        return this.getToken(languageParser.THEN, i);
	    }
	};


	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	NEW() {
	    return this.getToken(languageParser.NEW, 0);
	};

	valuePath() {
	    return this.getTypedRuleContext(ValuePathContext,0);
	};

	OVER() {
	    return this.getToken(languageParser.OVER, 0);
	};

	overClause() {
	    return this.getTypedRuleContext(OverClauseContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExpressionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExpressionPrimary(this);
		}
	}


}



class ConditionOrQueryParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionOrQueryParenthesis;
        this.expr = null
        this.args = []
        this.open = null;
        this.q1 = null;
        this.qr = null;
        this.c1 = null;
        this.cc = null;
        this.cn = null;
        this.rec = null;
        this.qc = null;
        this.ec = null;
        this.cm = null;
        this.close = null;
    }

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	conditionPrimary() {
	    return this.getTypedRuleContext(ConditionPrimaryContext,0);
	};

	conditionOrQueryParenthesis() {
	    return this.getTypedRuleContext(ConditionOrQueryParenthesisContext,0);
	};

	queryExpressionCont() {
	    return this.getTypedRuleContext(QueryExpressionContContext,0);
	};

	conditionCont() {
	    return this.getTypedRuleContext(ConditionContContext,0);
	};

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	expressionCont() {
	    return this.getTypedRuleContext(ExpressionContContext,0);
	};

	comparisonCont() {
	    return this.getTypedRuleContext(ComparisonContContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterConditionOrQueryParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitConditionOrQueryParenthesis(this);
		}
	}


}



class SpecialFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_specialFunction;
        this.ret = {}
        this.art = new parser.XsnArtifact()
        this.ca = null;
        this.e = null;
    }

	AS() {
	    return this.getToken(languageParser.AS, 0);
	};

	typeRefOptArgs() {
	    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
	};

	CAST() {
	    return this.getToken(languageParser.CAST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterSpecialFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitSpecialFunction(this);
		}
	}


}



class SimplePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, category) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_simplePath;
        this.art = null
        this.category = null
        this._sync = 'nop'
        this.head = null;
        this.tail = null;
        this.art = art || null;
        this.category = category || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterSimplePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitSimplePath(this);
		}
	}


}



class ValuePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, category, location) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_valuePath;
        this.category = null
        this.location = null
        this.qp = { path: [] }
        this._sync = 'nop'
        this.id = null;
        this.category = category || null;
        this.location = location || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	pathArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(PathArgumentsContext,i);
	    }
	};

	cardinalityAndFilter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CardinalityAndFilterContext);
	    } else {
	        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterValuePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitValuePath(this);
		}
	}


}



class PathArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep, considerSpecial) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_pathArguments;
        this.pathStep = null
        this.considerSpecial = null
        this.id = null;
        this.name = null;
        this.ob = null;
        this.pathStep = pathStep || null;
        this.considerSpecial = considerSpecial || null;
    }

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	funcExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FuncExpressionContext);
	    } else {
	        return this.getTypedRuleContext(FuncExpressionContext,i);
	    }
	};

	HelperToken1() {
	    return this.getToken(languageParser.HelperToken1, 0);
	};

	HelperToken2() {
	    return this.getToken(languageParser.HelperToken2, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	funcOrderByClause() {
	    return this.getTypedRuleContext(FuncOrderByClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterPathArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitPathArguments(this);
		}
	}


}



class NamedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep, id) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namedExpression;
        this.pathStep = null
        this.id = null
        this.elem = null;
        this.pathStep = pathStep || null;
        this.id = id || null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterNamedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitNamedExpression(this);
		}
	}


}



class FuncExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep, considerSpecial) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_funcExpression;
        this.pathStep = null
        this.considerSpecial = null
        this.args = []
        this.expr = null;
        this.pathStep = pathStep || null;
        this.considerSpecial = considerSpecial || null;
    }

	GenericExpr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.GenericExpr);
	    } else {
	        return this.getToken(languageParser.GenericExpr, i);
	    }
	};


	GenericIntro() {
	    return this.getToken(languageParser.GenericIntro, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	HideAlternatives = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.HideAlternatives);
	    } else {
	        return this.getToken(languageParser.HideAlternatives, i);
	    }
	};


	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.ALL);
	    } else {
	        return this.getToken(languageParser.ALL, i);
	    }
	};


	DISTINCT() {
	    return this.getToken(languageParser.DISTINCT, 0);
	};

	GenericSeparator = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.GenericSeparator);
	    } else {
	        return this.getToken(languageParser.GenericSeparator, i);
	    }
	};


	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.Identifier);
	    } else {
	        return this.getToken(languageParser.Identifier, i);
	    }
	};


	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.FROM);
	    } else {
	        return this.getToken(languageParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.IN);
	    } else {
	        return this.getToken(languageParser.IN, i);
	    }
	};


	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.WITH);
	    } else {
	        return this.getToken(languageParser.WITH, i);
	    }
	};


	GROUP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.GROUP);
	    } else {
	        return this.getToken(languageParser.GROUP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterFuncExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitFuncExpression(this);
		}
	}


}



class OverClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_overClause;
        this.over = null
        this.args = []
        this.pb = null;
        this.ob = null;
        this.wf = null;
    }

	PARTITION() {
	    return this.getToken(languageParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.BY);
	    } else {
	        return this.getToken(languageParser.BY, i);
	    }
	};


	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	ROWS() {
	    return this.getToken(languageParser.ROWS, 0);
	};

	partitionByClause() {
	    return this.getTypedRuleContext(PartitionByClauseContext,0);
	};

	exprOrderByClause() {
	    return this.getTypedRuleContext(ExprOrderByClauseContext,0);
	};

	windowFrameClause() {
	    return this.getTypedRuleContext(WindowFrameClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOverClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOverClause(this);
		}
	}


}



class PartitionByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_partitionByClause;
        this.expr = null
        this.args = []
        this.e1 = null;
        this.en = null;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterPartitionByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitPartitionByClause(this);
		}
	}


}



class FuncOrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_funcOrderByClause;
        this.args = null
        this.expr = null
        this.ob = null;
        this.args = args || null;
    }

	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	exprOrderByClause() {
	    return this.getTypedRuleContext(ExprOrderByClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterFuncOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitFuncOrderByClause(this);
		}
	}


}



class ExprOrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_exprOrderByClause;
        this.expr = null
        this.args = []
    }

	orderBySpecInExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderBySpecInExprContext);
	    } else {
	        return this.getTypedRuleContext(OrderBySpecInExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterExprOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitExprOrderByClause(this);
		}
	}


}



class OrderBySpecInExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderBySpecInExpr;
        this.args = null
        this.e = null;
        this.args = args || null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(languageParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(languageParser.DESC, 0);
	};

	NULLS() {
	    return this.getToken(languageParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(languageParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(languageParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOrderBySpecInExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOrderBySpecInExpr(this);
		}
	}


}



class WindowFrameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameClause;
        this.wf = null
        this.args = []
    }

	windowFrameStartSpec() {
	    return this.getTypedRuleContext(WindowFrameStartSpecContext,0);
	};

	BETWEEN() {
	    return this.getToken(languageParser.BETWEEN, 0);
	};

	windowFrameBoundSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WindowFrameBoundSpecContext);
	    } else {
	        return this.getTypedRuleContext(WindowFrameBoundSpecContext,i);
	    }
	};

	AND() {
	    return this.getToken(languageParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterWindowFrameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitWindowFrameClause(this);
		}
	}


}



class WindowFrameBoundSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameBoundSpec;
        this.args = null
        this.args = args || null;
    }

	UNBOUNDED() {
	    return this.getToken(languageParser.UNBOUNDED, 0);
	};

	FOLLOWING() {
	    return this.getToken(languageParser.FOLLOWING, 0);
	};

	PRECEDING() {
	    return this.getToken(languageParser.PRECEDING, 0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	CURRENT() {
	    return this.getToken(languageParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(languageParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterWindowFrameBoundSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitWindowFrameBoundSpec(this);
		}
	}


}



class WindowFrameStartSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, args) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameStartSpec;
        this.args = []
        this.args = args || null;
    }

	UNBOUNDED() {
	    return this.getToken(languageParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(languageParser.PRECEDING, 0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	CURRENT() {
	    return this.getToken(languageParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(languageParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterWindowFrameStartSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitWindowFrameStartSpec(this);
		}
	}


}



class CardinalityAndFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_cardinalityAndFilter;
        this.pathStep = null
        this._sync = 'nop'
        this.openFilter = null;
        this.group = null;
        this.by = null;
        this.e1 = null;
        this.en = null;
        this.hv = null;
        this.having = null;
        this.ob = null;
        this.lc = null;
        this.closeFilter = null;
        this.pathStep = pathStep || null;
    }

	filterWhereClause() {
	    return this.getTypedRuleContext(FilterWhereClauseContext,0);
	};

	optionalCardinality() {
	    return this.getTypedRuleContext(OptionalCardinalityContext,0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(languageParser.BY, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterCardinalityAndFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitCardinalityAndFilter(this);
		}
	}


}



class OptionalCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalCardinality;
        this.pathStep = null
        this.pathStep = pathStep || null;
    }

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOptionalCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOptionalCardinality(this);
		}
	}


}



class FilterWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, pathStep) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_filterWhereClause;
        this.pathStep = null
        this.cond = null;
        this.pathStep = pathStep || null;
    }

	optionalWhereForFilter() {
	    return this.getTypedRuleContext(OptionalWhereForFilterContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterFilterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitFilterWhereClause(this);
		}
	}


}



class OptionalWhereForFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalWhereForFilter;
    }

	WHERE() {
	    return this.getToken(languageParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterOptionalWhereForFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitOptionalWhereForFilter(this);
		}
	}


}



class AnnotationAssignment_fixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_fix;
        this.art = null
        this.assignment = null
        this.at = null;
        this.art = art || null;
    }

	annotationAssignment_paren() {
	    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationAssignment_fix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationAssignment_fix(this);
		}
	}


}



class AnnotationAssignment_ll1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_ll1;
        this.art = null
        this.assignment = null
        this.at = null;
        this.val = null;
        this.art = art || null;
    }

	annotationAssignment_paren() {
	    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	annoValue() {
	    return this.getTypedRuleContext(AnnoValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationAssignment_ll1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationAssignment_ll1(this);
		}
	}


}



class AnnotationAssignment_atnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_atn;
        this.art = null
        this.assignment = null
        this.at = null;
        this.hash = null;
        this.val = null;
        this.atv = null;
        this.art = art || null;
    }

	annotationAssignment_paren() {
	    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
	};

	annotationPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationPathContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationPathContext,i);
	    }
	};

	annotationPathVariant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationPathVariantContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationPathVariantContext,i);
	    }
	};

	HelperToken2() {
	    return this.getToken(languageParser.HelperToken2, 0);
	};

	HelperToken1 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.HelperToken1);
	    } else {
	        return this.getToken(languageParser.HelperToken1, i);
	    }
	};


	annoValueBase() {
	    return this.getTypedRuleContext(AnnoValueBaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationAssignment_atn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationAssignment_atn(this);
		}
	}


}



class AnnotationAssignment_parenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_paren;
        this.art = null
        this.art = art || null;
    }

	annotationAssignment_1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationAssignment_1Context);
	    } else {
	        return this.getTypedRuleContext(AnnotationAssignment_1Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationAssignment_paren(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationAssignment_paren(this);
		}
	}


}



class AnnotationAssignment_1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_1;
        this.art = null
        this.assignment = { name: new parser.XsnName() }
        this.val = null;
        this.art = art || null;
    }

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	annoValue() {
	    return this.getTypedRuleContext(AnnoValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationAssignment_1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationAssignment_1(this);
		}
	}


}



class AnnotationPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art, category, headat) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationPath;
        this.art = null
        this.category = null
        this.headat = null
        this._sync = 'nop'
        this.head = null;
        this.at = null;
        this.tail = null;
        this.art = art || null;
        this.category = category || null;
        this.headat = headat || null;
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationPath(this);
		}
	}


}



class AnnotationPathVariantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, art) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationPathVariant;
        this.art = null
        this.variant = {}
        this.art = art || null;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnotationPathVariant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnotationPathVariant(this);
		}
	}


}



class AnnoValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, assignment) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoValue;
        this.assignment = null
        this.base = null;
        this.at = null;
        this.assignment = assignment || null;
    }

	annoValueBase() {
	    return this.getTypedRuleContext(AnnoValueBaseContext,0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnoValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnoValue(this);
		}
	}


}



class AnnoValueBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, assignment) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoValueBase;
        this.assignment = null
        this.seenEllipsis = false
        this.head = null;
        this.e = null;
        this.upTo = null;
        this.tail = null;
        this.cb = null;
        this.v1 = null;
        this.plus = null;
        this.min = null;
        this.num = null;
        this.cond = null;
        this.assignment = assignment || null;
    }

	flattenedValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlattenedValueContext);
	    } else {
	        return this.getTypedRuleContext(FlattenedValueContext,i);
	    }
	};

	annoSubValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnoSubValueContext);
	    } else {
	        return this.getTypedRuleContext(AnnoSubValueContext,i);
	    }
	};

	UP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.UP);
	    } else {
	        return this.getToken(languageParser.UP, i);
	    }
	};


	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(languageParser.TO);
	    } else {
	        return this.getToken(languageParser.TO, i);
	    }
	};


	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnoValueBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnoValueBase(this);
		}
	}


}



class FlattenedValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, assignment) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_flattenedValue;
        this.assignment = null
        this.val = { name: new parser.XsnName() }
        this.at = null;
        this.assignment = assignment || null;
    }

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	annoValue() {
	    return this.getTypedRuleContext(AnnoValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterFlattenedValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitFlattenedValue(this);
		}
	}


}



class NamedValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, struct) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namedValue;
        this.struct = null
        this.val = { name: new parser.XsnName() }
        this.at = null;
        this.sub = null;
        this.struct = struct || null;
    }

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annoSubValue() {
	    return this.getTypedRuleContext(AnnoSubValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterNamedValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitNamedValue(this);
		}
	}


}



class AnnoSubValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoSubValue;
        this.val = {}
        this.head = null;
        this.tail = null;
        this.v1 = null;
        this.plus = null;
        this.min = null;
        this.num = null;
        this.at = null;
        this.cond = null;
    }

	namedValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedValueContext);
	    } else {
	        return this.getTypedRuleContext(NamedValueContext,i);
	    }
	};

	annoSubValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnoSubValueContext);
	    } else {
	        return this.getTypedRuleContext(AnnoSubValueContext,i);
	    }
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	annotationPath() {
	    return this.getTypedRuleContext(AnnotationPathContext,0);
	};

	annotationPathVariant() {
	    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterAnnoSubValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitAnnoSubValue(this);
		}
	}


}



class LiteralValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_literalValue;
        this.val = null
        this.tok = null
        this.hash = null;
        this.name = null;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	NULL() {
	    return this.getToken(languageParser.NULL, 0);
	};

	Boolean() {
	    return this.getToken(languageParser.Boolean, 0);
	};

	Number() {
	    return this.getToken(languageParser.Number, 0);
	};

	String() {
	    return this.getToken(languageParser.String, 0);
	};

	QuotedLiteral() {
	    return this.getToken(languageParser.QuotedLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterLiteralValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitLiteralValue(this);
		}
	}


}



class IdentNoKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, category) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_identNoKeyword;
        this.category = null
        this.id = null
        this.category = category || null;
    }

	Identifier() {
	    return this.getToken(languageParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterIdentNoKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitIdentNoKeyword(this);
		}
	}


}



class IdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, category) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_ident;
        this.category = null
        this.id = null
        this.category = category || null;
    }

	Identifier() {
	    return this.getToken(languageParser.Identifier, 0);
	};

	ABSTRACT() {
	    return this.getToken(languageParser.ABSTRACT, 0);
	};

	ACTION() {
	    return this.getToken(languageParser.ACTION, 0);
	};

	ACTIONS() {
	    return this.getToken(languageParser.ACTIONS, 0);
	};

	AND() {
	    return this.getToken(languageParser.AND, 0);
	};

	ANNOTATE() {
	    return this.getToken(languageParser.ANNOTATE, 0);
	};

	ANNOTATION() {
	    return this.getToken(languageParser.ANNOTATION, 0);
	};

	ARRAY() {
	    return this.getToken(languageParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(languageParser.ASC, 0);
	};

	ASPECT() {
	    return this.getToken(languageParser.ASPECT, 0);
	};

	ASSOCIATION() {
	    return this.getToken(languageParser.ASSOCIATION, 0);
	};

	BETWEEN() {
	    return this.getToken(languageParser.BETWEEN, 0);
	};

	COLUMNS() {
	    return this.getToken(languageParser.COLUMNS, 0);
	};

	COMPOSITION() {
	    return this.getToken(languageParser.COMPOSITION, 0);
	};

	CONTEXT() {
	    return this.getToken(languageParser.CONTEXT, 0);
	};

	CROSS() {
	    return this.getToken(languageParser.CROSS, 0);
	};

	CURRENT() {
	    return this.getToken(languageParser.CURRENT, 0);
	};

	DEFAULT() {
	    return this.getToken(languageParser.DEFAULT, 0);
	};

	DEFINE() {
	    return this.getToken(languageParser.DEFINE, 0);
	};

	DEFINITIONS() {
	    return this.getToken(languageParser.DEFINITIONS, 0);
	};

	DESC() {
	    return this.getToken(languageParser.DESC, 0);
	};

	ELEMENTS() {
	    return this.getToken(languageParser.ELEMENTS, 0);
	};

	ELSE() {
	    return this.getToken(languageParser.ELSE, 0);
	};

	END() {
	    return this.getToken(languageParser.END, 0);
	};

	ENTITY() {
	    return this.getToken(languageParser.ENTITY, 0);
	};

	ENUM() {
	    return this.getToken(languageParser.ENUM, 0);
	};

	ESCAPE() {
	    return this.getToken(languageParser.ESCAPE, 0);
	};

	EVENT() {
	    return this.getToken(languageParser.EVENT, 0);
	};

	EXACT() {
	    return this.getToken(languageParser.EXACT, 0);
	};

	EXCEPT() {
	    return this.getToken(languageParser.EXCEPT, 0);
	};

	EXCLUDING() {
	    return this.getToken(languageParser.EXCLUDING, 0);
	};

	EXTEND() {
	    return this.getToken(languageParser.EXTEND, 0);
	};

	FIRST() {
	    return this.getToken(languageParser.FIRST, 0);
	};

	FLOATING() {
	    return this.getToken(languageParser.FLOATING, 0);
	};

	FOLLOWING() {
	    return this.getToken(languageParser.FOLLOWING, 0);
	};

	FULL() {
	    return this.getToken(languageParser.FULL, 0);
	};

	FUNCTION() {
	    return this.getToken(languageParser.FUNCTION, 0);
	};

	GROUP() {
	    return this.getToken(languageParser.GROUP, 0);
	};

	HAVING() {
	    return this.getToken(languageParser.HAVING, 0);
	};

	INNER() {
	    return this.getToken(languageParser.INNER, 0);
	};

	INTERSECT() {
	    return this.getToken(languageParser.INTERSECT, 0);
	};

	INTO() {
	    return this.getToken(languageParser.INTO, 0);
	};

	IS() {
	    return this.getToken(languageParser.IS, 0);
	};

	JOIN() {
	    return this.getToken(languageParser.JOIN, 0);
	};

	LAST() {
	    return this.getToken(languageParser.LAST, 0);
	};

	LEFT() {
	    return this.getToken(languageParser.LEFT, 0);
	};

	LIKE() {
	    return this.getToken(languageParser.LIKE, 0);
	};

	LIMIT() {
	    return this.getToken(languageParser.LIMIT, 0);
	};

	LOCALIZED() {
	    return this.getToken(languageParser.LOCALIZED, 0);
	};

	MANY() {
	    return this.getToken(languageParser.MANY, 0);
	};

	MINUS() {
	    return this.getToken(languageParser.MINUS, 0);
	};

	MIXIN() {
	    return this.getToken(languageParser.MIXIN, 0);
	};

	NAMESPACE() {
	    return this.getToken(languageParser.NAMESPACE, 0);
	};

	NULLS() {
	    return this.getToken(languageParser.NULLS, 0);
	};

	OFFSET() {
	    return this.getToken(languageParser.OFFSET, 0);
	};

	ONE() {
	    return this.getToken(languageParser.ONE, 0);
	};

	OR() {
	    return this.getToken(languageParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(languageParser.ORDER, 0);
	};

	OUTER() {
	    return this.getToken(languageParser.OUTER, 0);
	};

	PARAMETERS() {
	    return this.getToken(languageParser.PARAMETERS, 0);
	};

	PARTITION() {
	    return this.getToken(languageParser.PARTITION, 0);
	};

	PRECEDING() {
	    return this.getToken(languageParser.PRECEDING, 0);
	};

	PROJECTION() {
	    return this.getToken(languageParser.PROJECTION, 0);
	};

	REDIRECTED() {
	    return this.getToken(languageParser.REDIRECTED, 0);
	};

	RETURNS() {
	    return this.getToken(languageParser.RETURNS, 0);
	};

	RIGHT() {
	    return this.getToken(languageParser.RIGHT, 0);
	};

	ROW() {
	    return this.getToken(languageParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(languageParser.ROWS, 0);
	};

	STORED() {
	    return this.getToken(languageParser.STORED, 0);
	};

	SERVICE() {
	    return this.getToken(languageParser.SERVICE, 0);
	};

	THEN() {
	    return this.getToken(languageParser.THEN, 0);
	};

	UNION() {
	    return this.getToken(languageParser.UNION, 0);
	};

	UP() {
	    return this.getToken(languageParser.UP, 0);
	};

	TO() {
	    return this.getToken(languageParser.TO, 0);
	};

	TYPE() {
	    return this.getToken(languageParser.TYPE, 0);
	};

	USING() {
	    return this.getToken(languageParser.USING, 0);
	};

	UNBOUNDED() {
	    return this.getToken(languageParser.UNBOUNDED, 0);
	};

	VARIABLE() {
	    return this.getToken(languageParser.VARIABLE, 0);
	};

	VIEW() {
	    return this.getToken(languageParser.VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.enterIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof languageListener ) {
	        listener.exitIdent(this);
		}
	}


}




languageParser.StartContext = StartContext; 
languageParser.NamespaceDeclarationContext = NamespaceDeclarationContext; 
languageParser.UsingDeclarationContext = UsingDeclarationContext; 
languageParser.UsingProxyContext = UsingProxyContext; 
languageParser.ArtifactDefOrExtendContext = ArtifactDefOrExtendContext; 
languageParser.OptArtifactsBlockContext = OptArtifactsBlockContext; 
languageParser.RequiredSemiContext = RequiredSemiContext; 
languageParser.OptionalSemiContext = OptionalSemiContext; 
languageParser.AnnotationDefContext = AnnotationDefContext; 
languageParser.ServiceDefContext = ServiceDefContext; 
languageParser.ContextDefContext = ContextDefContext; 
languageParser.EventDefContext = EventDefContext; 
languageParser.ViewDefContext = ViewDefContext; 
languageParser.EntityDefContext = EntityDefContext; 
languageParser.AspectDefContext = AspectDefContext; 
languageParser.ElementsAndOptActionsContext = ElementsAndOptActionsContext; 
languageParser.TypeDefContext = TypeDefContext; 
languageParser.ActionFunctionMainDefContext = ActionFunctionMainDefContext; 
languageParser.ActionFunctionDefContext = ActionFunctionDefContext; 
languageParser.ParameterDefContext = ParameterDefContext; 
languageParser.ParameterListDefContext = ParameterListDefContext; 
languageParser.EnumSymbolDefContext = EnumSymbolDefContext; 
languageParser.ElementDefContext = ElementDefContext; 
languageParser.ElementDefInnerContext = ElementDefInnerContext; 
languageParser.ElementTypeContext = ElementTypeContext; 
languageParser.ElementPropertiesContext = ElementPropertiesContext; 
languageParser.DefaultAndNullabilityContext = DefaultAndNullabilityContext; 
languageParser.DefaultValueContext = DefaultValueContext; 
languageParser.ExtendArtifactContext = ExtendArtifactContext; 
languageParser.ExtendServiceContext = ExtendServiceContext; 
languageParser.ExtendContextContext = ExtendContextContext; 
languageParser.ExtendEntityOrAspectContext = ExtendEntityOrAspectContext; 
languageParser.ExtendForEntityContext = ExtendForEntityContext; 
languageParser.ExtendProjectionContext = ExtendProjectionContext; 
languageParser.ExtendTypeContext = ExtendTypeContext; 
languageParser.ExtendWithOptElementsOrTypeContext = ExtendWithOptElementsOrTypeContext; 
languageParser.ExtendWithOptElementsNoWithContext = ExtendWithOptElementsNoWithContext; 
languageParser.ElementDefOrExtendContext = ElementDefOrExtendContext; 
languageParser.ExtendElementContext = ExtendElementContext; 
languageParser.AnnotateArtifactContext = AnnotateArtifactContext; 
languageParser.AnnotateArtifactActionsContext = AnnotateArtifactActionsContext; 
languageParser.AnnotateArtifactElementsContext = AnnotateArtifactElementsContext; 
languageParser.AnnotateElementContext = AnnotateElementContext; 
languageParser.AnnotateActionContext = AnnotateActionContext; 
languageParser.AnnotateReturnsContext = AnnotateReturnsContext; 
languageParser.AnnotateParamContext = AnnotateParamContext; 
languageParser.IncludeRefContext = IncludeRefContext; 
languageParser.TypeSpecContext = TypeSpecContext; 
languageParser.ReturnTypeSpecContext = ReturnTypeSpecContext; 
languageParser.TypeSpecContContext = TypeSpecContContext; 
languageParser.TypeSpecSemiContext = TypeSpecSemiContext; 
languageParser.TypeStructContext = TypeStructContext; 
languageParser.TypeCompoStructContext = TypeCompoStructContext; 
languageParser.TypeArrayContext = TypeArrayContext; 
languageParser.TypeAssociationBaseContext = TypeAssociationBaseContext; 
languageParser.TypeAssociationContContext = TypeAssociationContContext; 
languageParser.TypeAssociationElementContContext = TypeAssociationElementContContext; 
languageParser.TypeToOneContext = TypeToOneContext; 
languageParser.TypeToManyContext = TypeToManyContext; 
languageParser.CardinalityContext = CardinalityContext; 
languageParser.TargetCardinalityContext = TargetCardinalityContext; 
languageParser.OptInvisibleNullabilityContext = OptInvisibleNullabilityContext; 
languageParser.NullabilityContext = NullabilityContext; 
languageParser.ForeignKeyContext = ForeignKeyContext; 
languageParser.TypeTypeOfContext = TypeTypeOfContext; 
languageParser.TypeRefOptArgsContext = TypeRefOptArgsContext; 
languageParser.TypeRefArgsContext = TypeRefArgsContext; 
languageParser.TypeNamedArgListContext = TypeNamedArgListContext; 
languageParser.TypeNamedArgContext = TypeNamedArgContext; 
languageParser.QueryEOFContext = QueryEOFContext; 
languageParser.ProjectionSpecContext = ProjectionSpecContext; 
languageParser.ProjectionClausesContext = ProjectionClausesContext; 
languageParser.QueryExpressionContext = QueryExpressionContext; 
languageParser.QueryExpressionContContext = QueryExpressionContContext; 
languageParser.QueryPrimaryContext = QueryPrimaryContext; 
languageParser.SelectQueryContext = SelectQueryContext; 
languageParser.QuerySourceContext = QuerySourceContext; 
languageParser.TableExpressionContext = TableExpressionContext; 
languageParser.TableExpressionContContext = TableExpressionContContext; 
languageParser.TableTermContext = TableTermContext; 
languageParser.FromRefWithOptAliasContext = FromRefWithOptAliasContext; 
languageParser.TableOrQueryParenthesisContext = TableOrQueryParenthesisContext; 
languageParser.TableOrQueryExpressionContContext = TableOrQueryExpressionContContext; 
languageParser.FromPathContext = FromPathContext; 
languageParser.FromArgumentsContext = FromArgumentsContext; 
languageParser.ExcludingClauseContext = ExcludingClauseContext; 
languageParser.ProjectionExclusionContext = ProjectionExclusionContext; 
languageParser.MixinElementDefContext = MixinElementDefContext; 
languageParser.SelectItemDefContext = SelectItemDefContext; 
languageParser.SelectItemDefBodyContext = SelectItemDefBodyContext; 
languageParser.BracedSelectItemListDefContext = BracedSelectItemListDefContext; 
languageParser.SelectItemInlineListContext = SelectItemInlineListContext; 
languageParser.SelectItemInlineDefContext = SelectItemInlineDefContext; 
languageParser.OrderByClauseContext = OrderByClauseContext; 
languageParser.LimitClauseContext = LimitClauseContext; 
languageParser.OrderBySpecContext = OrderBySpecContext; 
languageParser.JoinOpContext = JoinOpContext; 
languageParser.JoinCardinalityContext = JoinCardinalityContext; 
languageParser.ConditionEOFContext = ConditionEOFContext; 
languageParser.ConditionContext = ConditionContext; 
languageParser.ConditionContContext = ConditionContContext; 
languageParser.ConditionTermContext = ConditionTermContext; 
languageParser.ConditionPrimaryContext = ConditionPrimaryContext; 
languageParser.ComparisonContContext = ComparisonContContext; 
languageParser.ExpressionContext = ExpressionContext; 
languageParser.ExpressionContContext = ExpressionContContext; 
languageParser.ExpressionPrimaryContext = ExpressionPrimaryContext; 
languageParser.ConditionOrQueryParenthesisContext = ConditionOrQueryParenthesisContext; 
languageParser.SpecialFunctionContext = SpecialFunctionContext; 
languageParser.SimplePathContext = SimplePathContext; 
languageParser.ValuePathContext = ValuePathContext; 
languageParser.PathArgumentsContext = PathArgumentsContext; 
languageParser.NamedExpressionContext = NamedExpressionContext; 
languageParser.FuncExpressionContext = FuncExpressionContext; 
languageParser.OverClauseContext = OverClauseContext; 
languageParser.PartitionByClauseContext = PartitionByClauseContext; 
languageParser.FuncOrderByClauseContext = FuncOrderByClauseContext; 
languageParser.ExprOrderByClauseContext = ExprOrderByClauseContext; 
languageParser.OrderBySpecInExprContext = OrderBySpecInExprContext; 
languageParser.WindowFrameClauseContext = WindowFrameClauseContext; 
languageParser.WindowFrameBoundSpecContext = WindowFrameBoundSpecContext; 
languageParser.WindowFrameStartSpecContext = WindowFrameStartSpecContext; 
languageParser.CardinalityAndFilterContext = CardinalityAndFilterContext; 
languageParser.OptionalCardinalityContext = OptionalCardinalityContext; 
languageParser.FilterWhereClauseContext = FilterWhereClauseContext; 
languageParser.OptionalWhereForFilterContext = OptionalWhereForFilterContext; 
languageParser.AnnotationAssignment_fixContext = AnnotationAssignment_fixContext; 
languageParser.AnnotationAssignment_ll1Context = AnnotationAssignment_ll1Context; 
languageParser.AnnotationAssignment_atnContext = AnnotationAssignment_atnContext; 
languageParser.AnnotationAssignment_parenContext = AnnotationAssignment_parenContext; 
languageParser.AnnotationAssignment_1Context = AnnotationAssignment_1Context; 
languageParser.AnnotationPathContext = AnnotationPathContext; 
languageParser.AnnotationPathVariantContext = AnnotationPathVariantContext; 
languageParser.AnnoValueContext = AnnoValueContext; 
languageParser.AnnoValueBaseContext = AnnoValueBaseContext; 
languageParser.FlattenedValueContext = FlattenedValueContext; 
languageParser.NamedValueContext = NamedValueContext; 
languageParser.AnnoSubValueContext = AnnoSubValueContext; 
languageParser.LiteralValueContext = LiteralValueContext; 
languageParser.IdentNoKeywordContext = IdentNoKeywordContext; 
languageParser.IdentContext = IdentContext; 
