name: Tests

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened, auto_merge_enabled]

# Allow parallel jobs on `main`, so that each commit is tested. For PRs, run only the latest commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    name: Node.js ${{ matrix.node }}

    strategy:
      fail-fast: true
      matrix:
        # run with oldest supported node version
        # the expectation being that the new version is backwards compatible
        node: [16]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: 'install'
        run: npm ci

      # linting
      - name: 'lint'
        run: npm run lint
      - name: auto prettier
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run lint:eslint &&
          npm run prettier &&
          gh pr checkout ${{ github.event.pull_request.number }} &&
          git config user.email "$(git show -s --format='%ae')" &&
          git config user.name "$(git show -s --format='%an')" &&
          git add -A &&
          git commit -m "✨prettier✨" &&
          git push

      # testing setup
      # Search the github repository for the image with the current hxe/* contents
      - name: Find HXE image
        id: find-hxe
        run: |
          TAG="$(sha1sum hana/tools/docker/hxe/* | sha1sum --tag | grep '[^ ]*$' -o)";
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/hanaexpress;
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]');
          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64);
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT;
          echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_OUTPUT;
          curl -H "Authorization: Bearer ${GHCR_TOKEN}" https://ghcr.io/v2/${{ github.repository_owner }}/hanaexpress/manifests/$TAG;
          if
            curl -H "Authorization: Bearer ${GHCR_TOKEN}" https://ghcr.io/v2/${{ github.repository_owner }}/hanaexpress/manifests/$TAG | grep "MANIFEST_UNKNOWN";
          then
            echo "BUILD_HXE=true" >> $GITHUB_OUTPUT
          else
            echo "BUILD_HXE=false" >> $GITHUB_OUTPUT
          fi;
      # Add docker buildx tools to use the new docker builder
      - name: Set up Docker Buildx
        if: ${{ steps.find-hxe.outputs.BUILD_HXE == 'true' }}
        uses: docker/setup-buildx-action@v2
      # Build and push the latest HXE pre initialized docker image
      - name: Build HXE image
        if: ${{ steps.find-hxe.outputs.BUILD_HXE == 'true' }}
        run: |
          TAG=${{ steps.find-hxe.outputs.TAG }};
          IMAGE_ID=${{ steps.find-hxe.outputs.IMAGE_ID }};
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin;
          DOCKER_BUILDKIT=1 docker build -t $IMAGE_ID:$TAG ./etc/hxe;
          docker push $IMAGE_ID:$TAG;
      # Pull the latest HXE image when not building it
      - name: Pull HXE image
        if: ${{ steps.find-hxe.outputs.BUILD_HXE == 'false' }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin;
          TAG=${{ steps.find-hxe.outputs.TAG }};
          IMAGE_ID=${{ steps.find-hxe.outputs.IMAGE_ID }};
          { docker pull $IMAGE_ID:$TAG; docker tag $IMAGE_ID:$TAG hanaexpress:current; } &

      # testing
      # - run: npm run test:all
