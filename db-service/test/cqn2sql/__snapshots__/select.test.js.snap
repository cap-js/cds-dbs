// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cqn2sql GROUP BY GROUP BY two columns 1`] = `"SELECT Foo.a,Foo.b FROM Foo as Foo GROUP BY Foo.x,Foo.c"`;

exports[`cqn2sql HAVING clauses with select specific elements with from type string with having clause 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo HAVING Foo.x < 9"`;

exports[`cqn2sql LIMIT with limit and offset 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo LIMIT 1 OFFSET 2"`;

exports[`cqn2sql LIMIT with limit without offset 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo LIMIT 1"`;

exports[`cqn2sql ONE one results in limit 1 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo LIMIT 1"`;

exports[`cqn2sql ORDER BY ORDER BY alias 1`] = `"SELECT Foo.a,Foo.b,count(Foo.x) as count1 FROM Foo as Foo ORDER BY count1 ASC"`;

exports[`cqn2sql WHERE EXISTS with nested EXISTS 1`] = `"SELECT T2.ID,T2.a,T2.b,T2.c,T2.x FROM Foo as T2 WHERE exists (SELECT 1 FROM Books as T1 WHERE T1.ID = 1 and exists (SELECT 1 FROM Foo2 as T0 WHERE T0.ID = 11 and T1.ID = T0.a) and T2.ID = T1.ID)"`;

exports[`cqn2sql WHERE entries where one column holds entries smaller than 9 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.x < 9"`;

exports[`cqn2sql WHERE entries where one column holds entries which are in list 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.x IN (1,2,3)"`;

exports[`cqn2sql WHERE entries where with int reference and param true 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.x = :7",
  "values": [],
}
`;

exports[`cqn2sql WHERE entries where with place holder 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.ID = ?",
  "values": [],
}
`;

exports[`cqn2sql WHERE select with a nested select in a complex where 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo WHERE ( Foo.x + 1 ) < 9 AND Foo.x IN (SELECT Foo.a FROM Foo as Foo WHERE Foo.x < 9)"`;

exports[`cqn2sql WHERE select with a nested select in where 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo WHERE Foo.x IN (SELECT Foo.a FROM Foo as Foo WHERE Foo.x < 9)"`;

exports[`cqn2sql WHERE where with partial cqn 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE (Foo.x = 9)"`;

exports[`cqn2sql WHERE where with two partial cqn 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE (Foo.x + 9) = 9"`;

exports[`cqn2sql WHERE with contains with multiple arguments 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.a = 0 and ifnull(instr((Foo.a,Foo.b,Foo.c,Foo.x),?),0)"`;

exports[`cqn2sql WHERE with contains with one column in where clause 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE ifnull(instr((Foo.b),?),0)",
  "values": [
    "5",
  ],
}
`;

exports[`cqn2sql WHERE with list of values 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE (Foo.a,Foo.b,1) = (Foo.c,?,Foo.x)",
  "values": [
    "d",
  ],
}
`;

exports[`cqn2sql WHERE with select with exist in where condition 1`] = `"SELECT T1.ID,T1.a,T1.b,T1.c,T1.x FROM Foo as T1 WHERE exists (SELECT Foo2.ID,Foo2.name,Foo2.a FROM Foo2 as Foo2)"`;

exports[`cqn2sql aggregation functions with select with count(1) 1`] = `"SELECT count(1) as count FROM Foo as Foo"`;

exports[`cqn2sql aggregation functions with select with different functions without alias in elements 1`] = `"SELECT min(Foo.x) as min,count(1) as count,sum(Foo.x) as sum FROM Foo as Foo"`;

exports[`cqn2sql aggregation functions with select with functions in elements new notation 1`] = `"SELECT min(Foo.x) as foo1,Foo.a,count(*) as foo2,count(1) as foo3,sum(Foo.x) as foo4 FROM Foo as Foo"`;

exports[`cqn2sql aggregation functions with select with functions in where clause new notation 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo WHERE max(Foo.x) < 9"`;

exports[`cqn2sql complex combinations AS, sub query 1`] = `"SELECT Foo.a,Foo.b as B,1 as C,Foo.x + 2 as D,(SELECT Foo2.ID,Foo2.a,Foo2.b,Foo2.c,Foo2.x FROM Foo as Foo2) as E FROM Foo as Foo"`;

exports[`cqn2sql complex combinations Exists in object mode in complex where 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.ID = ? and ( exists (SELECT Author.id FROM Author as Author WHERE Author.id <> ?) or exists (SELECT Foo2.ID FROM Foo2 as Foo2 WHERE Foo2.name is distinct from ?) )",
  "values": [
    "123",
    "",
    "",
  ],
}
`;

exports[`cqn2sql complex combinations WHERE, GROUP BY, HAVING, ORDER BY, LIMIT, OFFSET 1`] = `"SELECT Foo.x + 1 as foo1,Foo.b,Foo.c FROM Foo as Foo WHERE Foo.ID = 111 GROUP BY Foo.x HAVING Foo.x < 9 ORDER BY c ASC LIMIT 11 OFFSET 22"`;

exports[`cqn2sql functions new notation in filter with 1 arg new notation 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE lower(Foo.c) = ?",
  "values": [
    "name",
  ],
}
`;

exports[`cqn2sql functions new notation in filter with 2 arg new notation 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.c = Foo.a || Foo.b"`;

exports[`cqn2sql functions new notation in filter with 3 arg new notation 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.c = ? || Foo.a || ?",
  "values": [
    "Existing",
    "!",
  ],
}
`;

exports[`cqn2sql functions new notation in filter with asterisk as arg new notation 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo HAVING count(*) > 1"`;

exports[`cqn2sql functions new notation in filter with nested functions new notation 1`] = `
{
  "sql": "SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE lower(Foo.a) = lower(upper(trim(?))) and length(trim(?)) = Foo.b",
  "values": [
    "   existing name  ",
    "  name",
  ],
}
`;

exports[`cqn2sql functions new notation in filter with subselect as function param 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo WHERE Foo.ID = any((SELECT Foo2.ID FROM Foo2 as Foo2 WHERE Foo2.a = 1))"`;

exports[`cqn2sql functions new notation in orderby with 1 arg new notation 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo ORDER BY lower(Foo.c) DESC"`;

exports[`cqn2sql quoted column aliases select with simple subselect and column aliases 1`] = `"SELECT Foo.a,Foo.b as B,1 as C,Foo.x + 2 as D,(SELECT Foo2.a,Foo2.b as B,false as False,Foo2.x + 2 as Xpr FROM Foo as Foo2) as E FROM Foo as Foo"`;

exports[`cqn2sql quoted column aliases select with subselect in exists and column aliases 1`] = `"SELECT T2.id,T2.version,T2.parent_ID FROM Author as T2 WHERE exists (SELECT 1 as One,T1.code as Xpr1 FROM Books as T1 WHERE T1.ID = 1 and exists (SELECT 3 as Three,T0.x + 1 as Xpr2 FROM Foo as T0 WHERE T0.ID = 11 and T1.ID = T0.b))"`;

exports[`cqn2sql quoted column aliases select with subselect with in and column aliases 1`] = `
{
  "sql": "SELECT Foo.a as A,? as ABC,Foo.x + 1 as Xpr1 FROM Foo as Foo WHERE ( Foo.x + 1 ) < 9 AND Foo.x IN (SELECT Foo.a as B,Foo.x - 4 as Xpr2 FROM Foo as Foo WHERE Foo.x < 9)",
  "values": [
    "abc",
  ],
}
`;

exports[`cqn2sql quoted column aliases simple select with column aliases 1`] = `
{
  "sql": "SELECT T.a as A,true as True,false as False,NULL as Null,count(*) as CountFunc FROM Foo as T",
}
`;

exports[`cqn2sql selection of columns of one table select distinct 1`] = `"SELECT DISTINCT Foo.a,Foo.b,Foo.c FROM Foo as Foo"`;

exports[`cqn2sql selection of columns of one table with select from non existent entity with star wildcard 1`] = `"SELECT * FROM "Â¿HoWdIdYoUmAnAgeToCaLaNeNtItyThIsNaMe?""`;

exports[`cqn2sql selection of columns of one table with select specific elements with from ref 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo"`;

exports[`cqn2sql selection of columns of one table with select that has (faked) reflection model 1`] = `"SELECT T1.ID,T1.a,T1.b,T1.c,T1.x FROM Foo as T1"`;

exports[`cqn2sql selection of columns of one table with select with asterisk in columns 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo"`;

exports[`cqn2sql selection of columns of one table with select with empty orderBy and specific elements with from type string 1`] = `"SELECT Foo.a,Foo.b,Foo.c FROM Foo as Foo"`;

exports[`cqn2sql selection of columns of one table with select with from ref and elements = undefined 1`] = `"SELECT Foo.ID,Foo.a,Foo.b,Foo.c,Foo.x FROM Foo as Foo"`;

exports[`cqn2sql selection of columns of one table with select with from ref and elements as empty array 1`] = `"SELECT FROM Foo as Foo"`;
