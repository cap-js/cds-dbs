
DO (
  IN USERNAME NVARCHAR(255) => ?,
  IN USERPASS NVARCHAR(255) => ?,
  IN SCHEMANAME NVARCHAR(255) => ?,
  IN CREATEGROUP BOOLEAN => ?
)
BEGIN SEQUENTIAL EXECUTION
  DECLARE USER_EXISTS INT;
  DECLARE RETURN_CODE INT;
  DECLARE REQUEST_ID BIGINT;
  DECLARE ALL_MESSAGES _SYS_DI.TT_MESSAGES;
  DECLARE MESSAGES _SYS_DI.TT_MESSAGES;
  DECLARE PRIVILEGES _SYS_DI.TT_API_PRIVILEGES;
  DECLARE SCHEMA_PRIV _SYS_DI.TT_SCHEMA_PRIVILEGES;

  DECLARE IGNOREPARAMS _SYS_DI.TT_PARAMETERS;

  NO_PARAMS = SELECT * FROM _SYS_DI.T_NO_PARAMETERS;

  SELECT COUNT(*) INTO USER_EXISTS FROM SYS.USERS WHERE USER_NAME = :USERNAME;
  IF :CREATEGROUP = FALSE THEN
    CALL _SYS_DI.DROP_CONTAINER_GROUP(:SCHEMANAME, :NO_PARAMS, :RETURN_CODE, :REQUEST_ID, :MESSAGES);
    ALL_MESSAGES = SELECT * FROM :MESSAGES;

    IF :USER_EXISTS > 0 THEN
      EXEC 'DROP USER ' || :USERNAME || ' CASCADE';
    END IF;
  END IF;

  IF :CREATEGROUP = TRUE THEN
    IF :USER_EXISTS = 0 THEN
      EXEC 'CREATE USER ' || :USERNAME || ' PASSWORD ' || :USERPASS || ' NO FORCE_FIRST_PASSWORD_CHANGE';
    END IF;
    EXEC 'GRANT USER ADMIN TO ' || :USERNAME;
    EXEC 'GRANT EXECUTE ON SYS.GET_INSUFFICIENT_PRIVILEGE_ERROR_DETAILS TO ' || :USERNAME || ' WITH GRANT OPTION';
    CALL _SYS_DI.CREATE_CONTAINER_GROUP(:SCHEMANAME, :NO_PARAMS, :RETURN_CODE, :REQUEST_ID, :MESSAGES);
    ALL_MESSAGES = SELECT * FROM :MESSAGES;
    COMMIT;

    PRIVILEGES = SELECT PRIVILEGE_NAME, OBJECT_NAME, PRINCIPAL_SCHEMA_NAME, :USERNAME AS PRINCIPAL_NAME FROM _SYS_DI.T_DEFAULT_CONTAINER_GROUP_ADMIN_PRIVILEGES;

    CALL _SYS_DI.GRANT_CONTAINER_GROUP_API_PRIVILEGES(:SCHEMANAME, :PRIVILEGES, :NO_PARAMS, :RETURN_CODE, :REQUEST_ID, :MESSAGES);
    ALL_MESSAGES = SELECT * FROM :ALL_MESSAGES UNION ALL SELECT * FROM :MESSAGES;
    COMMIT;
    SELECT * FROM :ALL_MESSAGES;
  END IF;
END;
